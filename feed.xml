<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT技术干货</title>
    <description>[IT技术干货iftti.com] @KernelHacks</description>
    <link>http://iftti.com/</link>
    <atom:link href="http://iftti.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 16 Sep 2014 23:35:13 +0800</pubDate>
    <lastBuildDate>Tue, 16 Sep 2014 23:35:13 +0800</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>魔咒 Mojolicious 框架的结构图</title>
        <description>

							&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;/images/php-oa.com/366cad86e05b8761b814b4f39ed81eb7.jpg&quot; style=&quot;height: 765px; width: 800px;&quot;&gt;&lt;br&gt;
本图来源: &lt;a href=&quot;http://blog2.jamadam.com/?p=808&quot;&gt;http://blog2.jamadam.com/?p=808&lt;/a&gt;&lt;/p&gt;
						

</description>
        <pubDate>Tue, 16 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-16-mojolicious-class-diagram.html-67b45904e.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-16-mojolicious-class-diagram.html-67b45904e.html</guid>
        
        
        <category>php-oa</category>
        
      </item>
    
      <item>
        <title>The MSRs of EC2</title>
        <description>

&lt;p&gt;Is Intel Turbo Boost running for my AWS EC2 cloud instance (which is a Xen guest)?&lt;/p&gt;

&lt;pre&gt;
ec2-guest# &lt;b&gt;./showboost&lt;/b&gt;
CPU MHz     : 2500
Turbo MHz   : 2900 (10 active)
Turbo Ratio : 116% (10 active)
CPU 0 summary every 5 seconds...

TIME       C0_MCYC      C0_ACYC        UTIL  RATIO    MHz
06:11:35   6428553166   7457384521      51%   116%   &lt;b&gt;2900&lt;/b&gt;
06:11:40   6349881107   7365764152      50%   115%   &lt;b&gt;2899&lt;/b&gt;
06:11:45   6240610655   7239046277      49%   115%   &lt;b&gt;2899&lt;/b&gt;
06:11:50   6225704733   7221962116      49%   116%   &lt;b&gt;2900&lt;/b&gt;
[...]
&lt;/pre&gt;

&lt;p&gt;Yes! These 2500 MHz CPUs are currently running at 2900 MHz.&lt;/p&gt;

&lt;p&gt;I guess the CPUs are cold enough to boost. What&#39;s their temperature?&lt;/p&gt;

&lt;pre&gt;
ec2-guest# &lt;b&gt;./cputemp -l 1&lt;/b&gt;
CPU1 CPU2 CPU3 CPU4 CPU5 CPU6 CPU7 CPU8 CPU9 CPU10 CPU11 CPU12 CPU13 CPU14 CPU15 CPU16
70 68 68 65 63 63 61 60 68 64 64 63 62 61 70 68
70 68 69 65 63 63 61 61 68 65 63 63 61 61 70 69
70 69 69 65 63 63 61 60 69 65 64 63 61 61 69 69
69 69 69 66 64 64 61 61 68 65 64 64 61 61 70 69
[...]
&lt;/pre&gt;

&lt;p&gt;Relatively cool: between 60 and 70 degrees Celsius. This is another tool from my &lt;a href=&quot;https://github.com/brendangregg/msr-cloud-tools&quot;&gt;msr-cloud-tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post I&#39;ll describe MSRs, how to read them, and why measuring turbo boost is important.&lt;/p&gt;

&lt;h2&gt;Model Specific Registers (MSRs)&lt;/h2&gt;

&lt;div style=&quot;float:right;padding-left:5px;padding-bottom:5px&quot;&gt;&lt;a href=&quot;/blog/images/2014/cputemps.png&quot;&gt;&lt;img src=&quot;/images/brendangregg.com/3fdcd8199d3b291f36be8145702e96c2.jpg&quot; width=&quot;455&quot;&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Aka &lt;em&gt;machine&lt;/em&gt; specific registers, these are described in &lt;a href=&quot;http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3c-part-3-manual.pdf&quot;&gt;Vol 3c&lt;/a&gt; of the Intel 64 and IA-32 Architectures Software Developer&#39;s Manual. They access low level CPU information, including turbo boost ratios and temperature readings. They are read and written using the RDMSR and WRMSR instructions.&lt;/p&gt;

&lt;p&gt;The image on the right shows how CPU temperatures, measured using MSRs on an EC2 instance, vary based on CPU utilization (in blue). The workload is synthetic: all CPUs driven to 100% utilization for 5 minutes, then to 0% for a while, repeat. What&#39;s interesting is that temperature rises initially with CPU load, then drops sharply. Did system fans kick in? (So far I haven&#39;t found fan RPM MSRs, to confirm.)&lt;/p&gt;

&lt;p&gt;I&#39;m usually focused on the performance monitoring counters (PMCs; aka performance instrumentation counters (PICs), CPU performance counters (CPCs), etc.). These are read by RDPMC, and described in &lt;a href=&quot;http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-3-manual.pdf&quot;&gt;Vol 3b&lt;/a&gt; of the same manual. These can measure data cache misses, stall cycles, and other useful performance events.&lt;/p&gt;

&lt;p&gt;On AWS EC2, within a cloud instance (Xen guest), I&#39;ve never seen the PMCs work, eg, via &quot;&lt;a href=&quot;http://www.brendangregg.com/perf.html#CPUstatistics&quot;&gt;perf stat&lt;/a&gt;&quot;. That doesn&#39;t mean they can&#39;t ever work, just that they (or their controlling MSRs) aren&#39;t currently available.&lt;/p&gt;

&lt;p&gt;But a small handful of MSRs &lt;em&gt;are&lt;/em&gt; available on EC2. Here are the more interesting ones I&#39;ve found:&lt;/p&gt;

&lt;div style=&quot;padding-left:20px&quot;&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Reg&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xe7&lt;/td&gt;
&lt;td&gt;IA32_MPERF&lt;/td&gt;
&lt;td&gt;Bits 63:0 is TSC Frequency Clock Counter C0_MCNT TSC relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0xe8&lt;/td&gt;
&lt;td&gt;IA32_APERF&lt;/td&gt;
&lt;td&gt;Bits 63:0 is TSC Frequency Clock Counter C0_ACNT actual clocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x19c&lt;/td&gt;
&lt;td&gt;IA32_THERM_STATUS&lt;/td&gt;
&lt;td&gt;Bits 22:16 is the CPU therm status digital readout (DO)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1a2&lt;/td&gt;
&lt;td&gt;MSR_TEMPERATURE_TARGET&lt;/td&gt;
&lt;td&gt;Bits 23:16 is temp target (TT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1ad&lt;/td&gt;
&lt;td&gt;MSR_TURBO_RATIO_LIMIT&lt;/td&gt;
&lt;td&gt;Bits 7:0 is the turbo boost ratio (x100 for MHz) for 1 core active&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1ae&lt;/td&gt;
&lt;td&gt;MSR_TURBO_RATIO_LIMIT1&lt;/td&gt;
&lt;td&gt;Bits 15:8 (for example) is the turbo boost ratio for 10 cores active&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;center&gt;&lt;font size=&quot;-1&quot;&gt;&lt;i&gt;Table 1. MSRs for Intel(R) Xeon(R) CPU E5-2670 v2&lt;/i&gt;&lt;/font&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;These are used by various kernel routines, like the idle thread and cpufreq.&lt;/p&gt;

&lt;p&gt;Note that these are &lt;b&gt;model specific&lt;/b&gt;, which means they can vary between different processor models (micro-architectures). For example, Silvermont has a read/write target offset in MSR_TEMPERATURE_TARGET (bits 29:24), which can lower the throttle temperature (PROCHOT). Such differences make MSRs non-portable and tricky to use, which is why standards like &lt;a href=&quot;http://en.wikipedia.org/wiki/Performance_Application_Programming_Interface&quot;&gt;PAPI&lt;/a&gt; are important.&lt;/p&gt;

&lt;h2&gt;Reading MSRs&lt;/h2&gt;

&lt;p&gt;Here&#39;s how you can measure MSRs (assuming Intel):&lt;/p&gt;

&lt;h3&gt;1. Determine your CPU type and micro-architecture&lt;/h3&gt;

&lt;pre&gt;
# &lt;b&gt;head /proc/cpuinfo&lt;/b&gt;
processor       : 0
vendor_id       : GenuineIntel
&lt;b&gt;cpu family      : 6
model           : 62&lt;/b&gt;
model name      : Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz
[...]
&lt;/pre&gt;

&lt;p&gt;The family and model numbers tell us that this is the Ivy Bridge micro-architecture (see the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-architecture-and-processor-identification-with-cpuid-model-and-family-numbers&quot;&gt;Intel decoder&lt;/a&gt;). You can also use the cpuid tool (from the cpuid package), which should report micro-architecture directly.&lt;/p&gt;

&lt;h3&gt;2. Look up MSRs for your processor type

These are in Vol 3c of the &lt;a href=&quot;http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html&quot;&gt;Intel software developer manual&lt;/a&gt;. This is a 540 page volume, and if you&#39;re new to it, you&#39;ll get lost a few times before you get the hang of it.

&lt;h3&gt;3. Install and load msr-tools:&lt;/h3&gt;

&lt;pre&gt;
# &lt;b&gt;apt-get install msr-tools&lt;/b&gt;
# &lt;b&gt;modprobe msr&lt;/b&gt;
&lt;/pre&gt;

&lt;/h3&gt;
&lt;p&gt;(Assuming Ubuntu.) The msr-tools package adds the rdmsr and wrmsr tools, and the msr kernel module.&lt;/p&gt;

&lt;h3&gt;4. Use rdmsr&lt;/h3&gt;

&lt;p&gt;Based on the addresses from (2). Eg, to read the turbo boost ratio when 10 cores are active (Ivy Bridge):&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;rdmsr 0x1ae -f 15:8 -d&lt;/b&gt;
29
&lt;/pre&gt;

&lt;p&gt;Multiply by 100 to get MHz. The way these work is explained earlier in the manual.&lt;/p&gt;

&lt;p&gt;I did share a couple of tools in a &lt;a href=&quot;https://github.com/brendangregg/msr-cloud-tools&quot;&gt;msr-cloud-tools&lt;/a&gt; collection, however, I&#39;ve only written them for the processor type I&#39;m currently analyzing. You may need to edit these to get them using the right MSRs.&lt;/p&gt;

&lt;h2&gt;Why Measure Turbo Boost&lt;/h2&gt;

&lt;p&gt;We live in an annoying age for computer performance analysts: the error margin for many measurements &lt;em&gt;is over 10%&lt;/em&gt;, thanks to turbo boost, an Intel processor technology that can dynamically over-clock CPUs. Ubuntu is 10% faster than CentOS? Could just be turbo boost. New software version regressed by 5%? Could just be turbo boost. Tunable made things 10% faster? Could just be ... You get the picture.&lt;/p&gt;

&lt;p&gt;Turbo boost can make a 2500 MHz processor run at 3300 Mhz, depending on factors including temperature, power consumption, and the C-state of the cores. Colder servers run faster. I once had two identical servers at the top and bottom of a rack, and the top server ran 5% faster, as it received more cold air from the air conditioners. That&#39;s both great and maddening: I&#39;ll take the better performance, but it can also mess up measurements when I&#39;m comparing systems or software.&lt;/p&gt;

&lt;p&gt;There are three ways I&#39;ve historically dealt with this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Turn off turbo boost in the BIOS when doing performance comparisons.&lt;/li&gt;
&lt;li&gt;Measure actual CPU cycles using CPU performance counters to observe the turbo boost rate.&lt;/li&gt;
&lt;li&gt;Run a short experiment (benchmark) to measure the current cycle rate, eg, &lt;a href=&quot;http://www.brendangregg.com/blog/2014-04-26/the-noploop-cpu-benchmark.html&quot;&gt;noploop&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you run your own datacenter, you can do them all. But as a Xen guest on AWS EC2, you can&#39;t change the BIOS and do (1). You can do option (3), but that can be time-consuming and difficult (less reliable) on very busy systems. Until recently, I thought you couldn&#39;t do (2), either, and then I found the MSRs...&lt;/p&gt;

&lt;h2&gt;Discovering MSRs&lt;/h2&gt;

&lt;p&gt;I was working on a suspected turbo boost issue when a colleague at Netflix, Scott, mentioned that he liked using the i7z command to debug turbo boost. We didn&#39;t think it would work on EC2, but I tried anyway.&lt;/p&gt;

&lt;p&gt;Most of the output was clearly wrong, but a lone column of temperature readings showed that something was working. Using opensnoop from my ftrace &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt; collection to see how:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;./opensnoop -n i7z&lt;/b&gt;
Tracing open()s issued by process name &quot;i7z&quot;. Ctrl-C to end.
COMM             PID      FD FILE
i7z              8427    0x3 /proc/cpuinfo
i7z              8427    0x3 /dev/cpu/0/msr
i7z              8427    0x3 /dev/cpu/0/msr
i7z              8427    0x3 /dev/cpu/0/msr
i7z              8427    0x3 /dev/cpu/0/msr
[...]
&lt;/pre&gt;

&lt;p&gt;This showed that i7z was reading /dev/cpu/0/msr, and led me to take a close look at the available MSRs.&lt;/p&gt;

&lt;p&gt;I&#39;d normally use CPU_CLK_Unhalted.Core, but that wasn&#39;t available. After some digging, I found I could use the ratio of IA32_APERF deltas to IA32_MPERF deltas, which shows how much faster the time stamp counter (TSC, which is cycle-based) is moving when the processor is in the C0 state.&lt;/p&gt;

&lt;p&gt;It was an enormous relief to find a way to directly measure real clock rates, and turbo boost. My error margins have vanished: &lt;strong&gt;I can measure performance again&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A handful of model-specific registers, MSRs, are available in Xen guests including on AWS EC2. These allow the real clock rate, and the degree of turbo boost, to be measured. This is important to know for any performance comparison, as variations in turbo boost can skew results by over 10%, based on how hot or cold servers were during the test.&lt;/p&gt;

&lt;p&gt;I&#39;ve written a couple of tools so far, in &lt;a href=&quot;https://github.com/brendangregg/msr-cloud-tools&quot;&gt;msr-cloud-tools&lt;/a&gt;, to measure CPU turbo boost and temperature. As is the nature of MSRs, they are specific to processor types, and these scripts only work (so far) on our Intel(R) Xeon(R) CPU E5-2670 v2s. If you want to use these tools or MSRs yourself, you may need to find out the right MSRs to use for your processor type. The good news is that the vendor documentation from Intel and AMD is very good, although it takes some time to dig through.&lt;/p&gt;


</description>
        <pubDate>Mon, 15 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-15-the-msrs-of-ec2.html-261b110e2.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-15-the-msrs-of-ec2.html-261b110e2.html</guid>
        
        
        <category>brendangregg</category>
        
      </item>
    
      <item>
        <title>适合码农工作时玩的游戏：Scrum</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/devtang.com/ac3545959ccea6d9abb3418a92b5b607.jpg&quot;&gt;&lt;/p&gt;

&lt;h1&gt;前言&lt;/h1&gt;

&lt;p&gt;昨天遇到一个来自微软的面试者，在面试的最后，我简单介绍了一下我们团队使用一周一次的Scrum来做项目管理。他回答说：”我在微软也用Scrum，不过我们一周两次，时间在周二和周四上午，每次15分钟“。我听了就笑了，我说：“同学，你说的这个应该是Scrum的站立会议，Scrum实际上有4个会议，站立会议只是其中一个。另外，标准的站立会议应该每天一次，不是每周两次。”接着我给他介绍了Scrum的4个会议，每个会议的意义是什么，他若有所思。&lt;/p&gt;

&lt;p&gt;今天和同事吃饭说起这件事情，同事pw说：在他所了解到的使用Scrum的公司里面，我们应该是执行Scrum做得最规范的，同时我们从Scrum实践中，收获了非常多。&lt;/p&gt;

&lt;p&gt;大约在3年前（当时我们团队还在网易），我们团队开始尝试用Scrum来进行软件开发的项目管理。在经过了3年的摸索和调整后，我们不但多次保证了项目的顺利上线，而且建立起了适合自己团队的工作方式。&lt;/p&gt;

&lt;p&gt;正如Scrum官方指南所说，“Scrum是易于理解，但难以精通的”，在此向大家分享我们实践的心得体会，希望更多的开发团队能够运用Scrum来流化自己的开发流程。&lt;/p&gt;

&lt;h1&gt;Scrum是游戏规则&lt;/h1&gt;

&lt;p&gt;在&lt;a href=&quot;https://www.scrum.org/Scrum-Guide&quot;&gt;Scrum官方网站&lt;/a&gt;上，提供了中文版本的&lt;a href=&quot;https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100&quot;&gt;《Scrum指南》&lt;/a&gt;，这份只有14页的文档的封面上，写下了其最核心原则：游戏规则。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtang.com/f36e7670b3f9eeafc833e0ee003b78cc.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;什么是游戏规则？游戏规则是玩游戏的人为了更好地娱乐而制定的规则。所以Scrum的规则是为了让大家更开心，更有效地工作，而不是约束大家。事实上由于Scrum只是一个框架，所以在实践Scrum时，更多的规则需要团队成员共同制定，这更加体现了游戏规则的思想——大家自己制定的规则，必定是得到大家一致同意的、能让大家舒服工作的规则。&lt;/p&gt;

&lt;h1&gt;Scrum是基于经验的&lt;/h1&gt;

&lt;p&gt;Scrum强调经验的重要性，但是经验又是需要不断调整的，所以Scrum通过迭代增量的开发方式，来每次调整整个团队的经验，从而来优化可预测性。&lt;/p&gt;

&lt;p&gt;例如，我们在开发猿题库时，在每轮Scrum的结束时，我们会开回顾会议，将大家每天处理待办事项的速度（我们称做日均Story Point）总结在Wiki中，如下图所示。这样当我们估计一个新一轮的迭代工作是否能够完成时，就可以参考前面几十次的经验，做出更加理性地判断。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtang.com/21266d4f76795f6e8c2a2f639c3a26c5.jpg&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Scrum的三大支柱&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtang.com/a6460ae3f5ac875b4bb168b36e0c6e27.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;透明性、检视、调整是Scrum的三大支柱。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;透明性是指：团队成员要达到对信息的完全共享，以便对观察到的信息有相同的理解。&lt;/li&gt;
&lt;li&gt;检视是指：团队成员要不停地检查自己的状态，类似汽车的定期检查一样，通过检视了解当前项目的状态。&lt;/li&gt;
&lt;li&gt;调整是指：团队成员发现出现了会影响项目进度的事件后，要及时寻找对策。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;以上的说法有些学术化，我们可以这样理解：&lt;/p&gt;

&lt;p&gt;群体智商常常会出现低于个体智商的现象，这是因为个体之间的信息通常不一致，每个人的信息都是片面的，所以造成了观点的片面，而通常情况下团队领导由于接受到的信息更全面，所以他的决策考虑会更周到一些。&lt;/p&gt;

&lt;p&gt;但是Scrum又强调团队需要是“自组织”的，这就需要群体进行决策而不是领导。为了群体更好的决策，所以Scrum特别强调信息的透明，这样大家的信息都是充分共享的，而检视是一种保证信息透明的方法，即定期地查看自己和团队的状态，有了信息的透明，这样团队成员就能共同发现项目执行中的问题，进而一起寻找解决办法，从而达到“自组织”的团队。&lt;/p&gt;

&lt;h1&gt;Scrum的基础游戏规则&lt;/h1&gt;

&lt;p&gt;Scrum定义了基础的游戏规则，在基础的游戏规则之上，团队可以依据自己的经验，制定更细致的规则。但更细致的规则不应该违背基础的规则。这就像国家的宪法一样，其它法律不能与宪法违背。&lt;/p&gt;

&lt;p&gt;那我们来看看Scrum有哪些基础的游戏规则。&lt;/p&gt;

&lt;h2&gt;角色定义&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtang.com/787a539aca009a1d0db5fb98e5c085c4.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;玩三国杀的同学都知道，玩之前大家会抽身份：主公、反賊、忠臣、内奸。而Scrum的游戏规则里面，有以下几种身份角色：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;产品负责人：产品负责人是管理产品待办列表的唯一责任人，也是产品最终的责任人。（稍后我们在介绍计划会议时，解释什么是产品待办列表。）简单来说，最终如果产品没做好，应该扣产品负责人的工资。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发团队：开发团队是负责将每轮Scrum迭代中计划的功能（可能是产品稿+美术稿的形式），交付成可发布的产品的各种专业人员。这里的各种专业人员包括：服务器端开发、Javascript前端开发、客户端开发、测试人员等。开发团队是真正在玩这个Scrum游戏的人，其他人（例如产品负责人都只是部分参与）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scrum Master：Scrum Master类似于杀人游戏中的法官，即游戏组织者。Scrum Master并不是团队的领导，他仅仅是做一些组织工作，而对于一个“自组织”的团队来说，其实真正需要组织的事情也不太多，所以他常常由开发团队中的某一个人兼任。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;没有子团队&lt;/h3&gt;

&lt;p&gt;在Scrum的官方文档中，这样说道：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Scrum 不认可开发团队中的所谓“子团队”,无论是测试还是业务分析的成员都不能划分为“子团队”。此规则无一例外。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;所以我们看到，Scrum在定义角色的时候，强调开发团队中一个整体，包含把产品发布出来的所有相关的专业技术人员，并且开发团队共同承担开发的责任，只有这样，大家才能形成利益共同体，共同努力把产品做好。&lt;/p&gt;

&lt;p&gt;这一点也解释了为什么很多大公司玩不好Scrum。拿百度举例，百度的一个项目就有很多“子团队”。在百度，前端开发人员属于前端组，移动端开发人员属于移动端组，测试有专门的QA组，PM也有专门的组。这样的划分，进而造成大家的绩效评估并不是完全由项目执行的好坏来决定，而PM也需要花很大精力去推动大家，这样的团队没有共同的利益，是很难做到“自组织”的。&lt;/p&gt;

&lt;h3&gt;强调平等&lt;/h3&gt;

&lt;p&gt;Scrum中仅定义了“开发团队”这个整体的角色，在“开发团队”内部，大家都是平等的。因为只有这样，大家才能更加自由的共享信息，共同决策，否则决策权仍然掌握在少部分人手里。在Scrum的官方文档中，是这样说的：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Scrum 不认可开发团队成员的头衔，无论承担哪种工作他们都叫做开发人员。此规则无一例外。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;游戏人数规则&lt;/h3&gt;

&lt;p&gt;开发团队还有一个不能不说的特点，就是他的规模必须足够小，因为他强调信息的透明，如果人数过大，光沟通的成本就大到无法承受了，所以官方文档上推荐的人数是 10人以内（不包括产品负责人和Scrum Master，除非他们也参与开发）。&lt;/p&gt;

&lt;p&gt;但是在实际执行中，由于业务的增长，团队人数很容易就超过10人。比如我们猿题库在创业时只有不到10人，现在已经成长到几十人了。这个时候，比较好的做法是进行团队的切分，比如我们试过将猿题库的服务器端和客户端进行拆分，这样保证每个团队还是在10人以内。如果以后再增长，可能客户端会再进行拆分成iOS团队和Android团队。&lt;/p&gt;

&lt;h3&gt;游戏时间&lt;/h3&gt;

&lt;p&gt;Scrum对每一轮的迭代时间并没有严格的规定，但它要求是小于一个月。对于每一轮的迭代，Scrum把它称作Sprint（冲刺）。&lt;/p&gt;

&lt;p&gt;作为创业公司，我们在最近两年都实践着一周一次Sprint的方式来工作。一周一次Sprint能够保证调整足够快，Sprint执行中是不鼓励需求改动的。所以一周一次的Sprint能够做到，对于比较急迫的需求改动，在下次Sprint时（下周）就可以执行。&lt;/p&gt;

&lt;p&gt;一周一次的Sprint也有不少问题，由于偏离本文主题，所以就不展开介绍了。现在我们的猿题库直播课项目组也在尝试进行2周一次的Sprint。总之，Sprint多长是由开发团队根据项目的具体特点来决定的，只要不超过一个月即可。&lt;/p&gt;

&lt;h2&gt;游戏玩法&lt;/h2&gt;

&lt;p&gt;讲了半天，终于讲到核心了，到底怎么玩这个游戏啊！为了更好的理解，我们先看看杀人游戏的玩法，杀人游戏定义了如下几个事件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;天黑请闭眼，这个时候大家都闭上眼睛&lt;/li&gt;
&lt;li&gt;杀手睁眼，杀手杀人，杀手闭眼&lt;/li&gt;
&lt;li&gt;警察睁眼，警察检查，警察闭眼&lt;/li&gt;
&lt;li&gt;天亮了，宣布谁死了，大家讨论并投票谁是杀手，投出的嫌疑人被杀死。如果警察或杀手死了，宣布游戏结束，否则跳到第1步。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;刚好，Scrum也定义了4个事件，分别是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;计划会议&lt;/li&gt;
&lt;li&gt;每日站立会议&lt;/li&gt;
&lt;li&gt;评审会议&lt;/li&gt;
&lt;li&gt;回顾会议&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;以下我们来详细介绍一下这4个会议到底要具体怎么做。&lt;/p&gt;

&lt;h3&gt;计划会议&lt;/h3&gt;

&lt;p&gt;计划会议主要通过讨论，完成两件事情：做什么、怎么做。&lt;/p&gt;

&lt;p&gt;关于“做什么”：产品负责人会给出一个产品待办列表，然后由团队成员来根据预计的工作量以及以往的表现，来挑选接下来的Sprint需要完成的待办项。这里的特点是：由开发团队成员自己来挑选待办项，而不是由传统意义上的Tech Leader或产品负责人来挑选。这样保证了开发任务是由团队成员自己决定的，他更有责任心把事情完成。同时作为产品负责人，有必要非常明确地告诉开发团队每一个待办项的意义和重要性，这样开发团队才能做出有利于产品的挑选工作。&lt;/p&gt;

&lt;p&gt;关于“怎么做”：开发团队从待办列表中挑选完需要完成的待办项之后，就需要对每个要做的待办项进行评估。评估的工作就是讨论具体怎么做，这包括技术架构、实现细节的讨论。只有讨论得非常清楚之后，这项工作的工作量才会比较清楚。&lt;/p&gt;

&lt;p&gt;在讨论怎么做之后，一些敏捷公司推荐使用“出牌”的方式来评估工作量，我们也采用了这种方式，我们还专门做了一套Scrum扑克，用于出牌。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtang.com/0a67592fc1aeaaee160b6e72166be585.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;出牌的规则是每个人出一张牌，用牌上的数字表示当前工作的工作量。通常大家还会事先约定好数字2代表的工作量，以保证大家的标准相同。为了避免相互影响，大家先把要出的牌扣着，然后同时翻开。之后，出最高分的和出最低分的同学要表达意见，说明为什么自己估计成这样，大家讨论，这样的过程可以保证大家的信息都是透明的，即没有忽略掉的技术实现难度或细节，在信息充分共享的情况下，通常大家第二次出牌时就可以达成一致了。&lt;/p&gt;

&lt;h3&gt;每日站立会议&lt;/h3&gt;

&lt;p&gt;每日站立会议是进行检视的方法。通常选择固定时间（我们是每天早上10点10分开），以养成团队工作习惯来避免组织成本。站立会议要尽量的短，通常控制在15分钟以内，选择站着开会，也是让大家有更大的预期快速结束。&lt;/p&gt;

&lt;p&gt;站立会议主要是为了沟通，以及发现潜在可能的问题，在站立会议上，团队成员每个人要讲3句话：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我昨天做了什么&lt;/li&gt;
&lt;li&gt;我今天打算做什么&lt;/li&gt;
&lt;li&gt;我遇到了什么问题&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;通过这3句话来达到高效沟通的目的，对于会上提到的问题，通常是下来相关人员自行解决。&lt;/p&gt;

&lt;p&gt;站立会议通常能够发现项目进展的状态是否顺利，从而尽早采取相应的措施。时间较长的Sprint可以配合燃尽图，更方便地审视项目进展速度。&lt;/p&gt;

&lt;h3&gt;评审会议&lt;/h3&gt;

&lt;p&gt;Sprint 评审会议在 Sprint 结束时举行，用于检查计划中的工作，哪些完成了，哪些没有完成。在我们的实践中，我们会让开发的同事演示自己所做的功能，然后PM会看这个功能是否达到了要求。&lt;/p&gt;

&lt;h3&gt;回顾会议&lt;/h3&gt;

&lt;p&gt;回顾会议是开发团队检视自己，发现团队运转中的问题，并且定制游戏规则的过程。通过对前一个Sprint中的人、关系、过程、工具进行检视，团队成员能够总结出做得好的，和做得不好的。进而制定一个改进的方案。&lt;/p&gt;

&lt;p&gt;回顾会议是Scrum创建“自组织”团队的关键，它将团队自我改进变成了一个例行的会议，在这个会议中，讨论的都是大家对该游戏的感受，包括好的和不好的，最终大家为了玩得更爽，就会发扬好的，努力避免不好的，成为一个能够自我进化的集体。&lt;/p&gt;

&lt;p&gt;需要注意的是，回顾会议不应该成为吐槽大会，大家应该本着发现问题，解决问题的态度来讨论。例如：如果在回顾会议仅仅是抱怨产品老是改需求，或者抱怨时间不够，而不提出解决方案的话，是非常不好的。&lt;/p&gt;

&lt;p&gt;提出问题是容易的，麻烦的是提出解决方案。我们的老大郭常圳提出了一个办法，即我们思考：“如果再来一次，我们能不能做得更好”？如果我们发现，如果再来一次，由于客观原则，我们可能仍然无法避免同样的问题，那么我们就选择坦然接受而不是抱怨。&lt;/p&gt;

&lt;p&gt;因为很多时候本来就没有完美的、没有任何问题的解决方案，这就像软件都有Bug一样，如果Bug不可避免，我们就选择发现的时候尽量修复而不是编码的时候避免。&lt;/p&gt;

&lt;h3&gt;框架图&lt;/h3&gt;

&lt;p&gt;下图介绍了Scrum的整个框架：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtang.com/cd095ee776cea67c25f10846160db4a2.jpg&quot;&gt;&lt;/p&gt;

&lt;h2&gt;一些问题&lt;/h2&gt;

&lt;h3&gt;有什么辅助Scrum的工具？&lt;/h3&gt;

&lt;p&gt;我们使用的是Redmine的Scrum插件来开相关的Scrum会议。我们Scrum的回顾会议总结放在内部的Wiki上。也有团队喜欢直接用白板+便签来完成Scrum的相关会议。像JIRA一类的专业项目管理软件，也都支持Scrum。&lt;/p&gt;

&lt;h3&gt;游戏超时怎么办？&lt;/h3&gt;

&lt;p&gt;游戏超时通常就意味着游戏结束。在Scrum这个游戏中，团队成员不接受Sprint延期。所以不管有没有完成所有任务，评审会议和回顾会议都需要按时开，没有完成的任务需要进行仔细讨论，分析其原因到底是什么，从而在下一轮Sprint中尽量避免出现同样的问题。&lt;/p&gt;

&lt;h3&gt;开发团队自己挑任务，会不会造成项目进度很慢？&lt;/h3&gt;

&lt;p&gt;通常情况下不会。如果我们真正把Scrum做好，大家能享受到Scrum带来的各种好处，例如团队每个人都能参与决策团队做事方式，每个人都能积极的追求效率，而一次次成功的Scrum，带给大家的成就感也是巨大的。&lt;/p&gt;

&lt;p&gt;好的Scrum执行还能保证团队不会随意加班，我们已经很久没有周末加班了，平时晚上大部分时间也都能做到按时下班，这对于互联网公司来说，几乎是不可想像的。&lt;/p&gt;

&lt;p&gt;不加班只是一个附属品，最重要的是按时发布产品，我们创业2年多来从来没有延期发布过产品。这样使得我们的运营推广计划能够非常有序地执行。&lt;/p&gt;

&lt;p&gt;需要强调的是，不加班并不是代表我们的工作轻松，通常情况下我们的Scrum安排还是比较紧张的，因为我们都想创业时跑得快一些。不加班也不是我们的原则，我们的原则是按时发布产品，所以当有一些特殊情况产生时，我们也会适当的加班。我们只是不把加班当作一个常态的工作方式，因为我们认为工作效率比工作时长更为重要。另一方面我们认为创业是长跑，保持良好的发布节奏已经非常好了，长期加班造成的身体懈怠可能会造成工作效率的损失。&lt;/p&gt;

&lt;h3&gt;Scrum适合所有团队吗？&lt;/h3&gt;

&lt;p&gt;首先Scrum是非常适合程序员的，因为程序员天生就不喜欢约束。Scrum的“自组织”团队的思想很容易让程序员感觉到自己是团队的主人。另外Scrum是非常反会议的，4个会议都严格地规定了时间长度，所以可以让程序员有充足的时间花在编码上。Scrum也是比较反需求临时变更的，由于Sprint周期短（我们才一周），所以变更可以根据重要程度放到下一个Sprint中。&lt;/p&gt;

&lt;p&gt;Scrum非常强调团队作为一个整体来做事情，所以并没有刻意地去评估每个人具体的工作量。这需要团队每个人都比较自觉。当然，由于强调透明和检视，所以团队内如果有人懈怠的话，团队里其他人是很容易发现的。&lt;/p&gt;

&lt;p&gt;所以，如果你的团队人数在10人左右，又能保证团队是一个整体为项目负责，那就有了尝试Scrum的基础。&lt;/p&gt;

&lt;h3&gt;为什么很多公司用不好Scrum？&lt;/h3&gt;

&lt;p&gt;Scrum指南里面也提到，Scrum是“易于学习，难于精通的”。所以Scrum本来就比较难做好。我感觉到几个比较容易出现的问题是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;团队里面有人不信Scrum能比以前的软件开发方式更好。游戏规则使终是游戏规则，如果有人不想玩游戏的话，游戏玩起来就没有那么愉快了。真正想做好Scrum就得认真学习Scrum指南，然后努力遵守Scrum的规则。只有当大家都努力玩这个游戏时，才能享受游戏的乐趣。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随意更改Scrum的规则。例如我以前在有道的团队就把Scrum的每日站会改成了每周二，周四开一个坐会，开会的方式也变成产品经理询问进度，各个技术人员汇报的方式，会议一次要开半个多小时。这一下子就把每日站会做得变味了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;难以组建团队。之前说过像百度这类大公司，其公司文化不是一朝一夕形成的。Scrum的工作方式要求大家都为项目完全负责，而很多传统公司按职能来划分团队，例如PM团队、客户端团队、前端团队等，这会影响Scrum的执行。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Scrum是终极大招吗&lt;/h3&gt;

&lt;p&gt;Scrum不是银弹，它并不能解决所有问题，实际上，很多时候它根本不提供解决问题的方法。Scrum本身只是一个框架，通过这个框架，我们更容易发现项目运行中的问题，通过定期的回顾会议来解决问题。&lt;/p&gt;

&lt;h1&gt;结束语&lt;/h1&gt;

&lt;p&gt;本文旨在通过介绍Scrum的核心思想和基本框架，吸引大家了解Scrum。要实践Scrum，还是需要进一步的学习才行。欢迎大家详细阅读&lt;a href=&quot;https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100&quot;&gt;《Scrum指南》&lt;/a&gt;，然后尝试使用Scrum来让自己每天的工作变得轻松愉快。&lt;/p&gt;

&lt;p&gt;PS：我们的公司猿题库创业两年，做在线教育方向，不久前顺利拿到了1500万美元的C轮融资。我们现在很缺人，也欢迎大家加入我们，和我们一起玩Scrum游戏，感兴趣的可以看：&lt;a href=&quot;http://www.yuantiku.com/campus/&quot;&gt;职位介绍&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;愿大家玩得开心～&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-13-scrum-introduction-3e0aca621.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-13-scrum-introduction-3e0aca621.html</guid>
        
        
        <category>devtang</category>
        
      </item>
    
      <item>
        <title>Linux perf Rides the Rocket</title>
        <description>

&lt;div style=&quot;float:right;padding-left:10px;padding-bottom:5px&quot;&gt;
&lt;img src=&quot;/images/brendangregg.com/4dd4b2e20638a1d4bacfcc0b576f2881.jpg&quot; width=&quot;250&quot; height=&quot;176&quot;&gt;&lt;br&gt;&lt;center&gt;&lt;font size=&quot;-1&quot;&gt;&lt;i&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Rocket_sled&quot;&gt;Riding the rocket&lt;/a&gt;&lt;/i&gt;&lt;/font&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;WHAT DOES IT MEAN?? Ubuntu Trusty was dropping packets in our cloud instance, and leaving us with the mysterious system message:&lt;/p&gt;

&lt;pre&gt;
[85290.555808] xen_netfront: xennet: 
 &lt;b&gt;skb rides the rocket: 19 slots&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;This led us to ride the rocket of advanced Linux kernel tracing...&lt;/p&gt;

&lt;p&gt;In this post, I&#39;ll demonstrate some fairly unknown features (practically secrets) of Linux kernel tracing using perf_events, which is part of the Linux kernel source (tools/perf).&lt;/p&gt;

&lt;p&gt;Mysterious system messages are better than no system messages, because we have something at least to search for. The message comes from the following function (this is Linux 3.13.6), which transmits a packet from a Xen guest (this is on AWS EC2):&lt;/p&gt;

&lt;pre&gt;
static int xennet_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
[...]
        slots = DIV_ROUND_UP(offset + len, PAGE_SIZE) +
                xennet_count_skb_frag_slots(skb);
        if (unlikely(slots &amp;gt; MAX_SKB_FRAGS + 1)) {
                net_alert_ratelimited(
                        &quot;xennet: &lt;b&gt;skb rides the rocket&lt;/b&gt;: %d slots\n&quot;, slots);
                goto drop;
        }
&lt;/pre&gt;

&lt;p&gt;Yes, goto drop, which bumps a counter and frees the packet. Client problem now! The client will, after a performance-problem-inducing timeout, retransmit the packet. Let&#39;s hope the retransmitted packet doesn&#39;t RIDE THE ROCKET as well! (... I&#39;m serious – this could lead to exponential latency.)&lt;/p&gt;

&lt;p&gt;We know the value of &lt;tt&gt;slots&lt;/tt&gt;, since it&#39;s part of the system message (19). We know what MAX_SKB_FRAGS is from the kernel source: it&#39;s 16, and is related to limiting the number of fragments or pages that can be sent to a device ring buffer. We don&#39;t know &lt;tt&gt;offset&lt;/tt&gt;, &lt;tt&gt;len&lt;/tt&gt;, or the return of &lt;tt&gt;xennet_count_skb_frag_slots(skb)&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m a little familiar with this codepath already, and have an idea of the real size of these skbs (eg, by using &quot;perf-stat-hist net:net_dev_xmit len 10&quot; from &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt;; see the &lt;a href=&quot;https://github.com/brendangregg/perf-tools/blob/master/examples/perf-stat-hist_example.txt&quot;&gt;example&lt;/a&gt;), and what the offset might be. I&#39;d like to check them directly here, but I&#39;ll start by instrumenting the return of xennet_count_skb_frag_slots() using &lt;a href=&quot;http://www.brendangregg.com/perf.html&quot;&gt;perf_events&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf probe &#39;xennet_count_skb_frag_slots%return ret=$retval&#39;&lt;/b&gt;
Return probe must be on the head of a real function.
  Error: Failed to add events. (-22)
# &lt;b&gt;grep xennet_count_skb_frag_slots /proc/kallsyms&lt;/b&gt;
# 
&lt;/pre&gt;

&lt;p&gt;... Really compiler, can&#39;t you inline someone else?&lt;/p&gt;

&lt;p&gt;So this symbol doesn&#39;t even exist. (I wish the compiler would RIDE THE ROCKET!) For most tracers, this is a dead end. Almost.&lt;/p&gt;

&lt;p&gt;Having used a kernel dynamic tracer for a decade, I&#39;ve developed all kinds of tricks and hacks to work around this: maybe there&#39;s a child of xennet_count_skb_frag_slots() function I can trace; maybe I can duplicate the logic from xennet_start_xmit(), where I can observe skb. I began trying such workarounds, but in this case it was becomming onerous. At this point I&#39;d usually start considering editing the kernel and inserting instrumentation just to see this, which involves a compile, test, and deploy cycle.&lt;/p&gt;

&lt;p&gt;But on Linux, &lt;b&gt;with kernel debuginfo&lt;/b&gt;, I can go a lot further directly. Let&#39;s switch to the entry to that function, and use &quot;-nv&quot; to show what perf probe would have done without doing it:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf probe -nv xennet_count_skb_frag_slots&lt;/b&gt;
probe-definition(0): xennet_count_skb_frag_slots 
symbol:xennet_count_skb_frag_slots file:(null) line:0 offset:0 return:0 lazy:(null)
0 arguments
Looking at the vmlinux_path (6 entries long)
symsrc__init: cannot get elf header.
Using /lib/modules/3.13.11.6/build/vmlinux for symbols
found inline addr: 0xffffffff8152dae8
Probe point found: xennet_start_xmit+88
find 1 probe_trace_events.
Opening /sys/kernel/debug//tracing/kprobe_events write=1
Added new event:
&lt;b&gt;Writing event: p:probe/xennet_count_skb_frag_slots xennet_start_xmit+88&lt;/b&gt;
  probe:xennet_count_skb_frag_slots (on xennet_count_skb_frag_slots)

You can now use it in all perf tools, such as:

    perf record -e probe:xennet_count_skb_frag_slots -aR sleep 1
&lt;/pre&gt;

&lt;p&gt;Wow, so the beginning of this inlined function can indeed be instrumented, since Linux can trace kernel instructions (or line numbers). Note the offset &quot;+88&quot;.&lt;/p&gt;

&lt;p&gt;Lines inside this function (despite it being inlined) can also be traced. The perf report command will list candidates with -L:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf probe -L xennet_count_skb_frag_slots&lt;/b&gt;
&lt;xennet_count_skb_frag_slots&gt;
      0  static int xennet_count_skb_frag_slots(struct sk_buff *skb)
&lt;font color=&quot;blue&quot;&gt;         {&lt;/font&gt;
      2         int i, frags = skb_shinfo(skb)-&amp;gt;nr_frags;
      3         int pages = 0;
         
      5         for (i = 0; i                         skb_frag_t *frag = skb_shinfo(skb)-&amp;gt;frags + i;
      7                 unsigned long size = skb_frag_size(frag);
&lt;font color=&quot;blue&quot;&gt;                        unsigned long offset = frag-&amp;gt;page_offset;
         
                        /* Skip unused frames from start of page */&lt;/font&gt;
     11                 offset &amp;amp;= ~PAGE_MASK;
         
     13                 pages += PFN_UP(offset + size);
&lt;font color=&quot;blue&quot;&gt;                }
         
                return pages;&lt;/font&gt;
&lt;/xennet_count_skb_frag_slots&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty amazing. perf shows line numbers of those that can be instrumented directly, and those that can&#39;t in blue.&lt;/p&gt;

&lt;p&gt;Some local variables can also be inspected. Let&#39;s look at what is available at line 11:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf probe -V xennet_count_skb_frag_slots:11&lt;/b&gt;
Available variables at xennet_count_skb_frag_slots:11
        @&amp;lt;xennet_start_xmit+155&amp;gt;
                int     pages
                long unsigned int       size
&lt;/pre&gt;

&lt;p&gt;The &lt;tt&gt;offset&lt;/tt&gt; variable is missing, but I have others to work with, which is pretty useful. I can also include external symbols; add an &quot;--externs&quot; to the end of that one-liner for the list.&lt;/p&gt;

&lt;h2&gt;But don&#39;t you hate kernel debuginfo?&lt;/h2&gt;

&lt;p&gt;Yes, it&#39;s rainbows and ponies with kernel debuginfo, but it&#39;s also over 100 Mbytes. At Netflix, we create and destroy cloud instances frequently (auto-scaling and code deployments), and it&#39;s important to keep the instance size small to reduce creation time, and keep network traffic down.&lt;/p&gt;

&lt;p&gt;I&#39;ve come up with a simple workaround: create one small test instance with kernel debuginfo for each kernel version used, and use it for reference. Let&#39;s say I wanted to trace those local variables on line 11 of xennet_count_skb_frag_slots(). On my reference instance:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf probe -nv &#39;xennet_count_skb_frag_slots:11 pages size&#39; 2&amp;gt;&amp;amp;1 | grep Writing&lt;/b&gt;
Writing event: p:probe/xennet_count_skb_frag_slots &lt;b&gt;xennet_start_xmit+155 pages=%si:s32 size=%di:u64&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;Now I copy-n-paste, with a mouse, the highlighted details for use in perf probe (or my kprobe from &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt;, if it&#39;s a real function entry) on the system without debuginfo. Eg:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf probe &#39;xennet_count_skb_frag_slots:11 pages size&#39;&lt;/b&gt;
Failed to find path of kernel module.
Failed to open debuginfo file.
  Error: Failed to add events. (-2)
# &lt;b&gt;perf probe &#39;xennet_start_xmit+155 pages=%si:s32 size=%di:u64&#39;&lt;/b&gt;
Failed to find path of kernel module.
Added new event:
  probe:xennet_start_xmit (on xennet_start_xmit+155 with pages=%si:s32 size=%di:u64)

You can now use it in all perf tools, such as:

    perf record -e probe:xennet_start_xmit -aR sleep 1
&lt;/pre&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;I began by showing that this system really doesn&#39;t have kernel debuginfo. The second try, with the register details from the reference system, worked. Note that this approach will only create a valid probe if the kernel versions are identical. If you try this on a different kernel, it may appear to work, but provide invalid results. &lt;/p&gt;

&lt;p&gt;SystemTap can automate the use of reference systems, although when I tried I had issues with firewalling and port forwarding due to our environment. As for other ways: I met Masami Hiramatsu at LinuxCon North America, and he came up with a way to build a simple text database of functions and variables – stripping debuginfo down to just what I needed. I&#39;ll blog about that when I get a chance.&lt;/p&gt;

&lt;p&gt;These reference systems are also useful for testing tracing invocations, before using them in production.&lt;/p&gt;

&lt;h2&gt;Some output&lt;/h2&gt;

&lt;p&gt;Enabling this probe:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;perf record -e probe:xennet_start_xmit -aR sleep 10&lt;/b&gt;
[ perf record: Woken up 1 times to write data ]
[ perf record: Captured and wrote 1.466 MB perf.data (~64033 samples) ]
# &lt;b&gt;perf script&lt;/b&gt;
[...]
  sshd 92592 [009] 87585.288990: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=280
  sshd 92592 [009] 87585.295461: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=3058
  sshd 92592 [009] 87585.295472: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=4f8
  sshd 92592 [009] 87585.296417: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=538
  sshd 92592 [009] 87585.296426: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=1c8
  sshd 92592 [009] 87585.304101: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=29e0
  sshd 92592 [009] 87585.304102: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=3 size=bdc
  sshd 92592 [009] 87585.304111: probe:xennet_start_xmit: (ffffffff8152e6bb) pages=0 size=4d4
[...]
&lt;/pre&gt;

&lt;p&gt;Great. The sizes are larger than the expected MTU, because of TCP send offload (TSO).
Warning: any network packet tracing can cost significant overheads, especially for 10 GbE speeds and beyond, so be careful on the network path and look for other solutions first.&lt;/p&gt;

&lt;h2&gt;What about the rocket?&lt;/h2&gt;

&lt;p&gt;It&#39;s a driver bug with TSO. A very large skb can span too many pages (more than 16) to be put in the driver ring buffer. One workaround is &quot;sudo ethtool -K eth0 tso off&quot;, for your interface. There&#39;s plenty of articles about this on the Internet, and they are easy to find thanks to our mysterious message. :-)&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don&#39;t always need Linux kernel line number tracing, but sometimes it is very handy. Local variables at given line numbers can also be inspected. This is useful for both performance analysis and debugging, such as the analysis of our &quot;skb rides the rocket&quot; issue.&lt;/p&gt;

&lt;p&gt;To use this feature without kernel debuginfo on all cloud instances, I used a reference system approach. This reference system also serves as places to test specific tracing, before using it in production.&lt;/p&gt;

&lt;p&gt;As with all kernel tracing: be careful, as there have been panics and freezes in the past, and know what you are doing before use. For more about perf, see my &lt;a href=&quot;http://www.brendangregg.com/perf.html&quot;&gt;perf_events&lt;/a&gt; page and the &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Main_Page&quot;&gt;perf wiki&lt;/a&gt;.&lt;/p&gt;


</description>
        <pubDate>Thu, 11 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-11-perf-kernel-line-tracing.html-34d140960.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-11-perf-kernel-line-tracing.html-34d140960.html</guid>
        
        
        <category>brendangregg</category>
        
      </item>
    
      <item>
        <title>Swift Has Reached 1.0</title>
        <description>

						
						

						&lt;p&gt;On June 2, 2014 at WWDC, the Swift team finally showed you what we had been working on for years. That was a  big day with lots of excitement, for us and for developers around the world. Today, we’ve reached the second giant milestone:&lt;/p&gt;
&lt;p&gt;Swift version 1.0 is now GM.&lt;/p&gt;
&lt;p&gt;You can now submit your apps that use Swift to the App Store. Whether your app uses Swift for a small feature or a complete application, now is the time to share your app with the world. It’s your turn to excite everyone with your new creations.&lt;/p&gt;
&lt;h3&gt;Swift for OS X&lt;/h3&gt;
&lt;p&gt;Today is the GM date for Swift on iOS. We have one more GM date to go for Mac. Swift for OS X currently requires the SDK for OS X Yosemite, and when Yosemite ships later this fall, Swift will also be GM on the Mac. In the meantime, you can keep developing your Mac apps with Swift by downloading the beta of &lt;a href=&quot;http://developer.apple.com/xcode/downloads/&quot;&gt;Xcode 6.1&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The Road Ahead&lt;/h3&gt;
&lt;p&gt;You’ll notice we’re using the word “GM”, not “final”. That’s because Swift will continue to advance with new features, improved performance, and refined syntax. In fact, you can expect a few improvements to come in Xcode 6.1 in time for the Yosemite launch. Because your apps today embed a version of the Swift GM runtime, they will continue to run well into the future.&lt;/p&gt;

						
												
											

</description>
        <pubDate>Tue, 09 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-09--id=14-50ea6b53d.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-09--id=14-50ea6b53d.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>移动开发需要知道的像素知识『多图』</title>
        <description>

	
	

	&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/9d2907cfc7bdb7c48ea701cb214293f5.jpg&quot; title=&quot;title&quot; alt=&quot;title&quot;&gt;&lt;/p&gt;

&lt;p&gt;像素（Pixel）对于WEB开发者来说很是熟悉，在PC互联网时代没少与其打交道。进入移动互联网之后，随着移动设备屏幕的解析度越来越高，衍生了一些关于屏幕和像素的一些新概念，比如DPI，DP，PT，Retina，4K等等，本文对这些概念做一个简单的介绍。&lt;/p&gt;

&lt;h2&gt;DPI与PPI&lt;/h2&gt;

&lt;p&gt;DPI（Dots Per Inch）是印刷行业中用来度量空间点密度用的，这个值是打印机每英寸可以喷的墨汁点数。计算机显示设备从打印机中借鉴了DPI的概念，由于计算机显示设备中的原子单位不是墨汁点而是像素，所以就创造了PPI（Pixels Per Inch），这个值是屏幕每英寸的像素数量，即像素密度（Screen density）。由于各种原因，目前PPI(主要是iOS)和DPI(比如在&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html#terms&quot;&gt;Android&lt;/a&gt;中)都会用在计算机显示设备的参数描述中，不过二者的意思是一样的，都是代表像素密度。&lt;/p&gt;

&lt;p&gt;高PPI屏幕显示的元素会比较精细（看起来会比较小），低PPI屏幕显示的元素相对来说就比粗糙（看起来会比较大），我们通过一幅图来看看在不同PPI下元素显示的区别：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/375817a6231b35a39aedcc389785cd4c.jpg&quot; title=&quot;PPI&quot; alt=&quot;PPI&quot;&gt;&lt;/p&gt;

&lt;h2&gt;HD与4K&lt;/h2&gt;

&lt;p&gt;现在移动设备、智能电视宣传最多的两个关键词估计就是HD、4K，这二者都是用来描述显示设备分辨率的标准，到底二者之间有什么区别？&lt;/p&gt;

&lt;p&gt;HD(High-Definition)的分辨率要高于1280x720px或者720p。&lt;/p&gt;

&lt;p&gt;Full HD的分辨率要高于1920x1080px，目前是主流电视以及高端手机（比如Galaxy SIV, HTC one, Sony Xperia Z, Nexus5等）采用的是这个分辨率。&lt;/p&gt;

&lt;p&gt;4K（也叫做Quad HD或者Ultra HD）的分辨率从3840x2160起步，主要是现在高端电视的分辨率；其还有一个更高的4096x2160的标准，主要用于电影放映机或者专业相机。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/9f67b75af71b33a442d121fad67b556f.jpg&quot; title=&quot;4k&quot; alt=&quot;4k&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Retina&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Retina_Display&quot;&gt;Retina display&lt;/a&gt;即视网膜屏幕，是苹果发布iPhone 4时候提出的，之所以叫做视网膜屏幕，是因为屏幕的PPI太高，人的视网膜无法分辨出屏幕上的像素点。iPhone 4/S的PPI为326，是iPhone 3G/S的两倍，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/1989ea1cbdc4b76f42d17d7882d4d334.jpg&quot; title=&quot;retina-01&quot; alt=&quot;retina-01&quot;&gt;&lt;/p&gt;

&lt;p&gt;由于屏幕在宽和高的像素数量提高了整整一倍，所以之前非Retina屏幕上的一个像素渲染的内容在Retina屏幕上会用4个像素去渲染：&lt;code&gt;1x1px(non Retina) = 2x2px(Retina)&lt;/code&gt;，这样元素的内容就会变得精细，比如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/829faa674075ffdb240ca9fdd3797009.jpg&quot; title=&quot;retina-02&quot; alt=&quot;retina-02&quot;&gt;&lt;/p&gt;

&lt;p&gt;注意，&lt;code&gt;Retina display&lt;/code&gt;是苹果注册的命名方式，其他厂商只能使用&lt;code&gt;HI-DPI&lt;/code&gt;或者其他的命名方式，不过意思都是一样的，就是屏幕的PPI非常高。&lt;/p&gt;

&lt;h2&gt;DP/PT/SP&lt;/h2&gt;

&lt;p&gt;随着移动设备屏幕PPI的不断提高，对于开发者来说以前用物理像素(Physical Pixel)来度量显示元素的方法已经不奏效了。为了解决这个问题，两大平台都提出了抽象像素的概念：iOS叫做PT（Point，显示点），Android中叫做DP/DiP（Device independent Pixel，设备无关像素），如果没有特殊说明，以下统一用DP来进行描述。&lt;/p&gt;

&lt;p&gt;举个例子，44x44dp的元素在非Retina屏幕中等于44x44px，在Retina屏幕中等于88x88px（变为4倍）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/e66891fc599472cb5703bf0019c725e6.jpg&quot; title=&quot;dp-01&quot; alt=&quot;dp-01&quot;&gt;&lt;/p&gt;

&lt;p&gt;SP（Scale-independent pixel）是缩放无关的像素，与DP和PT一样都是抽象像素，只不过用于描述字体的大小。&lt;/p&gt;

&lt;h2&gt;iOS中处理PPI&lt;/h2&gt;

&lt;p&gt;iOS中处理不同PPI显示的方法很简单：首先规定在多高的PPI下1DP等于1px，并以这个PPI作为基准（1x multiplier），如果显示设备的PPI是基准PPI的2倍，那么1DP等于2px（2x multiplier），其实就是简单的小学乘法。&lt;/p&gt;

&lt;p&gt;在iPhone系列中，3G/S为1x multiplier，其他为2x multiplier：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/def49637d8580bb9fe6afc53b08eea2f.jpg&quot; title=&quot;ios-01&quot; alt=&quot;ios-01&quot;&gt;&lt;/p&gt;

&lt;p&gt;在iPad系列中，iPad 1代和2代为1x multiplier，其他为2x multiplier：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/d3d4a647836cee38f924d5c93c5de251.jpg&quot; title=&quot;ios-02&quot; alt=&quot;ios-02&quot;&gt;&lt;/p&gt;

&lt;p&gt;在iPad Mini系列中，iPad Mini一代为1x multiplier，其他为2x multiplier：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/2ff23f64e1a8a0a50851272789323945.jpg&quot; title=&quot;ios-03&quot; alt=&quot;ios-03&quot;&gt;&lt;/p&gt;

&lt;p&gt;在iOS中，同一个应用在非Retina屏幕和Retina屏幕显示的资源是不同的，其规则是：
&lt;code&gt;name.png&lt;/code&gt;为非Retina资源，&lt;code&gt;name@2x.png&lt;/code&gt;为Retina资源，所以对于设计人员来说，在你设计的时候需要考虑到Retina屏幕和非Retina屏幕，看下面这个例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/dcb816243d9005a2f96181d42775d9d1.jpg&quot; title=&quot;ios-04&quot; alt=&quot;ios-04&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Android中处理PPI&lt;/h2&gt;

&lt;p&gt;由于Android系统是开放的系统，要适配的PPI非常多，所以它对PPI划分的非常细：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ldpi (low) ~120dpi&lt;/li&gt;
&lt;li&gt;mdpi (medium) ~160dpi&lt;/li&gt;
&lt;li&gt;hdpi (high) ~240dpi&lt;/li&gt;
&lt;li&gt;xhdpi (extra-high) ~320dpi&lt;/li&gt;
&lt;li&gt;xxhdpi (extra-extra-high) ~480dpi&lt;/li&gt;
&lt;li&gt;xxxhdpi (extra-extra-extra-high) ~640dpi&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;你需要把对应dpi的资源放到对应的目录就可以了，Android会根据dpi自动选择资源，目录规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;drawable-mdpi/asset.png&lt;/li&gt;
&lt;li&gt;drawable-hdpi/asset.png&lt;/li&gt;
&lt;li&gt;drawable-xhdpi/asset.png&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;可以看出Android中mdpi与iOS中的1x multiplier所代表的PPI是一样的，xhdpi与iOS的2x multiplier所代表的PPI一样，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/21c329be0d1b37bb0944a2f24be2a2e8.jpg&quot; title=&quot;android-01&quot; alt=&quot;android-01&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/6ee5509c9e80c3ae42290e742e353e6b.jpg&quot; title=&quot;android-02&quot; alt=&quot;android-02&quot;&gt;&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sebastien-gabriel.com/designers-guide-to-dpi/home&quot;&gt;http://sebastien-gabriel.com/designers-guide-to-dpi/home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html&quot;&gt;http://developer.android.com/guide/practices/screens_support.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


	(完)

	&lt;div class=&quot;post-info&quot;&gt;
		07 Sep 2014  
	
		
	
		
	&lt;/div&gt;
	
	&lt;!-- disqus start --&gt;
	
	
	
	
	&lt;!-- disqus end --&gt;

	&lt;!-- related start --&gt;
	
	&lt;!-- related end --&gt;

</description>
        <pubDate>Sun, 07 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-07-you-should-know-about-dpi.html-e3405bc14.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-07-you-should-know-about-dpi.html-e3405bc14.html</guid>
        
        
        <category>weizhifeng</category>
        
      </item>
    
      <item>
        <title>Linux ftrace TCP Retransmit Tracing</title>
        <description>

&lt;p&gt;Why is my Linux system doing TCP retransmits? Lets see packet details and kernel state:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;./tcpretrans&lt;/b&gt;
TIME     PID    LADDR:LPORT          -- RADDR:RPORT          STATE
05:16:44 3375   10.150.18.225:53874  R&amp;gt; 10.105.152.3:6001    ESTABLISHED
05:16:44 3375   10.150.18.225:53874  R&amp;gt; 10.105.152.3:6001    ESTABLISHED
05:16:54 4028   10.150.18.225:6002   R&amp;gt; 10.150.30.249:1710   ESTABLISHED
05:16:54 4028   10.150.18.225:6002   R&amp;gt; 10.150.30.249:1710   ESTABLISHED
05:16:54 4028   10.150.18.225:6002   R&amp;gt; 10.150.30.249:1710   ESTABLISHED
05:16:55 0      10.150.18.225:47115  R&amp;gt; 10.71.171.158:6001   ESTABLISHED
05:16:58 0      10.150.18.225:44388  R&amp;gt; 10.103.130.120:6001  ESTABLISHED
^C
Ending tracing...
&lt;/pre&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;tcpretrans is a script from my &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt; collection, and uses &lt;a href=&quot;/blog/2014-08-30/ftrace-the-hidden-light-switch.html&quot;&gt;ftrace&lt;/a&gt; to dynamically instrument the tcp_retransmit_skb() kernel function. One reason this is awesome is that the overhead is negligible: it only adds instrumentation to the retransmit path. It&#39;s also using existing Linux kernel features, ftrace and kprobes, and doesn&#39;t even need kernel debuginfo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This does not trace every packet and then filter&lt;/strong&gt;, such as if I had used any tcpdump/libpcap/kernel-packet-filter approach, which can become painful for high packet rates. (I think it would also be lazy to trace every packet when you can just trace the kernel retransmit code path.)&lt;/p&gt;

&lt;p&gt;Using a tracer like ftrace means I can also dig out kernel state, which is invisible to on-the-wire tracers like tcpdump. I only included the kernel STATE column, but anything kernel-side could be included.&lt;/p&gt;

&lt;p&gt;The -s option will include the kernel stack trace that led to the TCP retransmit:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;./tcpretrans -s&lt;/b&gt;
TIME     PID    LADDR:LPORT          -- RADDR:RPORT          STATE
06:21:10 19516  10.144.107.151:22    R&amp;gt; 10.13.106.251:32167  ESTABLISHED
 =&amp;gt; tcp_fastretrans_alert
 =&amp;gt; tcp_ack
 =&amp;gt; tcp_rcv_established
 =&amp;gt; tcp_v4_do_rcv
 =&amp;gt; tcp_v4_rcv
 =&amp;gt; ip_local_deliver_finish
 =&amp;gt; ip_local_deliver
 =&amp;gt; ip_rcv_finish
 =&amp;gt; ip_rcv
 =&amp;gt; __netif_receive_skb
 =&amp;gt; netif_receive_skb
 =&amp;gt; handle_incoming_queue
 =&amp;gt; xennet_poll
 =&amp;gt; net_rx_action
 =&amp;gt; __do_softirq
 =&amp;gt; call_softirq
 =&amp;gt; do_softirq
 =&amp;gt; irq_exit
 =&amp;gt; xen_evtchn_do_upcall
 =&amp;gt; xen_do_hypervisor_callback
[...]
&lt;/pre&gt;

&lt;p&gt;In this case, the retransmit was sent after receiving a packet (ip_rcv()), processing a TCP ACK (tcp_ack()), and then by tcp_fastretrans_alert(). This is a TCP fast retransmit. Ie, these:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;netstat -s | grep -i retr&lt;/b&gt;
    242 segments retransmited
    &lt;b&gt;46 fast retransmits&lt;/b&gt;
    2 forward retransmits
    3 retransmits in slow start
&lt;/pre&gt;

&lt;p&gt;Here are a couple of timer-based retransmits for comparison:&lt;/p&gt;

&lt;pre&gt;
06:38:45 0      10.11.172.162:7102   R&amp;gt; 10.10.153.60:47538   ESTABLISHED
 =&amp;gt; tcp_write_timer_handler
 =&amp;gt; tcp_write_timer
 =&amp;gt; call_timer_fn
 =&amp;gt; run_timer_softirq
 =&amp;gt; __do_softirq
 =&amp;gt; irq_exit
 =&amp;gt; xen_evtchn_do_upcall
 =&amp;gt; xen_hvm_callback_vector
 =&amp;gt; default_idle
 =&amp;gt; arch_cpu_idle
 =&amp;gt; cpu_startup_entry
 =&amp;gt; start_secondary
06:38:45 0      10.11.172.162:7102   R&amp;gt; 10.10.153.60:47539   ESTABLISHED
 =&amp;gt; tcp_write_timer_handler
 =&amp;gt; tcp_write_timer
 =&amp;gt; call_timer_fn
 =&amp;gt; run_timer_softirq
 =&amp;gt; __do_softirq
 =&amp;gt; irq_exit
 =&amp;gt; xen_evtchn_do_upcall
 =&amp;gt; xen_hvm_callback_vector
 =&amp;gt; default_idle
 =&amp;gt; arch_cpu_idle
 =&amp;gt; cpu_startup_entry
 =&amp;gt; rest_init
 =&amp;gt; start_kernel
 =&amp;gt; x86_64_start_reservations
 =&amp;gt; x86_64_start_kernel
&lt;/pre&gt;

&lt;p&gt;These come from a callback, and tcp_write_timer_handler(). Timer-based retransmits are worse than fast retransmits, as they add timer-based latency to application requests. This is usually 1000 ms in Linux.&lt;/p&gt;

&lt;p&gt;My tcpretrans ftrace-based tool is a hack, and may not work on some systems without alterations (it also doesn&#39;t support IPv6 yet). To dig out custom details like IP addresses as dotted quad strings, I really should be using a programmable tracer like SystemTap. However, I wanted to see if this was possible with just ftrace, as it would make it easier to use in my production environment (Netflix cloud).&lt;/p&gt;

&lt;p&gt;It works like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dynamically instrument tcp_retransmit_skb() using kprobes, and capture the %di register.&lt;/li&gt;
&lt;li&gt;Assume the skb pointer is in register %di (to know for certain would require kernel debuginfo, which I don&#39;t normally have on production systems). On non-x86 systems, this may well be in another register, and this script will need editing.&lt;/li&gt;
&lt;li&gt;Wait one second.&lt;/li&gt;
&lt;li&gt;Read the kernel buffer of tcp_retransmit_skb() events, with skb pointers.&lt;/li&gt;
&lt;li&gt;Read /proc/net/tcp, and cache socket details by skb.&lt;/li&gt;
&lt;li&gt;Assume retransmits happen for long-lived sessions (&amp;gt; 1 second), and the session details would still have been in /proc/net/tcp when it was read.&lt;/li&gt;
&lt;li&gt;Parse the kernel buffer of tcp_retransmit_skb() events and print retransmit events with session details from the /proc/net/tcp data we read earlier.&lt;/li&gt;
&lt;li&gt;Goto 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On an earlier version, I read /proc/net/tcp synchronously when retransmits occurred, but on production systems with frequent retransmits and tens of thousands of open connections (making for a very large /proc/net/tcp), the CPU overhead of that approach was too high. The approach above only reads /proc/net/tcp once per second.&lt;/p&gt;

&lt;p&gt;So, it was a gift to have socket details in /proc/net/tcp, and not need to dig them out using ftrace. That would be possible, but the script would become much more brittle without kernel debuginfo, as there would then be several assumptions about registers and struct offsets, rather than just skb being in %di. Without /proc/net/tcp, I&#39;d only really attempt this &lt;em&gt;with&lt;/em&gt; kernel debuginfo, where I could make it reasonbly reliable.&lt;/p&gt;

&lt;p&gt;So far tcpretrans has proved quite useful to quickly get some details on TCP retransmits: not just source and destionation addresses and ports, but kernel state and stack traces.&lt;/p&gt;


</description>
        <pubDate>Sat, 06 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-06-linux-ftrace-tcp-retransmit-tracing.html-85fa9c336.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-06-linux-ftrace-tcp-retransmit-tracing.html-85fa9c336.html</guid>
        
        
        <category>brendangregg</category>
        
      </item>
    
      <item>
        <title>用 Spark 处理数据导入 Elasticsearch</title>
        <description>

  
  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;Logstash 说了这么多。其实运用 Kibana 和 Elasticsearch 不一定需要 logstash，其他各种工具导入的数据都可以。今天就演示一个特别的~用 Spark 来处理导入数据。&lt;/p&gt;
&lt;p&gt;首先分别下载 spark 和 elasticsearch-hadoop 的软件包。注意 elasticsearch-hadoop 从最新的 2.1 版开始才带有 spark 支持，所以要下新版：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://d3kbcqa49mib13.cloudfront.net/spark-1.0.2-bin-cdh4.tgz
wget http://download.elasticsearch.org/hadoop/elasticsearch-hadoop-2.1.0.Beta1.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分别解压开后，运行 spark 交互命令行 &lt;code&gt;ADD_JARS=../elasticsearch-hadoop-2.1.0.Beta1/dist/elasticsearch-spark_2.10-2.1.0.Beta1.jar ./bin/spark-shell&lt;/code&gt; 就可以逐行输入 scala 语句测试了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意 elasticsearch 不支持 1.6 版本的 java，所以在 MacBook 上还设置了一下 &lt;code&gt;JAVA_HOME=&quot;/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home&quot;&lt;/code&gt; 启用自己从 Oracle 下载安装的 1.7 版本的 Java。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;section&quot;&gt;基础示例&lt;/h1&gt;
&lt;p&gt;首先来个最简单的测试，可以展示写入 ES 的用法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.SparkConf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.elasticsearch.spark._&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 更多 ES 设置，见&amp;lt;http://www.elasticsearch.org/guide/en/elasticsearch/hadoop/2.1.Beta/configuration.html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SparkConf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es.index.auto.create&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es.nodes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 在spark-shell下默认已建立&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// import org.apache.spark.SparkContext    &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// import org.apache.spark.SparkContext._&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// val sc = new SparkContext(conf)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OTP&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Otopeni&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SFO&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;San Fran&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeRDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveToEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark/docs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就 OK 了。尝试访问一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl &#39;127.0.0.1:9200/spark/docs/_search?q=*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回结果如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;took&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timed_out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_shards&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;total&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;successful&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;total&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;max_score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BwNJi8l2TmSRTp42GhDmww&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&quot;_source&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7f7ar-9kSb6WEiLS8ROUCg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&quot;_source&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;OTP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Otopeni&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;SFO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;San Fran&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}]}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;section-1&quot;&gt;文件处理&lt;/h1&gt;
&lt;p&gt;下一步，我们看如何读取文件和截取字段。scala 也提供了正则和捕获的方法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/var/log/system.log&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;(\w{3}\s+\d{1,2} \d{2}:\d{2}:\d{2}) (\S+) (\S+)\[(\d+)\]: (.+)&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;program&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveToEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark/docs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里示例写了两个 &lt;code&gt;case&lt;/code&gt; ，因为 Mac 上的 “system.log” 不知道用的什么 syslog 协议，有些在 &lt;code&gt;[pid]&lt;/code&gt; 后面居然还有一个 &lt;code&gt;(***)&lt;/code&gt; 才是 &lt;code&gt;:&lt;/code&gt;。正好就可以用这个来示例如果匹配失败的情况如何处理。不加这个默认 &lt;code&gt;case&lt;/code&gt; 的话，匹配失败的就直接报错不会存进 &lt;code&gt;entries&lt;/code&gt; 对象了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;code&gt;.textFile&lt;/code&gt; 不是 scala 标准的读取文件函数，而是 sparkContext 对象的方法，返回的是 RDD 对象(包括后面的 &lt;code&gt;.map&lt;/code&gt; 返回的也是新的 RDD 对象)。所以后面就不用再 &lt;code&gt;.makeRDD&lt;/code&gt; 了。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;section-2&quot;&gt;网络数据&lt;/h1&gt;
&lt;p&gt;Spark 还有 Spark streaming 子项目，用于从其他网络协议读取数据，比如 flume，kafka，zeromq 等。官网上有一个配合 &lt;code&gt;nc -l&lt;/code&gt; 命令的示例程序。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.spark.streaming._&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamingContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;socketTextStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有时间我会继续尝试 Spark 其他功能。&lt;/p&gt;
    &lt;hr&gt;
    
    &lt;hr&gt;
  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;
  &lt;/div&gt;

</description>
        <pubDate>Thu, 04 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-04-spark-to-elasticsearch-b436fd476.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-04-spark-to-elasticsearch-b436fd476.html</guid>
        
        
        <category>chenlinux</category>
        
      </item>
    
      <item>
        <title>MogileFS 根据不同网段使用不同 IP</title>
        <description>

							&lt;p&gt;前些日子使用 Lua 写了一个, 给请求的外网转换成内网 IP 的 MogileFS 模块, 后来发现自己傻了…其实 MogileFS 也有这个功能. 前二天调 MogileFS 的时候, 发现 HOST 的配置中直接有这个选项.&lt;/p&gt;
&lt;pre class=&quot;brush:perl;first-line:1;pad-line-numbers:true;highlight:null;collapse:false;&quot;&gt;
# mogadm host add

ERROR: Missing argument &#39;hostname&#39;

Help for &#39;host-add&#39; command:

  mogadm host add &amp;lt;hostname&amp;gt; [opts]                  Add a host to MogileFS.

      &amp;lt;hostname&amp;gt;           Hostname of machine
      --altip=s            Alternate IP that is machine is reachable from
      --altmask=s          Netmask which, when matches client, uses alt IP
      --getport=i          Alternate HTTP port serving readonly traffic
      --ip=s               IP address of machine.
      --port=i             HTTP port of mogstored
      --status=s           One of {alive,down}.  Default &#39;down&#39;.

&lt;/pre&gt;
&lt;p&gt;
上面的选项, 正常我们只使用 –ip 来配置复制和工作所使用的 IP . 但我们还可以配置一个 –altip , 这个在请求过来的 –altmask 的网络的查询请求时(不同网段的 MogileFS 客户端, 如 Nginx 中的 MogileFS 模块), 会使用这个 IP .&lt;/p&gt;
&lt;p&gt;这个非常实现, 比如实现内网复制, 多机房的数据同步. 就非常需要这个功能, 不然本地同步和复制数据都是使用的公网. 配置很简单&lt;/p&gt;
&lt;pre class=&quot;brush:perl;first-line:1;pad-line-numbers:true;highlight:null;collapse:false;&quot;&gt;
# mogadm host modify CT-ZH-1CV1172 --ip=ip1 --altip=ip2 --getport=7500 --altmask=使用altip的来源网段

&lt;/pre&gt;

			&lt;!--[syntaxhighlighter]--&gt;
			&lt;!--代码高亮，请勿编辑--&gt;
			

			&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://www.php-oa.com/wp-content/plugins/ck-and-syntaxhighlighter/syntaxhighlighter/styles/shCoreDefault.css&quot;&gt;
			&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://www.php-oa.com/wp-content/plugins/ck-and-syntaxhighlighter/syntaxhighlighter/styles/shThemeDefault.css&quot;&gt;
			
			&lt;!--[/syntaxhighlighter]--&gt;						

</description>
        <pubDate>Tue, 02 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-09-02-mogilefs-%25e6%25a0%25b9%25e6%258d%25ae%25e4%25b8%258d%25e5%2590%258c%25e7%25bd%2591%25e6%25ae%25b5%25e4%25bd%25bf%25e7%2594%25a8%25e4%25b8%258d%25e5%2590%258c-ip.html-dce2d9923.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-09-02-mogilefs-%25e6%25a0%25b9%25e6%258d%25ae%25e4%25b8%258d%25e5%2590%258c%25e7%25bd%2591%25e6%25ae%25b5%25e4%25bd%25bf%25e7%2594%25a8%25e4%25b8%258d%25e5%2590%258c-ip.html-dce2d9923.html</guid>
        
        
        <category>php-oa</category>
        
      </item>
    
      <item>
        <title>ftrace: The Hidden Light Switch</title>
        <description>

&lt;p&gt;If you&#39;ve been following my previous posts about Linux ftrace, you&#39;ll want to read my recent &lt;a href=&quot;http://lwn.net/&quot;&gt;lwn.net&lt;/a&gt; article: &lt;a href=&quot;http://lwn.net/Articles/608497/&quot;&gt;Ftrace: The Hidden Light Switch&lt;/a&gt;. This showed how I used ftrace at Netflix to confirm whether a kernel tunable change took affect immediately, and how it was set. It was also a tour of some ftrace capabilities. &lt;/p&gt;

&lt;p&gt;ftrace is particularly useful for us since it is already available in all our Linux systems, and has been for years. The biggest problem is that it&#39;s not very well known. I&#39;ve hopefully helped raise awareness with this article, and I also included ftrace in my &lt;a href=&quot;http://www.brendangregg.com/blog/2014-08-23/linux-perf-tools-linuxcon-na-2014.html&quot;&gt;Linux Performance Tools&lt;/a&gt; talk at LinuxCon.&lt;/p&gt;

&lt;p&gt;I mentioned the following commands, but didn&#39;t include screenshots. Here I&#39;m checking if the deadline or noop I/O schedulers are active, based on counting the function calls:&lt;/p&gt;

&lt;pre&gt;
# &lt;b&gt;./funccount -i 1 &#39;deadline*&#39;&lt;/b&gt;
Tracing &quot;deadline*&quot;... Ctrl-C to end.

FUNC                              COUNT
deadline_add_request                178
deadline_merge                      178
deadline_remove_request.isra.4      178
deadline_dispatch_requests          712

FUNC                              COUNT
deadline_add_request                698
deadline_merge                      698
deadline_remove_request.isra.4      698
deadline_dispatch_requests         2792
^C
FUNC                              COUNT
deadline_add_request                316
deadline_merge                      316
deadline_remove_request.isra.4      316
deadline_dispatch_requests         1264

Ending tracing...
# &lt;b&gt;./funccount -i 1 &#39;noop*&#39;&lt;/b&gt;
Tracing &quot;noop*&quot;... Ctrl-C to end.

FUNC                              COUNT

FUNC                              COUNT
^C
FUNC                              COUNT

Ending tracing...
&lt;/pre&gt;

&lt;p&gt;So, deadline is active right now...&lt;/p&gt;

&lt;p&gt;These and the other ftrace capabilities have been invaluable so far, which we&#39;ve been using via my &lt;a href=&quot;https://github.com/brendangregg/perf-tools&quot;&gt;perf-tools&lt;/a&gt; wrappers. If you want to do more with ftrace, see &lt;a href=&quot;http://git.kernel.org/cgit/linux/kernel/git/rostedt/trace-cmd.git&quot;&gt;trace-cmd&lt;/a&gt; by Steven Rostedt, which is a more powerful multi-tool.&lt;/p&gt;

&lt;p&gt;ftrace can&#39;t yet do everything that I want from a kernel tracer. For example, I can&#39;t yet do custom in-kernel aggregations. But it can do a lot more than I previously thought possible.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://www.beginningwithi.com/&quot;&gt;Deirdré Straughan&lt;/a&gt; and Jonathan Corbet for editing help with the article. For more about ftrace, see the resources I linked to at the end (many also on lwn.net), and my previous posts on &lt;a href=&quot;http://www.brendangregg.com/linuxperf.html#Documentation&quot;&gt;ftrace&lt;/a&gt;.&lt;/p&gt;


</description>
        <pubDate>Sat, 30 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-30-ftrace-the-hidden-light-switch.html-2c60798c9.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-30-ftrace-the-hidden-light-switch.html-2c60798c9.html</guid>
        
        
        <category>brendangregg</category>
        
      </item>
    
      <item>
        <title>山寨一个 Splunk 的 source 上下文查看功能</title>
        <description>

  
  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;跟很多朋友在聊 elk stack 的时候，都会不知不觉的开始跟 Splunk 做对比。最常见的两个抱怨就是：Splunk 的搜索构建语法 比 Kibana 方便，以及 Splunk 搜索出来的消息可以通过点击 &lt;code&gt;Source&lt;/code&gt; 按钮查看其原始日志中的前后几条日志。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/chenlinux.com/f1599f34ddb906aca6c8d97c143a66b3.jpg&quot; alt=&quot;splunk source context&quot;&gt;&lt;/p&gt;
&lt;p&gt;平心而论，这个上下文查找的功能确实在排错过程中非常有用。但是在 elk 里却不那么容易实现，原因是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;elasticsearch 是一个分布式项目，其索引的 &lt;code&gt;_id&lt;/code&gt; 默认使用的是 UUID 方式生成的随机字符串，你没法根据 UUID 来判断数据的先后。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LogStash::Outputs::Elasticsearch&lt;/code&gt; 提供了让你指定 &lt;code&gt;_id&lt;/code&gt; 内容的选项，但是在集群环境下，你很难自己搞定一个全局自增 ID。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;相反，虽然我不知道 splunk 的数据存储的内部实现，但是就他昂贵的报价来说，基本只见过单机案例。就单机而言，自增 id 太轻松了&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所以，从原理上来说，就很难实现一个通用的 elk 版上下文查看功能。&lt;/p&gt;
&lt;p&gt;不过我们缩小一下使用场景，却未必不能自己山寨一个对自己可用的办法来。&lt;/p&gt;
&lt;p&gt;假设我们一个最常见的场景，就是从各 web 服务器上收集不同日志到中心。那么这时候，通过 &lt;code&gt;%{host}&lt;/code&gt; 和 &lt;code&gt;%{path}&lt;/code&gt; 的 “AND” 过滤，我们就可以把范围缩小到一个单一的文件内容里。所以，我们只需要能够搞定这个文件的自增 id 就够了！&lt;/p&gt;
&lt;h2 id=&quot;logstashconf-&quot;&gt;logstash.conf 示例&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/*.log&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@incr={}&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;key = event[&#39;host&#39;]+event[&#39;path&#39;]&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                 if @incr.has_key?(key)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                     @incr[key] += 1&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                 else&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                     @incr[key] = 1 &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                 end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                 event[&#39;lineno&#39;] = @incr[key]&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;curl-&quot;&gt;上下文查询 curl 示例&lt;/h2&gt;
&lt;p&gt;使用上面的配置运行起来 logstash 之后，假设我们现在搜到一条 syslog 日志，其 &lt;code&gt;lineno&lt;/code&gt; 是 20，那么查看它的前后 5 条记录的 curl 命令就是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;http://localhost:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9200&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/logstash&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-2014.08&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/_search?pretty=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;lineno&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;gt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;lte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;host.raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raochenlindeMacBook-Air.local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;path.raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/log/system.log&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lineno&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;asc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的结果是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;took&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;timed_out&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;_shards&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;total&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;successful&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;failed&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;hits&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;total&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;max_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;hits&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ILkv4oZOQRGXkH5nxjPT6Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:34:44 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391727104]: Service [sproxy] accepted connection from 127.0.0.1:52673&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;frRzVZUDQr-dkRog9LEypQ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:34:44 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391727104]: s_connect: connected 50.116.12.155:65080&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fQ50VrbuSfy6AmhNOaHpFg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:34:44 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391727104]: Service [sproxy] connected remote server from 192.168.0.102:52674&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bpza8x6gSQi3OFRfAz3vPA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:35:23 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391882752]: Service [sproxy] accepted connection from 127.0.0.1:52710&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I7SQ4o-aSr--em1WXO0y0A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:35:24 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391882752]: s_connect: connected 50.116.12.155:65080&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POLq7XA_QVe6E5f9cP9V-w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:35:24 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391882752]: Service [sproxy] connected remote server from 192.168.0.102:52711&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sXCLVr7URu-2uKhcOP3wjA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:35:35 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391882752]: Connection closed: 0 byte(s) sent to SSL, 0 byte(s) sent to socket&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;3wxxElNuS7OgyvjSm8CQfg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:36:25 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391571456]: Connection closed: 2825 byte(s) sent to SSL, 2407 byte(s) sent to socket&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xdsiB1cmRpagWiMxtAjMzQ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:36:52 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391493632]: Connection closed: 1109 byte(s) sent to SSL, 583 byte(s) sent to socket&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_index&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash-2014.08.29&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mLScPMbwTzSPMz9WqOPXlw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;_score&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;fields&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aug 29 23:36:52 raochenlindeMacBook-Air.local stunnel[304]: LOG5[4391571456]: Service [sproxy] accepted connection from 127.0.0.1:52719&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;sort&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没错，这就是我们想要的结果了！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里两个要点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自增 id 为啥不用行号，因为 &lt;code&gt;LogStash::Inputs::File&lt;/code&gt; 实现是通过 &lt;code&gt;File.seek&lt;/code&gt; 和 &lt;code&gt;File.sysread(16394)&lt;/code&gt; 完成的，这种时候 &lt;code&gt;File.lineno&lt;/code&gt; 永远都是 0。获取真的行号很困难。&lt;/li&gt;
  &lt;li&gt;自增 id 为什么不指定成 &lt;code&gt;_id&lt;/code&gt; 而是另外存字段，因为 &lt;code&gt;_id&lt;/code&gt; 是特殊字段，要求在一个 &lt;code&gt;_index/_type&lt;/code&gt; 里是唯一的。我们对 logstash 的使用一般情况下都是多个 host 内容存在同一个 &lt;code&gt;_index/_type&lt;/code&gt; 下，会发生重复的(重复写入 &lt;code&gt;_id&lt;/code&gt; 相同的数据等同于 &lt;code&gt;update&lt;/code&gt; 操作)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;section&quot;&gt;延伸&lt;/h2&gt;
&lt;p&gt;数据如何通过 kibana 展示，则是另外一个层面的内容。有时间可能我会也做一下。&lt;/p&gt;
&lt;p&gt;非 input/file 方式的其他场景，只要你能通过 event 中其他字段确定出来源唯一，都可以采用这个方式做。&lt;/p&gt;
    &lt;hr&gt;
    
    &lt;hr&gt;
  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;
  &lt;/div&gt;

</description>
        <pubDate>Fri, 29 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-29-implement-source-context-function-for-elk-3c2a6509b.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-29-implement-source-context-function-for-elk-3c2a6509b.html</guid>
        
        
        <category>chenlinux</category>
        
      </item>
    
      <item>
        <title>Optionals Case Study: valuesForKeys</title>
        <description>

						
						

						&lt;p&gt;This post explores how optionals help preserve strong type safety within Swift. We’re going to create a Swift version of an Objective-C API. Swift doesn’t really need this API, but it makes for a fun example.&lt;/p&gt;
&lt;p&gt;In Objective-C, &lt;span class=&quot;keyword&quot;&gt;NSDictionary&lt;/span&gt; has a method &lt;span class=&quot;keyword&quot;&gt;-objectsForKeys:notFoundMarker:&lt;/span&gt; that takes an &lt;span class=&quot;keyword&quot;&gt;NSArray&lt;/span&gt; of keys, and returns an &lt;span class=&quot;keyword&quot;&gt;NSArray&lt;/span&gt; of corresponding values. From the documentation: “the &lt;em&gt;N&lt;/em&gt;-th object in the returned array corresponds to the &lt;em&gt;N&lt;/em&gt;-th key in [the input parameter] keys.” What if the third key isn’t actually in the dictionary? That’s where the &lt;span class=&quot;keyword&quot;&gt;notFoundMarker&lt;/span&gt; parameter comes in. The third element in the array will be this marker object rather than a value from the dictionary. The Foundation framework even provides a class for this case if you don’t have another to use: &lt;span class=&quot;keyword&quot;&gt;NSNull&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In Swift, the &lt;span class=&quot;keyword&quot;&gt;Dictionary&lt;/span&gt; class doesn’t have an &lt;span class=&quot;keyword&quot;&gt;objectsForKeys&lt;/span&gt; equivalent. For this exercise, we’re going to add one — as &lt;span class=&quot;keyword&quot;&gt;valuesForKeys&lt;/span&gt; in keeping with the common use of ‘value’ in Swift — using an extension:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dictionary&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; valuesForKeys(keys: [&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;], notFoundMarker: &lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;) -&amp;gt; [&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;] {
		&lt;span class=&quot;comment&quot;&gt;// To be implemented&lt;/span&gt;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where our new implementation in Swift will differ from Objective-C. In Swift, the stronger typing restricts the resulting array to contain only a single type of element — we can’t put &lt;span class=&quot;keyword&quot;&gt;NSNull&lt;/span&gt; in an array of strings. However, Swift gives an even better option: we can return an &lt;em&gt;array of optionals&lt;/em&gt;. All our values get wrapped in optionals, and instead of &lt;span class=&quot;keyword&quot;&gt;NSNull&lt;/span&gt;, we just use &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dictionary&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; valuesForKeys(keys: [&lt;span class=&quot;title&quot;&gt;Key&lt;/span&gt;]) -&amp;gt; [&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;?] {
		&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; result = [Value?]()
		result.reserve(keys.count)
		&lt;span class=&quot;key&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;key&quot;&gt;in&lt;/span&gt; keys {
			result.&lt;span class=&quot;method&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;method&quot;&gt;self&lt;/span&gt;[key])
		}
		&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; result
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: Some of you may have guessed why a Swift &lt;span class=&quot;keyword&quot;&gt;Dictionary&lt;/span&gt; doesn’t need this API, and already imagined something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dictionary&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; valuesForKeys(keys: [&lt;span class=&quot;title&quot;&gt;Key&lt;/span&gt;]) -&amp;gt; [&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;?] {
		&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; keys.&lt;span class=&quot;method&quot;&gt;map&lt;/span&gt; { &lt;span class=&quot;method&quot;&gt;self&lt;/span&gt;[$0] }
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has the exact same effect as the imperative version above, but all of the boilerplate has been wrapped up in the call to &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;. This is great example why Swift types often have a small API surface area, because it’s so easy to just call &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt; directly.&lt;/p&gt;
&lt;p&gt;Now we can try out some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;let&lt;/span&gt; dict = [&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Amir&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Bertha&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Ching&quot;&lt;/span&gt;]

&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;])
&lt;span class=&quot;comment&quot;&gt;// [Optional(&quot;Amir&quot;), Optional(&quot;Ching&quot;)]&lt;/span&gt;

&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;])
&lt;span class=&quot;comment&quot;&gt;// [Optional(&quot;Bertha&quot;), nil]&lt;/span&gt;

&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([])
&lt;span class=&quot;comment&quot;&gt;// []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Nested Optionals&lt;/h3&gt;
&lt;p&gt;Now, what if we asked for the &lt;span class=&quot;keyword&quot;&gt;last&lt;/span&gt; element of each result?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;]).&lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Optional(Optional(&quot;Ching&quot;))&lt;/span&gt;

&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;]).&lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Optional(nil)&lt;/span&gt;

&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([]).&lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s strange — we have two levels of &lt;span class=&quot;keyword&quot;&gt;Optional&lt;/span&gt; in the first case, and &lt;span class=&quot;keyword&quot;&gt;Optional(nil)&lt;/span&gt; in the second case. What’s going on?&lt;/p&gt;
&lt;p&gt;Remember the declaration of the &lt;span class=&quot;keyword&quot;&gt;last&lt;/span&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; last: &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;? { get }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This says that the &lt;span class=&quot;keyword&quot;&gt;last&lt;/span&gt; property’s type is an &lt;span class=&quot;keyword&quot;&gt;Optional&lt;/span&gt; version of the array’s element type. In &lt;em&gt;this&lt;/em&gt; case, the element type is also optional (&lt;span class=&quot;keyword&quot;&gt;String?&lt;/span&gt;). So we end up with &lt;span class=&quot;keyword&quot;&gt;String??&lt;/span&gt;, a doubly-nested optional type.&lt;/p&gt;
&lt;p&gt;So what does &lt;span class=&quot;keyword&quot;&gt;Optional(nil)&lt;/span&gt; mean?&lt;/p&gt;
&lt;p&gt;Recall that in Objective-C we were going to use &lt;span class=&quot;keyword&quot;&gt;NSNull&lt;/span&gt; as a placeholder. The Objective-C version of these three calls looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt; valuesForKeys:@[@&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;] notFoundMarker:[NSNull null]].lastObject
&lt;span class=&quot;comment&quot;&gt;// @&quot;Ching&quot;&lt;/span&gt;

[&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt; valuesForKeys:@[@&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;] notFoundMarker:[NSNull null]].lastObject
&lt;span class=&quot;comment&quot;&gt;// NSNull&lt;/span&gt;

[&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt; valuesForKeys:@[] notFoundMarker:[NSNull null]].lastObject
&lt;span class=&quot;comment&quot;&gt;// nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In both the Swift and Objective-C cases, a return value of &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt; means “the array is empty, therefore there’s no last element.” The return value of &lt;span class=&quot;keyword&quot;&gt;Optional(nil)&lt;/span&gt; (or in Objective-C &lt;span class=&quot;keyword&quot;&gt;NSNull&lt;/span&gt;) means “the last element of this array exists, but it represents an absence.” Objective-C has to rely on a placeholder object to do this, but Swift can represent it in the type system.&lt;/p&gt;
&lt;h3&gt;Providing a Default&lt;/h3&gt;
&lt;p&gt;To wrap up, what if you &lt;em&gt;did&lt;/em&gt; want to provide a default value for anything that wasn’t in the dictionary? Well, that’s easy enough.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dictionary&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; valuesForKeys(keys: [&lt;span class=&quot;title&quot;&gt;Key&lt;/span&gt;], notFoundMarker: &lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;) -&amp;gt; [&lt;span class=&quot;title&quot;&gt;Value&lt;/span&gt;] {
		&lt;span class=&quot;key&quot;&gt;return self&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;(keys).&lt;span class=&quot;method&quot;&gt;map&lt;/span&gt; { $0 &lt;span class=&quot;method&quot;&gt;??&lt;/span&gt; notFoundMarker }
	}
}


&lt;span class=&quot;pointer&quot;&gt;dict&lt;/span&gt;.&lt;span class=&quot;enum&quot;&gt;valuesForKeys&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;], notFoundMarker: &lt;span class=&quot;string&quot;&gt;&quot;Anonymous&quot;&lt;/span&gt;)
&lt;span class=&quot;comment&quot;&gt;// [&quot;Bertha&quot;, &quot;Anonymous&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While Objective-C has to rely on a placeholder object to do this, Swift can represent it in the type system, and provides rich syntactic support for handling optional results.&lt;/p&gt;

						
												
											

</description>
        <pubDate>Wed, 27 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-27--id=12-253f68f80.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-27--id=12-253f68f80.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>实现键值对存储（一）：什么是键值对存储，为什么要实现它</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;在本文中，我将会以键值对是什么的一个简短描述开始。然后我将解释本项目之后的一些理由，最后我将说明我打算实现的键值对存储的主要目标。这里是本文中将会包含内容的列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;键值对存储的概述&lt;/li&gt;
&lt;li&gt;键值对存储 vs 关系型数据库&lt;/li&gt;
&lt;li&gt;为什么要实现键值对存储&lt;/li&gt;
&lt;li&gt;计划&lt;/li&gt;
&lt;li&gt;引用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 align=&quot;left&quot;&gt;1. 键值对存储的概述&lt;b&gt;&lt;/b&gt;
&lt;/h1&gt;
&lt;p&gt;基于很多文章已经有了很多详细的介绍，本节只是对于键值对存储的一个简短介绍。我已经选择了几篇放在本文底部的引用一节中。&lt;/p&gt;
&lt;p&gt;键值对存储是数据库最简单的组织形式。基本上所有的编程语言都带有应用在内存中的键值对存储。C++STL的映射容器（map container）和Java的HashMap以及Python的字典类型都是键值对存储。键值对存储通常都有如下接口：&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Get( key ):&lt;/b&gt; 获取之前存储于某标示符“key”之下的一些数据，或者“key”下没有数据时报错。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Set( key, value ):&lt;/b&gt; 将“value”存储到存储空间中某标示符“key”下，使得我们可以通过调用相同的“key”来访问它。如果“key”下已经有了一些数据，旧的数据将被替换。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Delete( key ):&lt;/b&gt;  删除存储在“key”下的数据。&lt;/p&gt;
&lt;p&gt;大部分低层实现都是使用哈希表或者某种自平衡树（例如B-树或者红黑树）。有时候数据太大而不装不进内存，或者必须维持数据谨防系统因为未知原因而崩溃。在这些情况下，就必须使用到文件系统。&lt;/p&gt;
&lt;p&gt;键值对存储是NoSQL运动的一部分，NoSQL将所有不使用基于关系型数据库概念的数据库系统组合在一起。&lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot;&gt;维基百科上的NoSQL词条&lt;/a&gt;很好的总结了这些数据库的特征。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不使用SQL查询语言&lt;/li&gt;
&lt;li&gt;可不全面支持&lt;a href=&quot;http://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;（原子性、一致性、隔离性、持久性）。&lt;/li&gt;
&lt;li&gt;可提供分布式、容错强的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;2. 键值对存储和关系型数据库&lt;/h1&gt;
&lt;p&gt;不像关系型数据库，键值对存储不需要了解值中的数据，也没有像MySQL或者PostgreSQL中那样的任何结构。这同时表示像SQL那样用WHERE语句或者通过任何形式的过滤来请求数据中的一部分是无法做到的。如果你不知道去哪找，你必须遍历所有的键，获取它们对应的值，应用某种你需要的过滤，然后保留你想要的东西。这将会需要大量的运算，也即表示只有当键已知的时候才能体现出最佳性能，否则键值对存储将无法胜任（注意：一些键值对存储能够存储结构化的数据并有字段索引）。&lt;/p&gt;
&lt;p&gt;因此，即使键值对存储在访问速度上经常比关系型数据库系统性能要好数个数量级，但对键已知的需求也限制着其应用。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 align=&quot;left&quot;&gt;3. 为什么要实现键值对存储&lt;b&gt;&lt;/b&gt;
&lt;/h1&gt;
&lt;p&gt;我开始这个项目主要是作为充电的一种方式，学习和补充一些核心后端基本原理知识。读书和维基上的文章很无聊并且没有练习，因此我认为着手开始做并且实际写一写代码会更好。我要找的是一个可以让我复习如下内容的项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++编程语言&lt;/li&gt;
&lt;li&gt;面向对象设计&lt;/li&gt;
&lt;li&gt;算法和数据结构&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;多进程或或多线程的并发管理&lt;/li&gt;
&lt;li&gt;服务器/客户端模式的网络&lt;/li&gt;
&lt;li&gt;磁盘访问的I/O问题和文件系统的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个使用文件系统作为永久存储，且提供网络接口的键值对存储将会包含上面列出的全部范围的内容。这个项目刚好能够处理后端工程的各个领域。但是让我们面对现实。市面上已经有了大量的键值对存储，其中一些是由很聪明的人实现的，并且已经在大公司的生产环境使用了。这包括Redis, MongoDB, memcached, BerkeleyDB, Kyoto Cabinet 和LevelDB。&lt;/p&gt;
&lt;p&gt;除此之外，近期出现了关于键值对存储的潮流。好像每人都有一个并且想给大家看自己的键值对存储系统有多么出色和快速。这个问题在&lt;a href=&quot;http://randomfoo.net/2009/04/20/some-notes-on-distributed-key-stores&quot;&gt;Leonard Lin博客中关于键值对存储的文章&lt;/a&gt;中描述了。这些项目中大多数在那时还不成熟且不能应用于生产环境，但人们仍然想展示出来。在博客文章或会议幻灯片中经常可以看到对一些晦涩键值对存储系统性能的比较。这些图表基本上毫无意义，并且只是在自己的硬件上用自己的数据和应用进行的孤立测试，可以告诉你哪一种键值对存储最适用于解决你的问题。这里是性能所依赖的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;使用的文件系统&lt;/li&gt;
&lt;li&gt;实际应用和具体哪些键会被访问（&lt;a href=&quot;http://en.wikipedia.org/wiki/Locality_of_reference&quot;&gt;引用的局部性&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;数据集，特别是键和值的长度，以及使用哈希表的时候键碰撞的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，编写一个键值对存储系统并有一定的影响力是比较难的，因为其很有可能因为其它已存在的更好的键值对存储系统的存在而被忽视，或者被简单的淹没在半生不熟的业余项目中而没人关心。&lt;/p&gt;
&lt;p&gt;为了差异性，这个项目不能像其他人做的那样为了速度，而必须瞄准于填补现有解决方案间的空隙。这里是我发现的能够让键值对项目脱颖而出的几个方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适应于某种特定数据类型（例如：图片，地理数据等）&lt;/li&gt;
&lt;li&gt;适应于某种特定操作（例如读取性能特别好或者写入性能特别好等）&lt;/li&gt;
&lt;li&gt;适应于某种特定问题 （例如：自动参数调节，很多键值对存储都有很多选项，而找到一个最好的参数设置有时候很棘手）&lt;/li&gt;
&lt;li&gt;提供更多数据访问选项。以LevelDB为例，数据可以向前或者向后访问，有迭代器，是按照键排序的。并不是所有的键值对存储都能做到这样。&lt;/li&gt;
&lt;li&gt;使自己的实现更平易近人：现在，很少有键值对存储系统有完全的代码。如果你需要快速搭建一个项目，而你必须为其自定义一个键值对存储。即便不是一个广为人知的项目，有代码的解决方案看起来确实平易近人并且会作为选项之一。实际上理解代码并相信这个解决方案会弥补这些不足。&lt;/li&gt;
&lt;li&gt; 明确应用。这儿有一个实际问题的例子：很多网络爬虫框架（网络蜘蛛）有一个粗劣的接口来管理他们需要爬的URL，这经常使得客户使用键值对存储来实现逻辑。所有的网络爬虫框架都能因一个统一的URL优化的键值对存储而受益。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;4. 计划&lt;/h1&gt;
&lt;p&gt;项目的目标是用易于理解的C++代码开发一个轻量级键值对存储。事实上，我打算在本项目中遵从&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml&quot;&gt;Google C++ 代码风格导引&lt;/a&gt;。我将会使用哈希表作为底层数据结构，数据将会存储在硬盘上，同时将会实现一个网络接口。我不会项目进度而匆忙完成，而是要在设计和实现时简洁和清晰。我同样会尽我能力最小化硬盘上数据库文件的空间占用。&lt;/p&gt;
&lt;p&gt;我不想重新发明轮子，所以我会从查看别的C或者C++的键值对存储项目开始，然后从中选取比较出色的。我会逐渐学习他们的结构和代码，从中获取启示。后端工程是我的核心技能之一，我已经有了这个项目所需的大部分知识，但我知道我还要学很多新东西，这使其对我来说更加有意思。我同样乐于记录下其中的全部东西。以前我很喜欢逛核心技术博客，例如&lt;a href=&quot;http://www.alexonlinux.com/&quot; target=&quot;_blank&quot;&gt;Alexander Sandler&lt;/a&gt;和&lt;a href=&quot;http://duartes.org/gustavo/blog/best-of&quot; target=&quot;_blank&quot;&gt;Gustavo Duarte&lt;/a&gt;，我也想贡献出一些有用的，尽可能好的东西。&lt;/p&gt;
&lt;p&gt;我的研究结果和键值对存储的一些工作将在这个文章系列中记录。不要试图用文章的日期来推测键值对存储实现的时间：文章可能和实际研究或者做的事之间有相当大的延迟。&lt;/p&gt;
&lt;p&gt;在第二部分，我将搜索顶级的键值对存储项目并解释为什么我选择了其中的部分作为参考，而不选另一些。其他的文章你可以参考本系列的&lt;a href=&quot;http://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/&quot;&gt;目录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你可以在下边的“引用”一节中找到一些文章和书籍章节来学习更多关于键值对存储的知识。在阅读第二节之前，我强烈建议至少读一下&lt;a href=&quot;http://www.aosabook.org/en/nosql.html&quot; target=&quot;_blank&quot;&gt;The NoSQL Ecosystem&lt;/a&gt;和 &lt;a href=&quot;http://blog.marc-seeger.de/2009/09/21/key-value-stores-a-practical-overview/&quot; target=&quot;_blank&quot;&gt;Key Value Stores: A Practical Overview&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 align=&quot;left&quot;&gt;5. 参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.aosabook.org/en/nosql.html&quot; target=&quot;_blank&quot;&gt;The NoSQL Ecosystem&lt;/a&gt;, from the book “Architecture of Open Source Applications, Volume 1″&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://horicky.blogspot.com.es/2009/11/nosql-patterns.html&quot; target=&quot;_blank&quot;&gt;NoSQL Patterns&lt;/a&gt;, by Ricky Ho&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://nosql-database.org/&quot; target=&quot;_blank&quot;&gt;NoSQL Databases&lt;/a&gt;, referencing all the NoSQL databases that matter at the moment&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/&quot; target=&quot;_blank&quot;&gt;NoSQL Data Modeling Techniques&lt;/a&gt;, by Ilya Katsov&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.networkworld.com/cgi-bin/mailto/x.cgi?pagetosend=/news/tech/2012/102212-nosql-263595.html&quot; target=&quot;_blank&quot;&gt;NoSQL databases benchmark: Cassandra, HBase, MongoDB, Riak&lt;/a&gt;, and the discussion on &lt;a href=&quot;http://news.ycombinator.com/item?id=4733212&quot; target=&quot;_blank&quot;&gt;Hacker News&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot; target=&quot;_blank&quot;&gt;Wikipedia article on NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/ACID&quot; target=&quot;_blank&quot;&gt;Wikipedia article on the ACID paradigm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://blog.marc-seeger.de/2009/09/21/key-value-stores-a-practical-overview/&quot; target=&quot;_blank&quot;&gt;Key Value Stores: A Practical Overview&lt;/a&gt;, by Marc Seeger&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://randomfoo.net/2009/04/20/some-notes-on-distributed-key-stores&quot; target=&quot;_blank&quot;&gt;Some Notes on Distributed Key Stores&lt;/a&gt;, by Leonard Lin&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Tue, 26 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-26-75844-f42bbf63c.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-26-75844-f42bbf63c.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>实现一个键值对存储：目录</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;2014年7月8日更新：这个系列的文章仍在继续，我正在实现这个键值对存储并将在其差不多完成的时候写一篇文章。这些文章每一篇都花了我很长时间来写。为了在完成的时候获得更新通知，你可以在博客右上角订阅。&lt;/p&gt;
&lt;p&gt;这篇文章是我今天开始的系列文章“实现一个键值对存储”（IKVS）的主条目。本文旨在以内容列表的形式总结系列中所有文章，可能在晚些时候有一些关于项目的笔记。&lt;/p&gt;
&lt;p&gt;本文的内容可能随时间变化直到系列完成。特别是在目录里，各个部分的标题还没有写而顺序也有可能改变。随着内容逐渐完成，一些部分也有可能被移除或者有新的部分被添加进来。&lt;/p&gt;
&lt;p&gt;项目中的更多信息可以在 “第一部分：什么是键值对存储，为什么要实现它”的1.3节中找到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codecapsule.com/2012/11/07/ikvs-part-1-what-are-key-value-stores-and-why-implement-one/&quot; target=&quot;_blank&quot;&gt;1 – &lt;/a&gt;&lt;a href=&quot;http://blog.jobbole.com/75844/&quot; target=&quot;_blank&quot;&gt;什么是键值对存储，为什么要实现它？&lt;/a&gt; （已翻成中文）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.1 – 键值对存储综述&lt;/li&gt;
&lt;li&gt;1.2 –键值对存储 vs 关系型数据库&lt;/li&gt;
&lt;li&gt;1.3 – 为什么要实现键值对存储&lt;/li&gt;
&lt;li&gt;1.4 – 计划&lt;/li&gt;
&lt;li&gt;1.5 – 引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;a href=&quot;http://codecapsule.com/2012/12/03/implementing-a-key-value-store-part-2-using-existing-key-value-stores-as-models/&quot;&gt;2 – 使用已存在的键值对存储作为模型&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.1 – 不要重复发明轮子&lt;/li&gt;
&lt;li&gt;2.2 – 候选模型和选择标准&lt;/li&gt;
&lt;li&gt;2.3 – 所选的键值对存储的概览&lt;/li&gt;
&lt;li&gt;2.4 – 引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://codecapsule.com/2012/12/30/implementing-a-key-value-store-part-3-comparative-analysis-of-the-architectures-of-kyoto-cabinet-and-leveldb/&quot;&gt;3 – Kyoto Cabinet和LevelDB结构的比较分析&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.1 – 结构分析的意图和方法&lt;/li&gt;
&lt;li&gt;3.2 – 键值对存储组件的概览&lt;/li&gt;
&lt;li&gt;3.3 – Kyoto Cabinet和LevelDB的结构与概念分析&lt;/li&gt;
&lt;li&gt;3.4 – 代码审查&lt;/li&gt;
&lt;li&gt;3.5 – 引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://codecapsule.com/2013/04/03/implementing-a-key-value-store-part-4-api-design/&quot;&gt;4 – API设计&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4.1 – API设计的基本原则&lt;/li&gt;
&lt;li&gt;4.2 – 定义FelixDB公共API的功能。&lt;/li&gt;
&lt;li&gt;4.3 – 比较已存在数据库的API功能&lt;/li&gt;
&lt;li&gt;4.4 – Conclusion 结论&lt;/li&gt;
&lt;li&gt;4.5 – References 引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://codecapsule.com/2013/05/13/implementing-a-key-value-store-part-5-hash-table-implementations/&quot;&gt;5 – 哈希表实现&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.1 – Hash tables 哈希表&lt;/li&gt;
&lt;li&gt;5.2 – Implementations 实现&lt;/li&gt;
&lt;li&gt;5.3 – Conclusion 结论&lt;/li&gt;
&lt;li&gt;5.4 – References 引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6 – 实现存储在文件系统中的高存储效率的哈希表&lt;/p&gt;
&lt;p&gt;7 – 存储管理&lt;/p&gt;
&lt;p&gt;8 – 网络&lt;/p&gt;
&lt;p&gt;9 – 接口：REST, memcached等&lt;/p&gt;
&lt;p&gt;10 – 更进一步&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Tue, 26 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-26-75842-066a29463.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-26-75842-066a29463.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>55分钟学会正则表达式</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;伯乐在线补充：推荐几个正则表达式编辑器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debuggex ：&lt;a href=&quot;https://www.debuggex.com/&quot; target=&quot;_blank&quot;&gt;https://www.debuggex.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;PyRegex：&lt;a href=&quot;http://www.pyregex.com/&quot; target=&quot;_blank&quot;&gt;http://www.pyregex.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Regexper：&lt;a href=&quot;http://www.regexper.com/&quot; target=&quot;_blank&quot;&gt;http://www.regexper.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则表达式是一种查找以及字符串替换操作。正则表达式在文本编辑器中广泛使用，比如正则表达式被用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;检查文本中是否含有指定的特征词&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;找出文中匹配特征词的位置&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;从文本中提取信息，比如：字符串的子串&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;修改文本&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;与文本编辑器相似，几乎所有的高级编程语言都支持正则表达式。在这样的语境下，“文本”也就是一个字符串，可以执行的操作都是类似的。一些编程语言（比如Perl，JavaScript）会检查正则表达式的语法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;正则表达式是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;正则表达式只是一个字符串。没有长度限制，但是，这样的正则表达式长度往往较短。如下所示是一些正则表达式的例子：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;I had a \S+ day today&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;[A-Za-z0-9\-_]{3,16}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;\d\d\d\d-\d\d-\d\d&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;v(\d+)(\.\d+)*&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;TotalMessages=&quot;(.*?)&quot;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;&amp;lt;[^&amp;lt;&amp;gt;]&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;这些字符串实际上都是微型计算机程序。正则表达式的语法，实际上是一种轻量级、简洁、适用于特定领域的编程语言。记住这一点，那么你就很容易理解下面的事情：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;每一个正则表达式，都可以分解为一个指令序列，比如“先找到这样的字符，再找到那样的字符，再从中找到一个字符。。。”&lt;br&gt;
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;每一个正则表达式都有输入（文本）和输出（匹配规则的输出，有时是修改后的文本）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;正则表达式有可能出现语法错误——不是所有的字符串都是正则表达式&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;正则表达式语法很有个性，也可以说很恐怖&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;有时可以通过编译，使得正则表达式执行更快&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;在实现中，正则表达式还有其他的特点。本文将重点讨论正则表达式的核心语法，在几乎所有的正则表达式中都可以见到这些规则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;特别提示：正则表达式与文件通配语法无关，比如 *.xml&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;正则表达式的基础语法&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;
&lt;span style=&quot;font-family: Simsun;&quot;&gt;字符&lt;/span&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt; &lt;/span&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;正则表达式中包含了一系列的字符，这些字符只能匹配它们本身。有一些被称为“元字符”的特殊字符，可以匹配一些特殊规则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;如下所示的例子中，我用红色标出了元字符。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;I had a &lt;span style=&quot;color: #ff0000;&quot;&gt;\S+&lt;/span&gt; day today&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;code&gt;[A-Za-z0-9\-_]{3,16}&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;\d\d\d\d&lt;/span&gt;-&lt;span style=&quot;color: #ff0000;&quot;&gt;\d\d&lt;/span&gt;-&lt;span style=&quot;color: #ff0000;&quot;&gt;\d\d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;v&lt;span style=&quot;color: #ff0000;&quot;&gt;(\d+)(\.\d+)*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;TotalMessages=&quot;&lt;span style=&quot;color: #ff0000;&quot;&gt;(.*?)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #ff0000;&quot;&gt;[^&amp;lt;&amp;gt;]*&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt; &lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;大部分的字符，包括所有的字母和数字字符，是普通字符。也就意味着，它们只能匹配它们自己，如下所示的正则表达式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;cat&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;意味着，只能匹配一个字符串，以“c”开头，然后是字符“a”，紧跟着是字符“t”的字符串。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;到目前为止，正则表达式的功能类似于&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;常规的Find功能&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;Java中的 &lt;code&gt;String.indexOf()&lt;/code&gt; 函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;PHP中的 &lt;code&gt;strpos()&lt;/code&gt;函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;等等&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;注意：不做特殊说明，正则表达式中是区分大小写的。但是，几乎所有正则表达式的实现，都会提供一个Flag用来控制是否区分大小写。&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;h3&gt;&lt;span style=&quot;font-family: Simsun;&quot;&gt;点“.”&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;我们第一个要讲解的元字符是“.”。这个符号意味着可以匹配任意一个字符。如下所示的正则表达式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;c.t&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;意味着匹配“以c开头,之后是任意一个字符，紧跟着是字母t”的字符串。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;在一段文本中，这样的正则表达式可以用来找出&lt;/span&gt;&lt;span style=&quot;color: #262626; font-family: Simsun; font-size: medium;&quot;&gt;&lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;cot&lt;/code&gt;, &lt;code&gt;czt这样的字符串，甚至可以找出c.t这样的组合，但是不能找到ct或者是coot这样的字符串。&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;使用反斜杠“\”可以忽略元字符，使得元字符的功能与普通字符一样。所以，正则表达式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;c\.t&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;表示“找到字母c,然后是一个句号（“.”），紧跟着字母t”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;反斜杠本身也是一个元字符，这意味着反斜杠本身也可以通过相似的方法变回到普通字符的用途。因此，正则表达式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;c\\t&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;表示匹配“以字符c开头,然后是一个反斜杠，紧跟着是字母t”的字符串。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Simsun; font-size: medium;&quot;&gt;注意！在正则表达式的实现中，.是不能用于匹配换行符的。”换行符“的表示方法在不同实现中也不同。实际编程时，请参考相关文档。在本文中，我认为.是可以匹配任意字符的。实现环境通常会提供一个Flag标志位，来控制这一点。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;字符类&lt;/h2&gt;
&lt;p&gt;字符类是一组在方括号内的字符，表示可以匹配其中的任何一个字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式c[aeiou]t，表示可以匹配的字符串是”以c开头，接着是aeiou中的任何一个字符，最后以t结尾”。在文本的实际应用中，这样的正则表达式可以匹配：cat,cet,cit,cot,cut五种字符串。&lt;/li&gt;
&lt;li&gt;正则表达式[0123456789]表示匹配任意一个整数。&lt;/li&gt;
&lt;li&gt;正则表达式[a]表示匹配单字符a。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包含忽略字符的例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示匹配字符串[a]&lt;/li&gt;
&lt;li&gt;[&lt;code class=&quot;tex2jax_ignore&quot;&gt;\[\]&lt;/code&gt;\ab]表示匹配的字符为”[&quot;或者&#39;&#39;]”或者”a”,或者”b”&lt;/li&gt;
&lt;li&gt;[\\&lt;code class=&quot;tex2jax_ignore&quot;&gt;\[\]&lt;/code&gt;]表示匹配的字符为”\”或者 “[”或者&quot;]“&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在字符类中，字符的重复和出现顺序并不重要。[dabaaabcc]与[abc]是相同的&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;重要提示：字符类中和字符类外的规则有时不同，一些字符在字符类中是元字符，在字符类外是普通字符。一些字符正好相反。还有一些字符在字符类中和字符类外都是元字符，这要视情况而定！&lt;/p&gt;

&lt;/div&gt;
&lt;h3&gt;字符类的范围&lt;/h3&gt;
&lt;p&gt;在字符集中，你可以通过使用短横线来表示匹配字母或数字的范围。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[b-f]与[b,c,d,e,f]相同，都是匹配一个字符”b”或”c”或”d”或”e”或”f”&lt;/li&gt;
&lt;li&gt;[A-Z]与[ABCDEFGHIJKLMNOPQRSTUVWXYZ]相同，都是匹配任意一个大写字母。&lt;/li&gt;
&lt;li&gt;[1-9]与[123456789]相同，都是匹配任意一个非零数字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用目前我们已经讲解的正则表达式相关知识，在字典中匹配找到含有最多连续元音的单词，同时找到含有最多连续辅音的单词。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;[aeiou][aeiou][aeiou][aeiou][aeiou][aeiou]&lt;/code&gt; 这样的正则表达式，可以匹配连续含有六个元音的单词，比如 &lt;code&gt;euouae&lt;/code&gt; 和 &lt;code&gt;euouaes&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;同样的，恐怖的正则表达式&lt;/span&gt;&lt;/code&gt;&lt;code&gt;[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]&lt;/code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt; 可以找到连续含有十个辅音的单词&lt;/span&gt;&lt;code&gt;sulphhydryls&lt;/code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;下文中，我们会讲解，怎样有效缩短这样的正则表达式长度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在字符类之外，短横线没有特殊含义。正则表达式a-z，表示匹配字符串“以a开头，然后是一个短横线，以z结尾”。&lt;/p&gt;
&lt;p&gt;范围和单独的字符可能在一个字符类中同时出现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0-9.,]表明匹配一个数字，或者一个全角句号，或者一个逗号&lt;/li&gt;
&lt;li&gt;[0-9a-fA-F]意味着匹配一个十六进制数&lt;/li&gt;
&lt;li&gt;[a-zA-Z0-9\-]意味着匹配一个字母、数字或者一个短横线&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用已经介绍过的正则表达式知识，匹配YYYY-MM-DD格式的日期。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;同样的，下文中，我们会介绍怎样有效减少这样的正则表达式长度。&lt;/p&gt;
&lt;p&gt;虽然你可以尝试在正则表达式中使用一些非字母或数字作为范围的最后一个符号，比如abc[!-/]def，但是这并不是在每种实现中都合法。即使这样的语法是合法的，这样的语义也是模糊的。最好不要这样使用。&lt;/p&gt;
&lt;p&gt;同时，你必须谨慎选择范围的边界值。即使[A-z]在你使用的实现中，是合法的，也可能会产生无法预料的运行结果。（注意，在z到a之间，是有字符存在的）&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;b&gt;注意：&lt;/b&gt;范围的字符值代表的是字符而已，并不能代表数值范围，比如[1-31]表示匹配一个数字，是1或者2或者3，而不是匹配一个数值在1到31之间的数。&lt;/p&gt;
&lt;div&gt;
&lt;h3&gt;字符类的反义&lt;/h3&gt;
&lt;p&gt;你可以在字符类的起始位放一个反义符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[^a]表示匹配任何不是“a”的字符&lt;/li&gt;
&lt;li&gt;[^a-zA-Z0-9]表示匹配任何不是字母也不是数字的字符&lt;/li&gt;
&lt;li&gt;[\^abc]匹配一个为“^”或者a或者b或者c的字符&lt;/li&gt;
&lt;li&gt;[^\^]表示匹配任何不为“^”的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在字典中，找到一个不满足“在e之前有i，但是没有c”的例子。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;cie和[^c]ei都要可以找到很多这样的例子，比如ancient,science,viel,weigh&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;转义字符类&lt;/h3&gt;
&lt;p&gt;\d这个正则表达式与[0-9]作用相同，都是匹配任何一个数字。（要匹配\d,应该使用正则表达式\\d）&lt;/p&gt;
&lt;p&gt;\w与[0-9A-Za-z]相同，都表示匹配一个数字或字母字符&lt;/p&gt;
&lt;p&gt;\s意味着匹配一个空字符（空格，制表符，回车或者换行）&lt;/p&gt;
&lt;p&gt;另外&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\D与[^0-9]相同，表示匹配一个非数字字符。&lt;/li&gt;
&lt;li&gt;\W与[^0-9A-Za-z]相同，表示匹配一个非数字同时不是字母的字符。&lt;/li&gt;
&lt;li&gt;\S表示匹配一个非空字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些是你必须掌握的字符。你可能已经注意到了，一个全角句号“.”也是一个字符类，可以匹配任意一个字符。&lt;/p&gt;
&lt;p&gt;很多正则表达式的实现中，提供了更多的字符类，或者是标志位在ASCII码的基础上，扩展现有的字符类。&lt;/p&gt;
&lt;p&gt;特别提示：统一字符集中包含除了0至9之外的更多数字字符，同样的，也包含更多的空字符和字母字符。实际使用正则表达式时，请仔细查看相关文档。&lt;/p&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;简化正则表达式 &lt;code&gt;[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;\d\d\d\d-\d\d-\d\d&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;重复&lt;/h3&gt;
&lt;p&gt;在字符或字符集之后，你可以使用{ }大括号来表示重复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式a{1}与a意思相同，都表示匹配字母a&lt;/li&gt;
&lt;li&gt;a{3}表示匹配字符串“aaa”&lt;/li&gt;
&lt;li&gt;a{0}表示匹配空字符串。从这个正则表达式本身来看，它毫无意义。如果你对任何文本执行这样的正则表达式，你可以定位到搜索的起始位置，即使文本为空。&lt;/li&gt;
&lt;li&gt;a\{2\}表示匹配字符串“a{2}”&lt;/li&gt;
&lt;li&gt;在字符类中，大括号没有特殊含义。[{}]表示匹配一个左边的大括号，或者一个右边的大括号&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;简化下面的正则表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;z.......z&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d\d\d\d-\d\d-\d\d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[aeiou][aeiou][aeiou][aeiou][aeiou][aeiou]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;z.{7}z&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d{4}-\d{2}-\d{2}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[aeiou]{6}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[bcdfghjklmnpqrstvwxyz]{10}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;指定重复次数范围&lt;/h3&gt;
&lt;p&gt;重复次数是可以指定范围的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x{4,4}与x{4}相同&lt;/li&gt;
&lt;li&gt;colou{0,1}r表示匹配colour或者color&lt;/li&gt;
&lt;li&gt;a{3,5}表示匹配aaaaa或者aaaa或者aaa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;注意这样的正则表达式会优先匹配最长字符串，比如输入 &lt;/span&gt;&lt;code&gt;I had an aaaaawful day&lt;/code&gt;&lt;code&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;会匹配单词aaaaawful中的aaaaa，而不会匹配其中的aaa。&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;重复次数是可以有范围的，但是有时候这样的方法也不能找到最佳答案。如果你的输入文本是&lt;/span&gt;I had an aaawful daaaaay&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;那么在第一次匹配时，只能找到aaawful，只有再次执行匹配时才能找到daaaaay中的aaaaa.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;重复次数的范围可以是开区间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a{1，}表示匹配一个或一个以上的连续字符a。依然是匹配最长字符串。当找到第一个a之后，正则表达式会尝试匹配尽量多个的连续字母a。&lt;/li&gt;
&lt;li&gt;.{0,}表示匹配任意内容。无论你输入的文本是什么，即使是一个空字符串，这个正则表达式都会成功匹配全文并返回结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用正则表达式找到双引号。要求输入字符串可能包含任意个字符。&lt;/p&gt;
&lt;p&gt;调整你的正则表达式使得在一对双引号中间不再包含其他的双引号。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;关于重复的转义字符&lt;/h3&gt;
&lt;p&gt;？与{0,1}相同，比如，colou?r表示匹配colour或者color&lt;/p&gt;
&lt;p&gt;*与{0,}相同。比如，.*表示匹配任意内容&lt;/p&gt;
&lt;p&gt;+与{1，}相同。比如,\w+表示匹配一个词。其中”一个词”表示由一个或一个以上的字符组成的字符串，比如_var或者AccountName1.&lt;/p&gt;
&lt;p&gt;这些是你必须知道的常用转义字符，除此之外还有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\?\*\+ 表示匹配字符串”?*+”&lt;/li&gt;
&lt;li&gt;[?*+]表示匹配一个问号，或者一个*号，或者一个加号&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;简化下列的正则表达式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&quot;.{0,}&quot;&lt;/code&gt; and &lt;code&gt;&quot;[^&quot;]{0,}&quot;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x?x?x?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y*y*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z+z+z+z+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;&lt;b&gt;答案&lt;/b&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&quot;.*&quot;&lt;/code&gt; and &lt;code&gt;&quot;[^&quot;]*&quot;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x{0,3}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;z{4,&lt;/code&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;写出正则表达式，寻找由非字母字符分隔的两个单词。如果是三个呢？六个呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\w+\W+\w+&lt;/code&gt;, &lt;code&gt;\w+\W+\w+\W+\w+&lt;/code&gt;, &lt;code&gt;\w+\W+\w+\W+\w+\W+\w+\W+\w+\W+\w+&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt; 非贪婪匹配&lt;/h3&gt;
&lt;p&gt;正则表达式 “.*” 表示匹配双引号，之后是任意内容，之后再匹配一个双引号。注意，其中匹配任意内容也可以是双引号。通常情况下，这并不是很有用。通过在句尾加上一个问号，可以使得字符串重复不再匹配最长字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\d{4,5}?表示匹配\d\d\d\d或者\d\d\d\d\d。也就是和\d{4}一样&lt;/li&gt;
&lt;li&gt;colou??r与colou{0,1}r相同，表示找到color或者colour。这与colou?r一样。&lt;/li&gt;
&lt;li&gt;“.*?”表示先匹配一个双引号，然后匹配最少的字符，然后是一个双引号，与上面两个例子不同，这很有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;选择匹配&lt;/h3&gt;
&lt;p&gt;你可以使用|来分隔可以匹配的不同选择:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cat|dog表示匹配”cat”或者”dog”&lt;/li&gt;
&lt;li&gt;red|blue|以及red||blue以及|red|blue都表示匹配red或者blue或者一个空字符串&lt;/li&gt;
&lt;li&gt;a|b|c与[abc]相同&lt;/li&gt;
&lt;li&gt;cat|dog|\|表示匹配”cat”或者”dog”或者一个分隔符”|“&lt;/li&gt;
&lt;li&gt;[cat|dog]表示匹配a或者c或者d或者g或者o或者t或者一个分隔符“|”&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;简化下列正则表达式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s|t|u|v|w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aa|ab|ba|bb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[abc]|[^abc]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^ab]|[^bc]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ab][ab][ab]?[ab]?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-family: &#39;Ubuntu Mono&#39;, monospace;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;答案&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[s-w]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ab]{2}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^b]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ab]{2,4}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用正则表达式匹配1到31之间的整数，[1-31]不是正确答案！&lt;/p&gt;
&lt;p&gt;这样的正则表达式不唯一. &lt;code&gt;[1-9]|[12][0-9]|3[01]&lt;/code&gt; 是其中之一。&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;分组&lt;/h3&gt;
&lt;p&gt;你可以使用括号表示分组:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;span style=&quot;font-family: Tahoma;&quot;&gt;通过使用 &lt;/span&gt;Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day &lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;匹配一周中的某一天&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;(\w*)ility &lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt; &lt;/span&gt;与&lt;/span&gt; \w*ility &lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;相同。都是匹配一个由”ility”结尾的单词。稍后我们会讲解，为何第一种方法更加有用。&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class=&quot;MathJax_Preview&quot;&gt;\(\)&lt;/span&gt;表示匹配一对括号。&lt;/li&gt;
&lt;li&gt;[()]表示匹配任意一个左括号或者一个右括号&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在《时间机器中》找到一对括号中的内容，然后通过修改正则表达式，找到不含括号的内容。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;p&gt;分组可以包括空字符串：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(red|blue)表示匹配red或者blue或者是一个空字符串&lt;/li&gt;
&lt;li&gt;abc()def与abcdef相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你也可以在分组的基础上使用重复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(red|blue)？与(red|blue|)相同&lt;/li&gt;
&lt;li&gt;\w+(\s+\w+)表示匹配一个或多个由空格分隔的单词&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;简化正则表达式 &lt;code&gt;\w+\W+\w+\W+\w+&lt;/code&gt; 以及 &lt;code&gt;\w+\W+\w+\W+\w+\W+\w+\W+\w+\W+\w+&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;\w+(\W+\w+){2}&lt;/code&gt;, &lt;code&gt;\w+(\W+\w+){5}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;单词分隔符&lt;/h3&gt;
&lt;p&gt;在单词和非单词之间有单词分隔符。记住，一个单词\w是[0-9A-Za-z_]，而非单词字符是\W(大写)，表示[^0-9A-Za-z_].&lt;/p&gt;
&lt;p&gt;在文本的开头和结尾通常也有单词分隔符。&lt;/p&gt;
&lt;p&gt;在输入文本it’s a cat中，实际有八个单词分隔符。如果我们在cat之后在上一个空格，那就有九个单词分隔符。.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\b表示匹配一个单词分隔符&lt;/li&gt;
&lt;li&gt;\b\w\w\w\b表示匹配一个三字母单词&lt;/li&gt;
&lt;li&gt;a\ba表示匹配两个a中间有一个单词分隔符。这个正则表达式永远不会有匹配的字符，无论输入怎样的文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单词分隔符本身并不是字符。它们的宽度为0。下列正则表达式的作用不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(\bcat)\b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(\bcat\b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b(cat)\b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b(cat\b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在词典中找到最长的单词。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;换行符&lt;/h3&gt;
&lt;p&gt;一篇文本中可以有一行或多行，行与行之间由换行符分隔，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line一行文字&lt;/li&gt;
&lt;li&gt;Line break换行符&lt;/li&gt;
&lt;li&gt;Line一行文字&lt;/li&gt;
&lt;li&gt;Line break换行符&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;Line break换行符&lt;/li&gt;
&lt;li&gt;Line一行文字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，所有的文本都是以一行结束的，而不是以换行符结束。但是，任意一行都可能为空，包括最后一行。&lt;/p&gt;
&lt;p&gt;行的起始位置，是在换行符和下一行首字符之间的空间。考虑到单词分隔符，文本的起始位置也可以当做是首行位置。&lt;/p&gt;
&lt;p&gt;最后一行是最后一行的尾字符和换行符之间的空间。考虑到单词分隔符，文本的结束也可以认为是行的结束。&lt;/p&gt;
&lt;p&gt;那么新的格式表示如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start-of-line, line, end-of-line&lt;/li&gt;
&lt;li&gt;Line break&lt;/li&gt;
&lt;li&gt;Start-of-line, line, end-of-line&lt;/li&gt;
&lt;li&gt;Line break&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;Line break&lt;/li&gt;
&lt;li&gt;Start-of-line, line, end-of-line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于上述概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;^表示匹配行的开始位置&lt;/li&gt;
&lt;li&gt;$表示匹配行的结束位置&lt;/li&gt;
&lt;li&gt;^&amp;amp;表示一个空行&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^.*&amp;amp;&lt;/code&gt;&lt;code&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt; &lt;/span&gt;表示匹配全文内容，因为行的开始符号也是一个字符，&quot;.&quot;会匹配这个符号。找到单独的一行，可以使用&lt;/span&gt;&lt;/code&gt; ^.*?$&lt;/li&gt;
&lt;li&gt;\^\$表示匹配字符串“^$”&lt;/li&gt;
&lt;li&gt;[$]表示匹配一个$。但是，[^]不是合法的正则表达式。记住在方括号中，字符有不同的特殊含义。要想在方括号内匹配^，必须用[\^]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与字符分隔符一样，换行符也不是字符。它们宽度为0.如下所示的正则表达式作用不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(^cat)$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(^cat$)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^(cat)$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^(cat$)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用正则表达式在《时间机器》中找到最长的一行。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;答案&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;&lt;b&gt;&lt;/b&gt;使用正则表达式^.{73,}$可以匹配长度为73的一行&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;文本分界&lt;/h3&gt;
&lt;p&gt;在很多的正则表达式实现中，将^和$作为文本的开始符号和结束符号。&lt;/p&gt;
&lt;p&gt;还有一些实现中，用\A和\z作为文本的开始和结束符号。&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;捕捉和替换&lt;/h2&gt;
&lt;p&gt;从这里开始，正则表达式真正体现出了它的强大。&lt;/p&gt;
&lt;h3&gt;捕获组&lt;/h3&gt;
&lt;p&gt;你已经知道了使用括号可以匹配一组符号。使用括号也可以捕获子串。假设正则表达式是一个小型计算机程序，那么捕获子串就是它输出的一部分。&lt;/p&gt;
&lt;p&gt;正则表达式(\w*)ility表示匹配以ility结尾的词。第一个被捕获的部分是由\w*控制的。比如，输入的文本内容中有单词accessibility，那么首先被捕获的部分是accessib。如果输入的文本中有单独的ility，则首先被捕获的是一个空字符串。&lt;/p&gt;
&lt;p&gt;你可能会有很多的捕获字符串，它们可能靠得很近。捕获组从左向右编号。也就是只需要对左括号计数。&lt;/p&gt;
&lt;p&gt;假设有这样的正则表达式：(\w+) had a ((\w+) \w+)&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;输入的内容是：&lt;/span&gt;&lt;/span&gt;I had a nice day &lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;&lt;br&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;捕获组1：I&lt;/li&gt;
&lt;li&gt;捕获组2：nice day&lt;/li&gt;
&lt;li&gt;捕获组3:nice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一些正则表达式的实现中，你可以从零开始编号，编号零表示匹配整句话：&lt;code&gt;I had a nice day&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;在其他的实现中，如果没有制定捕获组，那么捕获组1会自动地填入捕获组0的信息。&lt;/p&gt;
&lt;p&gt;是的，这也意味着会有很多的括号。有一些正则表达式的实现中，提供了“非捕获组”的语法，但是这样的语法并不是标准语法，因此我们不会介绍。&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;从一个成功的匹配中返回的捕获组个数，与使用原来的正则表达式获得的捕获组个数相同。记住这一点，你可以解释一些奇怪的现象。.&lt;/p&gt;
&lt;p&gt;正则表达式（（cat）|dog）表示匹配cat或者dog。这里有两个捕获组，如果输入文本是dog，那么捕获组1是dog,捕获组2为空。&lt;/p&gt;
&lt;p&gt;正则表达式a(\w)*表示匹配一个以a开头的单词。这里只有一个捕获组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果输入文本为a,捕获组1为空。&lt;/li&gt;
&lt;li&gt;如果输入文本为ad,捕获组为d&lt;/li&gt;
&lt;li&gt;如果输入文本为avocado，捕获组1为v。但是捕获组0表示整个单词avocado.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;替换&lt;/h3&gt;
&lt;p&gt;假如你使用了一个正则表达式去匹配字符串，你可以描述另外一个字符串来替换其中的匹配字符。用来替换的字符串称为替换表达式。它的功能类似于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常规的Replace会话&lt;/li&gt;
&lt;li&gt;Java中的String.replace()函数&lt;/li&gt;
&lt;li&gt;PHP的str_replace()函数&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将《时间机器》中所有的元音字母替换为r。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;p&gt;但是，你可以在替换表达式中引用捕获组。这是在替换表达式中，你可以唯一操作的地方。这也是非常有效的，因为这样你就不用重构你找到的字符串。&lt;/p&gt;
&lt;p&gt;假设你正在尝试将美国风格的日期表示MM/DD/YY替换为ISO 8601日期表示YYYY-MM-DD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从正则表达式&lt;span style=&quot;color: #0000ff;&quot;&gt;(\d\d)/(\d\d)/(\d\d)&lt;/span&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;开始。注意，这其中有三个捕获组：月份，日期和两位的年份。&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.捕获组的内容和捕获组编号之间用反斜杠分隔，因此你的替换表达式应该是&lt;code&gt;20\3-\1-\2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果我们输入的文本中包含03/04/05表示2005年3月4日那么：
&lt;ul&gt;
&lt;li&gt;捕获组1:03&lt;/li&gt;
&lt;li&gt;捕获组2：04&lt;/li&gt;
&lt;li&gt;捕获组3：05&lt;/li&gt;
&lt;li&gt;替换字符串&lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;2005-03-04&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在替换表达式中，你可以多次使用捕获组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于双元音，正则表达式为([aeiou])，替换表达式为\l\l&lt;/li&gt;
&lt;li&gt;
&lt;span style=&quot;font-family: Tahoma;&quot;&gt;在替换表达式中不能使用反斜杠。&lt;/span&gt;&lt;span style=&quot;color: #888888; font-family: &#39;Ubuntu Mono&#39;, monospace; font-size: medium;&quot;&gt;比如，你&lt;/span&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;在计算机程序中希望使用字符串中使用部分文本。那么，你必须在每个双引号或者反斜杠之前加上反斜杠。&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;你的正则表达式可以是&lt;span style=&quot;font-family: &#39;Ubuntu Mono&#39;, monospace;&quot;&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;([\\&quot;])&lt;/span&gt;&lt;span style=&quot;color: #262626;&quot;&gt;。&lt;/span&gt;&lt;span style=&quot;color: #262626; font-size: medium;&quot;&gt;捕获组1是双引号或者反斜杠&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #262626; font-family: &#39;Ubuntu Mono&#39;, monospace; font-size: medium;&quot;&gt;你的替换表达式应该是\\\l&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;使用正则表达式和替换表达式，将23h59这样的时间戳转化为23:59.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;答案&lt;/strong&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;反向引用&lt;/h3&gt;
&lt;p&gt;在一个正则表达式中，你也可以引用捕获组。这称作：反向引用&lt;/p&gt;
&lt;p&gt;比如，[abc]{2}表示匹配aa或者ab或者ac或者ba或者bb或者bc或者ca或者cb或者cc.但是{[abc]}\1表示只匹配aa或者bb或者cc.&lt;/p&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在字典中，找到包含两次重复子串的最长单词，比如&lt;code&gt;papa&lt;/code&gt;, &lt;code&gt;coco&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\b(.{6,})\1\b&lt;/code&gt; 匹配 &lt;code&gt;chiquichiqui&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;如果我们不在乎单词的完整性，我们可以忽略单词的分解，使用正则表达式 &lt;/span&gt;&lt;code&gt;(.{7,})\1&lt;/code&gt;&lt;code&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;匹配&lt;/span&gt;&lt;/code&gt;&lt;code&gt;countercountermeasure&lt;/code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt; 以及 &lt;/span&gt;&lt;code&gt;countercountermeasures&lt;/code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;使用正则表达式编程&lt;/h2&gt;
&lt;p&gt;特别提醒：&lt;/p&gt;
&lt;h3&gt;过度使用的反斜杠&lt;/h3&gt;
&lt;p&gt;在一些编程语言，比如Java中，对于包含正则表达式的字符串没有特殊标记。字符串有着自己的过滤规则，这是优先于正则表达式规则的，这是频繁使用反斜杠的原因。&lt;/p&gt;
&lt;p&gt;比如在Java中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配一个数字，使用的正则表达式从\d变为代码中的String re= “\\d”&lt;/li&gt;
&lt;li&gt;匹配双引号字符串的正则表达式从&lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;&quot;[^&quot;]*&quot;&lt;/code&gt; 变为String re = “\”[^\&quot;]*\”&quot;&lt;/li&gt;
&lt;li&gt;
&lt;span style=&quot;font-family: Tahoma;&quot;&gt;匹配反斜杠或者是左边方括号，或者右边方括号的正则表达式从&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;[\\&lt;code class=&quot;tex2jax_ignore&quot;&gt;\[\]&lt;/code&gt;] &lt;/span&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;变为&lt;/span&gt;String re = “[\\\\\]”;&lt;/li&gt;
&lt;li&gt;
&lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;String re = &quot;\\s&quot;;&lt;/code&gt; 和&lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;String re = &quot;[ \t\r\n]&quot;;&lt;/code&gt; 是等价的. 注意它们实际执行调用时的层次不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在其他的编程语言中，正则表达式是由特殊标明的，比如使用/。下面是JavaScript的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配一个数字，\d会简单写成 &lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;var regExp = /\d/;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;匹配一个反斜杠或者一个左边的方括号或者一个右边的方括号， &lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;var regExp = /[\\&lt;code class=&quot;tex2jax_ignore&quot;&gt;\[\]&lt;/code&gt;]/;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;var regExp = /\s/;&lt;/code&gt; 和 &lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;var regExp = /[ \t\r\n]/;&lt;/code&gt; 是等价的&lt;/li&gt;
&lt;li&gt;当然，这意味着在使用/时必须重复两次。比如找到URL必须使用&lt;code style=&quot;font-style: inherit; font-weight: inherit;&quot;&gt;var regExp = /https?:\/\//;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我希望现在你能明白，我为什么让你特别注意反斜杠。&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;动态正则表达式&lt;/h3&gt;
&lt;p&gt;当你动态创建一个正则表达式的时候请特别小心。如果你使用的字符串不够完善的花，可能会有意想不到的匹配结果。这可能导致语法错误，更糟糕的是，你的正则表达式语法正确，但是结果无法预料。&lt;/p&gt;
&lt;p&gt;错误的Java代码：&lt;/p&gt;
&lt;p&gt;String sep = System.getProperty(“file.separator”); String[] directories = filePath.split(sep);&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;Bug:&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;String.split() &lt;/span&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;认为sep是一个正则表达式。但是，在Windows中，Sep是表示匹配一个反斜杠，也就是与正则表达式”\\”相同。这个正则表达式是正确的，但是会返回一个异常：&lt;/span&gt;&lt;code&gt;PatternSyntaxException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;任何好的编程语言都会提供一种良好的机制来跳过字符串中所有的元字符。在Java中，你可以这样实现：&lt;/p&gt;
&lt;p&gt;String sep = System.getProperty(“file.separator”);&lt;/p&gt;
&lt;p&gt;String[] directories = filePath.split(Pattern.quote(sep));&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;循环中的正则表达式&lt;/h3&gt;
&lt;p&gt;将正则表达式字符串加入反复运行的程序中，是一种开销很大的操作。如果你可以在循环中避免使用正则表达式，你可以大大提高效率。&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;其他建议&lt;/h2&gt;
&lt;h3&gt;输入验证&lt;/h3&gt;
&lt;div&gt;正则表达式可以用来进行输入验证。但是严格的输入验证会使得用户体验较差。比如：&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h4&gt;信用卡号&lt;/h4&gt;
&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;在一个网站上，我输入了我的卡号比如 &lt;/span&gt;&lt;code&gt;1234 5678 8765 4321 &lt;/code&gt;&lt;code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;网站拒绝接收。因为它使用了正则表达式\d{16}。&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&quot;font-family: Tahoma; font-size: medium;&quot;&gt;正则表达式应该考虑到用户输入的空格和短横线。&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上，为什么不先过滤掉所有的非数字字符，然后再进行有效性验证呢？这样做，可以先使用\D以及空的替换表达式。&lt;/p&gt;
&lt;div&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在不先过滤掉所有的非数字字符的情况下，使用正则表达式验证卡号的正确性。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;答案&lt;/b&gt;&lt;/h4&gt;

&lt;/div&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;名字&lt;/h4&gt;
&lt;p&gt;不要使用正则表达式来验证姓名。实际上，即使可以，也不要企图验证姓名。&lt;/p&gt;
&lt;p&gt;程序员对名字的错误看法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名字中不含空格&lt;/li&gt;
&lt;li&gt;名字中没有连接符号&lt;/li&gt;
&lt;li&gt;名字中只会使用ASCII码字符&lt;/li&gt;
&lt;li&gt;名字中出现的字都在特殊字符集中&lt;/li&gt;
&lt;li&gt;名字至少要有M个字的长度&lt;/li&gt;
&lt;li&gt;名字不会超过N个字的长度&lt;/li&gt;
&lt;li&gt;人们只有一个名&lt;/li&gt;
&lt;li&gt;人们只有一个中间名&lt;/li&gt;
&lt;li&gt;人们只有一个姓（最后三条是从英语的人名考虑）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;电子邮件地址&lt;/h4&gt;
&lt;p&gt;不要使用正则表达式验证邮箱地址的正确性。&lt;/p&gt;
&lt;p&gt;首先，这样的验证很难是精确的。电子邮件地址是可以用正则表达式验证的，但是表达式会非常的长并且复杂。&lt;/p&gt;
&lt;p&gt;短的正则表达式会导致错误。（你知道吗？电子邮箱地址中会有一些注释）&lt;/p&gt;
&lt;p&gt;第二，即使一个电子邮件地址可以成功匹配正则表达式，也不代表这个邮箱实际存在。邮箱的唯一验证方法，是发送验证邮件。&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;注意&lt;/h3&gt;
&lt;p&gt;在严格的应用场景中，不要使用正则表达式来解析HTML或者XML。解析HTML或者XML：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用简单的正则表达式不能完成&lt;/li&gt;
&lt;li&gt;总体来说非常困难&lt;/li&gt;
&lt;li&gt;已经有其他的方法解决&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找到一个已经有的解析库来完成这个工作&lt;/p&gt;
&lt;h2&gt;这就是55分钟的全部内容&lt;/h2&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符: &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; &lt;code&gt;d&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; &lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; &lt;code&gt;4&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;字符类: &lt;code&gt;.&lt;/code&gt; &lt;code&gt;[abc]&lt;/code&gt; &lt;code&gt;[a-z]&lt;/code&gt; &lt;code&gt;\d&lt;/code&gt; &lt;code&gt;\w&lt;/code&gt; &lt;code&gt;\s&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; 代表任何字符&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d &lt;/code&gt;&lt;code&gt;&lt;span style=&quot;color: #262626; font-family: Tahoma; font-size: medium;&quot;&gt;表示&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-family: Tahoma;&quot;&gt;“数字”&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\w&lt;/code&gt;   表示”字母”, &lt;code&gt;[0-9A-Za-z_]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\s  &lt;/code&gt; 表示 “空格, 制表符,回车或换行符”&lt;/li&gt;
&lt;li&gt;否定字符类: &lt;code&gt;[^abc]&lt;/code&gt; &lt;code&gt;\D&lt;/code&gt; &lt;code&gt;\W&lt;/code&gt; &lt;code&gt;\S&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重复: &lt;code&gt;{4}&lt;/code&gt; &lt;code&gt;{3,16}&lt;/code&gt; &lt;code&gt;{1,}&lt;/code&gt; &lt;code&gt;?&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;+&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;?&lt;/code&gt; 表示 “零次或一次”&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; 表示 “大于零次”&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; 表示 “一次或一次以上”&lt;/li&gt;
&lt;li&gt;如果不加上？，所有的重复都是最长匹配的（贪婪）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组: &lt;code&gt;(Septem|Octo|Novem|Decem)ber&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;词，行以及文本的分隔: &lt;code&gt;\b&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;$&lt;/code&gt; &lt;code&gt;\A&lt;/code&gt; &lt;code&gt;\z&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;转义字符: &lt;code&gt;\1&lt;/code&gt; &lt;code&gt;\2&lt;/code&gt; &lt;code&gt;\3&lt;/code&gt; etc. (在匹配表达式和替换表达式中都可用)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;元字符: &lt;code&gt;.&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;[&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;{&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; &lt;code&gt;?&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;$&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;在字符类中使用元字符: &lt;code&gt;[&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; &lt;code&gt;^&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;使用反斜杠可以忽略元字符: &lt;code&gt;\&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt; 致谢&lt;/h3&gt;
&lt;p&gt;正则表达式非常常用而且非常有用。每个人在编辑文本或是编写程序时都必须了解怎样使用正则表达式。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h4&gt;
&lt;h4&gt;选择正则表达式的某种实现，阅读相关文档。我保证，你会学到更多。&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Mon, 25 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-25-63398-97adb9f33.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-25-63398-97adb9f33.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>模式匹配初析</title>
        <description>
&lt;pre&gt;&lt;code&gt;前几天看到篇C#6.0的draft spec，发现C#6.0里将惊现模式匹配。如是便在做了翻宣讲说“模式匹配”是一个很好用的特性，
但是不知道跟C#的结合会怎么样。而同时却又发现周边了解“模式匹配”的人好少，于是诞生了写一篇文章稍微介绍下这
一功能特性的想法。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果说模式匹配这一概念有人不知道，但是正则表达式应该绝大多数的程序员都知道的了。而简言之，&lt;strong&gt;模式匹配就是更强大的正则表达式，或者说正则表达式是模式匹配这一概念在字符串处理上的一个应用&lt;/strong&gt;。有了正则表达式为例，我们可以为模式匹配定义一个更为通用的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;模式匹配是判断输入的数据（信息）是否与特定的结构相匹配，并按模式从中取得数据（信息）。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如下以正则表达式为例，从输入数据value里按pattern提取数据digits的模式匹配过程。&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abc123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\d/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//定义模式&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;那更广泛意义上的模式匹配是什么呢？其实很简单，就是输入/提取数据（信息）的范围不再局限为字符串了，甚至可以是编程语言支持的所有数据结构。第一次接触模式匹配这一概念，是前几年学习erlang的时候，下面就主要以erlang为例，来对模式匹配稍作介绍。&lt;/p&gt;

&lt;p&gt;先上点erlang里的”甜点”为例来说明：&lt;/p&gt;

&lt;p&gt;(erlang基础知识：大写字母开头的声明为变量，比如下面例子里的P，H,T;小写字母的声明是原子,比如abc)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;模式{abc，P}与输入数据项{abc,123}匹配，并在匹配的同时，发生绑定P-&amp;gt;123

模式[H|T]与输入数据项[1,2,3,4]匹配，并在匹配的同时，发生绑定H-&amp;gt;1,T-&amp;gt;[2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个例子匹配的过程如下：&lt;/p&gt;

&lt;p&gt;1.先进行类型匹配：模式和数据项都是一个元组（“{}”），匹配通过。&lt;/p&gt;

&lt;p&gt;2.模式元组的第一个元素为常量，进行匹配：模式和数据项都是“abc”,匹配通过。&lt;/p&gt;

&lt;p&gt;3.模式元组的第二个元素是一个变量P，同时后面不再有任何元素，结束匹配，并将P绑定到数据项第一个元素后的所有元素。&lt;/p&gt;

&lt;p&gt;第二个例子匹配过程如下：&lt;/p&gt;

&lt;p&gt;1.先进行类型匹配，模式和数据项都是一个列表（“[]”），匹配通过。&lt;/p&gt;

&lt;p&gt;2.模式”[H|T]”表示的是一个“首尾”匹配，用“|”分开两个变量（H，T），H表示的首元素匹配，T表示尾部（除首元素外的所有元素）匹配。匹配是通过的,并绑定H和T的值为首元素和尾元素。&lt;/p&gt;

&lt;p&gt;再来一个高级点的例子：&lt;strong&gt;使用模式匹配来处理消息的接收&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;(erlang基础知识：erlang的调用是基于CSP的，各个actor之间通过消息通讯带完成调用;receive原语是erlang提供的消息接收机制，可监听和接收来自其它actor发送来的消息;”！”标识符用于向对应的actor发送消息)。&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;receive&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;%消息接收的原语，获取调用方的消息&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%匹配数据存储的消息，&quot;store&quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%真实的存储&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%匹配数据获取的消息, From匹配消息来源，&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nv&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%向查询请求消息来源发送查询结果消息&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%尾递归：持续监听新的消息 &lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%启动一个进程(actor)，Pid为进程号&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%向进程发送一个键值对存储消息&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;Pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%发送一个查询消息，获取&quot;key1&quot;对应的值&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;上面展示例子模式匹配在erlang中进行消息匹配的使用，需要注意的一点是，这里的&lt;strong&gt;匹配是从上到下来进行的&lt;/strong&gt;，即会先进行“store”的匹配，匹配失败的话才进行“get”匹配。消息匹配是erlang里的一项杀手锏特性，它能大大减少在消息处理的代码量，代码只要专注于实际算法的实现即可，将相应消息的解析和内容提取，交给模式匹配来完成。&lt;/p&gt;

&lt;p&gt;从本质上来讲，&lt;strong&gt;模式匹配体现的是一个解构的过程和手段&lt;/strong&gt;，解构是日常编程过程中一个非常常见的场景，比如编译器将程序代码解析为一个抽象语法树（AST）就是一个解构的过程，再比如，将XML/JSON进行反序列化为程序对象也是一例。对于许多语言，并未提供强大的模式匹配特性，但是为了提供&lt;strong&gt;可扩展&lt;/strong&gt;的解构功能，一般都会采取一些设计模式来解决。比如面向对象编程里，将&lt;strong&gt;解析操作抽离出独立的模块&lt;/strong&gt;，采取基于基类的虚方法/抽象方法扩展的方式，然后结合想对应的规则配置，来完成有区别性的模式解构。但是，这样的方式，稍显笨重，代码量也更多，与模式匹配相比，不在一个复杂度等级之上。&lt;/p&gt;

&lt;p&gt;去年我用golang写了一个web框架，其中的路由解析过程就采取了类似的方式（代码位置：&lt;a href=&quot;https://github.com/JustinHuang917/gof&quot;&gt;https://github.com/JustinHuang917/gof&lt;/a&gt;）。通过如以下路由规则配置，匹配不同的URL模式，从URL中提取相应的参数：&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RouteRules&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nt&quot;&gt;&quot;/Order/{id:[0-9]+}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;controller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nt&quot;&gt;&quot;/{controller}/{action}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;controller&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;这个看似简单功能，我花了200多行代码才得以完成，使用的还是堪称语法最为精简的Golang，而如果使用Java/C#来完成，代码量肯定还要增加不少。而如果语言本身具有强大的模式匹配的话，实现代码将会变得非常精简。而这一次C#6.0声称引入模式匹配，希望是面向对象语言领域的一次有益尝试。&lt;/p&gt;

&lt;p&gt;同时，我也希望我喜欢的Golang在模式匹配上迈开尝试的脚步，在现有的goroutine+channel的组合上应用模式匹配，将是一件非常有效率的实践。现在Golang提供”select..case…“机制只能识别不同channel返回的消息，而不能识别实际消息的内容，这一点来说，与erlang相比，降低了CSP的编程效率。&lt;/p&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;p&gt;模式匹配是来自函数式编程领域的高效的编程功能特性，它能成倍增加“解构”代码的编写效率，明显降低代码复杂度。同时，尽管大多数的编程语言，尚未提供这一功能，但是实际代码编写过程中，我们可以借鉴其基于模式声明的思想，抽离出相应的模式匹配模块，在保证可扩展性的同时，控制数据（信息）匹配带来的代码复杂度。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;如果您觉得这篇文字有意思，欢迎转发！欢迎更多的朋友们关注我的微信公众号：&lt;strong&gt;JustinNotes&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

</description>
        <pubDate>Sun, 24 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-24-mo-shi-pi-pei-chu-xi-f1aad7aeb.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-24-mo-shi-pi-pei-chu-xi-f1aad7aeb.html</guid>
        
        
        <category>sharecore</category>
        
      </item>
    
      <item>
        <title>Linux Performance Tools at LinuxCon North America 2014</title>
        <description>

&lt;p&gt;This week I spoke at &lt;a href=&quot;http://events.linuxfoundation.org/events/linuxcon-north-america&quot;&gt;LinuxCon North America 2014&lt;/a&gt; in Chicago, which was also my first LinuxCon. I really enjoyed the conference, and it was a privilege to take part and contribute. I&#39;ll be returning to work with some useful ideas from talks and talking with attendees.&lt;/p&gt;

&lt;p&gt;I included my latest Linux performance observability tools diagram, which I keep updated &lt;a href=&quot;/linuxperf.html&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;/Perf/linux_observability_tools.png&quot;&gt;&lt;img src=&quot;/images/brendangregg.com/386f03345157c7fac26406e42798f874.jpg&quot; width=&quot;500&quot; height=&quot;350&quot;&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;But I was really excited to share some new diagrams, which are all in the slides:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;center&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/38175637&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;&lt;/center&gt;

&lt;p&gt;I gave a similar talk two years ago at &lt;a href=&quot;/linuxperf.html#SCaLE11x&quot;&gt;SCaLE11x&lt;/a&gt;, where I covered performance observability tools. This time, I covered observability, benchmarking, and tuning tools, providing a more complete picture of the performance tools landscape. I hope these help you in a similar way, when you move from observability to performing load tests with benchmarks, and finally tuning the system.&lt;/p&gt;

&lt;p&gt;I also presented an updated summary on the state of tracing, after my recent discoveries with ftrace, which is able to serve some tracing needs in existing kernels. For more about ftrace, see my lwn.net article &lt;a href=&quot;http://lwn.net/Articles/608497/&quot;&gt;Ftrace: The hidden light switch&lt;/a&gt;, which was made open the same day as my talk.&lt;/p&gt;

&lt;p&gt;At one point I included a blank template for observability tools (&lt;a href=&quot;/Perf/linux_observability_blank.png&quot;&gt;PNG&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;/Perf/linux_observability_blank.png&quot;&gt;&lt;img src=&quot;/images/brendangregg.com/bbd77b077806661bb4f36e09416f89e3.jpg&quot; width=&quot;500&quot; height=&quot;350/&quot;&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;My suggestion was to print this out and fill it in with whatever observability tools make most sense in your environment. This may include monitoring tools, both in-house and commercial, and can be supplemented by the server tools from my diagram above.&lt;/p&gt;

&lt;div style=&quot;float:right;padding-left:10px;padding-bottom:5px&quot;&gt;
&lt;img src=&quot;/images/brendangregg.com/b3d7dffab3dfd3ea401415c84de75633.jpg&quot; width=&quot;250&quot; height=&quot;283&quot;&gt;&lt;br&gt;&lt;center&gt;&lt;font size=&quot;-1&quot;&gt;&lt;i&gt;Photo by &lt;a href=&quot;https://www.flickr.com/photos/linuxfoundation/sets/72157646259218139/&quot;&gt;Linux Foundation&lt;/a&gt;&lt;/i&gt;&lt;/font&gt;&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;At Netflix, we have our own monitoring system to observe our thousands of cloud instances, and this diagram helps to see which Linux and server components it currently measures, and what can be developed next. (This monitoring tool also includes many application metrics.) As I said in the talk, we&#39;ll sometimes need to login to an instance using ssh, and run the regular server tools.&lt;/p&gt;

&lt;p&gt;This diagram may also help you develop your own monitoring tools, by showing what would ideally be observed. It can also help rank commercial products: next time a salesperson tells you their tool can see everything, hand them this diagram and a pen. :-)&lt;/p&gt;

&lt;p&gt;My talk was standing room only, and some people couldn&#39;t get in the room and missed out. Unfortunately, it wasn&#39;t videoed, either. Sorry, I should have figured this out sooner and arranged something in time. Given how popular it was, I suspect I&#39;ll give it again some time, and will hopefully get it on video.&lt;/p&gt;

&lt;p&gt;Thanks to those who attended, and the Linux Foundation for having me and organizing a great event!&lt;/p&gt;


</description>
        <pubDate>Sat, 23 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-23-linux-perf-tools-linuxcon-na-2014.html-9762d47cf.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-23-linux-perf-tools-linuxcon-na-2014.html-9762d47cf.html</guid>
        
        
        <category>brendangregg</category>
        
      </item>
    
      <item>
        <title>如何学习Vim</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;我已经学习Vim多年了。下面是我推荐开始学习Vim的一些建议。&lt;/p&gt;
&lt;h3&gt;如果你不想学，就不要去学Vim&lt;/h3&gt;
&lt;p&gt;我深爱Vim，无法想象一整天用其它编辑器去写代码的情景，但是我从来不推荐谁去选择它。为什么？你不得不想选择它。我不能强迫谁；他们会恨它的。我能做的、最好的就是告诉人们我为什么喜欢它，让他们明白，它实际上是一个非常不错的编辑器。&lt;/p&gt;
&lt;p&gt;因此如果你还没有兴趣去学，就不要让任何人强迫你。你不得不真正喜欢学习Vim，否则你永远不可能学到精通的境界。&lt;/p&gt;
&lt;h3&gt;学到过得去的程度&lt;/h3&gt;
&lt;p&gt;第一步要学到刚刚能够勉强维持的水平。起初这就像被虐待。在你开始学得更快之前，你一定是缓慢的。因此你需要在工作之外花些时间，这样你的工作效率就不会受影响。&lt;/p&gt;
&lt;p&gt;我开始使用Vim时，我知道打开一个文件，向上、下、左、右移动，知道如何切换进/出编辑模式，如何删除，如何退出Vim，就这些。很明显，你不得不坚持多学一些，否则它就不值得了，不过你不得不从某个地方开始。&lt;/p&gt;
&lt;h3&gt;尽可能多地坚持使用&lt;/h3&gt;
&lt;p&gt;如果你坚持使用它，某些命令就变成了肌肉记忆，这是好的，因为你可以只是在脑子里记住了如此多的命令。如果你尽可能多使用，更多的命令就变成了第二本能，这样你可以关注越来越多的命令。&lt;/p&gt;
&lt;h3&gt;拥抱Vim，尽可能长时间地使用它&lt;/h3&gt;
&lt;p&gt;当你每天投入工作的时候，你精力充沛，不要打开你平常的编辑器，而是调出Vim。想用多长时间就用多长时间。如果你想了，或真的想去用另一款编辑器，不要着急，这一天的剩余时间再去用。当你有进步了，你会发现自己想用Vim的时间正越来越长，最终你用Vim时的产出才更多。&lt;/p&gt;
&lt;h3&gt;不要关闭方向键，只是尽量不要使用&lt;/h3&gt;
&lt;p&gt;会有个学派对你说，你需要关闭Vim里的方向键，使用h、j、k、l键移动。实际上这是我用过的方法，不过只是我想这样做的。&lt;/p&gt;
&lt;p&gt;要我说，你怎么舒服就怎么来。如果保留方向键让你舒服，那么无论如何，都要保留。不过，一定尽可能多地忍住不用方向键。&lt;/p&gt;
&lt;p&gt;现在我相当精通了，我后来打开了方向键，我还开启了鼠标滚动和点击。这样做的理由是，我不想完全疏离同事，因为他们会用我的电脑看代码。&lt;/p&gt;
&lt;h3&gt;坚持做笔记&lt;/h3&gt;
&lt;p&gt;我认为学习过程中做笔记是相当重要的。我现在仍然就我需要记住的东西做笔记，我想随后研究，并完善我的Vim配置。做笔记的范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于你不知道的&lt;/li&gt;
&lt;li&gt;关于让你沮丧的&lt;/li&gt;
&lt;li&gt;关于你需要记住的&lt;/li&gt;
&lt;li&gt;你碰到的任何问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;尽量学会使用Vim文档&lt;/h3&gt;
&lt;p&gt;有一块我本人不擅长。我倾向于在线研究，在&lt;a href=&quot;http://stackoverflow.com/questions/24345331/vim-real-tab-characters-start-at-column-8-i-cant-move-all-the-way-left&quot; target=&quot;_blank&quot;&gt;StackOverflow&lt;/a&gt;提问，但是Vim有不错的文档（只是你要习惯），它就内置在Vim里。你只需运行 :h 命令，就可以学到关于Vim的不错的资料。&lt;/p&gt;
&lt;h3&gt;享受欢乐&lt;/h3&gt;
&lt;p&gt;尽量不要沮丧。学习Vim应该是充满乐趣的，甚至是一个冒险。&lt;/p&gt;
&lt;h3&gt;让Vim更好&lt;/h3&gt;
&lt;p&gt;默认设置下的命令行和Vim与其它文本编辑器相比，看起来不太漂亮。我认为你的编辑器应该是美丽的，你应该乐于使用并以此为荣。尝试一些不同颜色的scheme，确保你有语法着色。我推荐&lt;a href=&quot;http://ethanschoonover.com/solarized&quot; target=&quot;_blank&quot;&gt;Solarized&lt;/a&gt;颜色scheme。我也推荐使用&lt;a href=&quot;http://iterm2.com/&quot; target=&quot;_blank&quot;&gt;iTerm2&lt;/a&gt;（有上面提到的鼠标滚动和点击）&lt;a href=&quot;http://www.zsh.org/&quot; target=&quot;_blank&quot;&gt;zsh&lt;/a&gt;，&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot;&gt;oh my zsh&lt;/a&gt;，&lt;a href=&quot;http://tmux.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;tmux&lt;/a&gt;和&lt;a href=&quot;https://github.com/Lokaltog/powerline&quot; target=&quot;_blank&quot;&gt;powerline&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;慢慢地创建你的Vim配置&lt;/h3&gt;
&lt;p&gt;你可以完全拷贝其他人的Vim配置，但是很难知道每个细节做了什么，做自己的配置也是很难的。仅仅从基本的Vim开始，慢慢添加东西到你的vimrc和插件里。&lt;/p&gt;
&lt;h3&gt;dotfiles的版本控制&lt;/h3&gt;
&lt;p&gt;在数年里，你会对配置做出大量修改，所有dotfiles和配置具有一个版本控制的历史是真正不错的。如果你托管在github，你可以与其他人分享，你从来不会丢失。这让安装一台新电脑也变得容易了。这里是&lt;a href=&quot;https://github.com/aharris88/dotfiles&quot; target=&quot;_blank&quot;&gt;我的dotfiles&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;找到一个使用Vim的朋友&lt;/h3&gt;
&lt;p&gt;我最好的、也可能是最难的建议，就是找到一个使用Vim的、或至少支持你使用Vim的朋友。&lt;/p&gt;
&lt;p&gt;我参加奥格登【译者注：美国的一个城市】的&lt;a href=&quot;http://startupweekend.org/&quot; target=&quot;_blank&quot;&gt;Startup Weekend&lt;/a&gt;，在我们组有个家伙，&lt;a href=&quot;https://twitter.com/cwoodcox&quot; target=&quot;_blank&quot;&gt;Corey Woodcox&lt;/a&gt;一直在使用Vim。我第一次意识到这是可行的，我完全独自一个人这样。得知有人实际上在使用、且热爱使用Vim，是非常酷的。他也在Twitter上为我解答了一些问题。&lt;/p&gt;
&lt;p&gt;当你的朋友不屑你的编辑器选择，而且你或许不能让他们信服，是非常让人沮丧的。另一方面，有一个使用Vim的朋友，在你学习的早期阶段可以极大地鼓励你。&lt;/p&gt;
&lt;h3&gt;永远坚持学习&lt;/h3&gt;
&lt;p&gt;学习Vim吧，祝你好运。这应该是一次充满乐趣的旅行！&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Sat, 23 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-23-75783-c3c90f421.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-23-75783-c3c90f421.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>grep是什么？怎么用？</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;经常读一些介绍unix命令的文章，但是文章所举的例子普遍价值不大，这就导致了看完了文章后我们并不知道如何有效地运用这些unix命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;三年前，作为面试官，我负责招聘unix系统管理员。那次来竞聘该岗位的共有8个人，其中两人是技术一流的自由职业者。我认为系统管理员没必要把所有的配置方法熟记于心，需要某个软件的时候，只要你想把它玩转并且玩得更酷，多读些文章，你便会自然而然地熟悉它的各种用法与配置。于是，我让这些应聘者解决下面两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;color: #333333; font-style: normal;&quot;&gt;创建一个例行任务，它在每个偶数点（比如2点、12点）和3点执行；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: #333333; font-style: normal;&quot;&gt;通过/var/run/dmesg.boot文件打印处理器信息。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我吃惊的是，8位应聘者中没有一个人能解决上述问题，其中两人竟对grep命令一无所知。&lt;/p&gt;
&lt;p&gt;介于此，我们就好好说说grep。&lt;/p&gt;
&lt;p&gt;首先，以下所有的操作都是基于grep 2.5.1-FreeBSD：&lt;/p&gt;
&lt;pre class=&quot;brush: actionscript3; gutter: true&quot;&gt;# grep --version | grep grep
grep (GNU grep) 2.5.1-FreeBSD&lt;/pre&gt;
&lt;p&gt;有必要先交待下grep版本，因为某些用法只限定于特定的版本：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;# man grep | grep -iB 2 freebsd
       -P, --perl-regexp
              Interpret PATTERN as a Perl regular expression.  This option  is
              not supported in FreeBSD.&lt;/pre&gt;
&lt;p&gt;好了，言归正传，我们经常会这样grep文件：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # cat /var/run/dmesg.boot | grep CPU:
CPU: Intel Core(TM)2 Quad CPU    Q9550  @ 2.83GHz (2833.07-MHz K8-class CPU)&lt;/pre&gt;
&lt;p&gt;还可以这样做：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep CPU: /var/run/dmesg.boot
CPU: Intel Core(TM)2 Quad CPU    Q9550  @ 2.83GHz (2833.07-MHz K8-class CPU)&lt;/pre&gt;
&lt;p&gt;这样也是可以的（虽然我很讨厌这种操作方式）：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # &amp;lt;/var/run/dmesg.boot grep CPU:
CPU: Intel Core(TM)2 Quad CPU    Q9550  @ 2.83GHz (2833.07-MHz K8-class CPU)&lt;/pre&gt;
&lt;p&gt;你肯定会遇到这样的场景：统计文件中带有某些关键字的行出现的次数。grep+wc可以帮到你：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep WARNING /var/run/dmesg.boot | wc -l
       3&lt;/pre&gt;
&lt;p&gt;条条大路通罗马，下面是另一条路：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep WARNING /var/run/dmesg.boot -c
3&lt;/pre&gt;
&lt;p&gt;下面我们新建一个测试用的文档：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &quot;.*&quot; test.txt
one two three
seven eight one eight three
thirteen fourteen fifteen
 sixteen seventeen eighteen seven
sixteen seventeen eighteen
        twenty seven
one 504 one
one 503 one
one     504     one
one     504 one
#comment UP
twentyseven
        #comment down
twenty1
twenty3
twenty5
twenty7&lt;/pre&gt;
&lt;p&gt;继续grep的搜索之旅。&lt;/p&gt;
&lt;p&gt;-w选项指定要搜索的单词：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -w &#39;seven&#39; test.txt
seven eight one eight three
 sixteen seventeen eighteen seven
        twenty seven&lt;/pre&gt;
&lt;p&gt;如果想搜以特定字符开头（结尾）的单词，可以这样：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &#39;\&amp;lt;seven&#39; test.txt
seven eight one eight three
 sixteen seventeen eighteen seven
sixteen seventeen eighteen
        twenty seven
root@nm3:/ # grep &#39;seven\&amp;gt;&#39; test.txt
seven eight one eight three
 sixteen seventeen eighteen seven
        twenty seven
twentyseven&lt;/pre&gt;
&lt;p&gt;如果想搜以特定字符开头（结尾）的行，可以这样：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &#39;^seven&#39; test.txt
seven eight one eight three
root@nm3:/ # grep &#39;seven$&#39; test.txt
 sixteen seventeen eighteen seven
        twenty seven
twentyseven
root@nm3:/ #&lt;/pre&gt;
&lt;p&gt;想要显示目标行的上下文吗？&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -C 1 twentyseven test.txt
#comment UP
twentyseven
        #comment down&lt;/pre&gt;
&lt;p&gt;到底是显示上文还是下文？&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -A 1 twentyseven test.txt
twentyseven
        #comment down
root@nm3:/ # grep -B 1 twentyseven test.txt
#comment UP
twentyseven&lt;/pre&gt;
&lt;p&gt;我们还可以这样玩grep：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &quot;twenty[1-4]&quot; test.txt
twenty1
twenty3&lt;/pre&gt;
&lt;p&gt;或者取非：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &quot;twenty[^1-4]&quot; test.txt
        twenty seven
twentyseven
twenty5
twenty7&lt;/pre&gt;
&lt;p&gt;grep是个强大的指令，除上述列举的之外，它还支持许多限定符、通配符以及正则表达式。下面是一些例子：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # cat /etc/resolv.conf
#options edns0
#nameserver 127.0.0.1
nameserver 8.8.8.8
nameserver 77.88.8.8
nameserver 8.8.4.4&lt;/pre&gt;
&lt;p&gt;只获取IP地址相关的行：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -E &quot;[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}&quot; /etc/resolv.conf
#nameserver 127.0.0.1
nameserver 8.8.8.8
nameserver 77.88.8.8
nameserver 8.8.4.4&lt;/pre&gt;
&lt;p&gt;上面的方法可行，但下面这种方法更好：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -E &#39;\b[0-9]{1,3}(\.[0-9]{1,3}){3}\b&#39; /etc/resolv.conf
#nameserver 127.0.0.1
nameserver 8.8.8.8
nameserver 77.88.8.8
nameserver 8.8.4.4&lt;/pre&gt;
&lt;p&gt;希望去掉注释行？&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -E &#39;\b[0-9]{1,3}(\.[0-9]{1,3}){3}\b&#39; /etc/resolv.conf | grep -v &#39;#&#39;
nameserver 8.8.8.8
nameserver 77.88.8.8
nameserver 8.8.4.4&lt;/pre&gt;
&lt;p&gt;只要IP：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -oE &#39;\b[0-9]{1,3}(\.[0-9]{1,3}){3}\b&#39; /etc/resolv.conf | grep -v &#39;#&#39;
127.0.0.1
8.8.8.8
77.88.8.8
8.8.4.4&lt;/pre&gt;
&lt;p&gt;哎呀，被注释掉的127.0.0.1又回来了，这是指令执行顺序不当导致的，怎么破？&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -v &#39;#&#39; /etc/resolv.conf | grep -oE &#39;\b[0-9]{1,3}(\.[0-9]{1,3}){3}\b&#39;
8.8.8.8
77.88.8.8
8.8.4.4&lt;/pre&gt;
&lt;p&gt;下面看下-v（反向查找）选项的使用。&lt;/p&gt;
&lt;p&gt;假设要执行指令“ps –afx | grep ttyv ”：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # ps -afx | grep ttyv
 1269 v1  Is+       0:00.00 /usr/libexec/getty Pc ttyv1
 1270 v2  Is+       0:00.00 /usr/libexec/getty Pc ttyv2
 1271 v3  Is+       0:00.00 /usr/libexec/getty Pc ttyv3
 1272 v4  Is+       0:00.00 /usr/libexec/getty Pc ttyv4
 1273 v5  Is+       0:00.00 /usr/libexec/getty Pc ttyv5
 1274 v6  Is+       0:00.00 /usr/libexec/getty Pc ttyv6
 1275 v7  Is+       0:00.00 /usr/libexec/getty Pc ttyv7
48798  2  S+        0:00.00 grep ttyv&lt;/pre&gt;
&lt;p&gt;OK，但是我们不需要“48798 2 S+ 0:00.00 grep ttyv”一行，使用-v：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # ps -afx | grep ttyv | grep -v grep
 1269 v1  Is+       0:00.00 /usr/libexec/getty Pc ttyv1
 1270 v2  Is+       0:00.00 /usr/libexec/getty Pc ttyv2
 1271 v3  Is+       0:00.00 /usr/libexec/getty Pc ttyv3
 1272 v4  Is+       0:00.00 /usr/libexec/getty Pc ttyv4
 1273 v5  Is+       0:00.00 /usr/libexec/getty Pc ttyv5
 1274 v6  Is+       0:00.00 /usr/libexec/getty Pc ttyv6
 1275 v7  Is+       0:00.00 /usr/libexec/getty Pc ttyv7&lt;/pre&gt;
&lt;p&gt;看着不爽？现在呢？&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # ps -afx | grep &quot;[t]tyv&quot;
 1269 v1  Is+       0:00.00 /usr/libexec/getty Pc ttyv1
 1270 v2  Is+       0:00.00 /usr/libexec/getty Pc ttyv2
 1271 v3  Is+       0:00.00 /usr/libexec/getty Pc ttyv3
 1272 v4  Is+       0:00.00 /usr/libexec/getty Pc ttyv4
 1273 v5  Is+       0:00.00 /usr/libexec/getty Pc ttyv5
 1274 v6  Is+       0:00.00 /usr/libexec/getty Pc ttyv6
 1275 v7  Is+       0:00.00 /usr/libexec/getty Pc ttyv7&lt;/pre&gt;
&lt;p&gt;别忘了| （或）符号：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # vmstat -z | grep -E &quot;(sock|ITEM)&quot;
ITEM                   SIZE  LIMIT     USED     FREE      REQ FAIL SLEEP
socket:                 696, 130295,      30,      65,   43764,   0,   0&lt;/pre&gt;
&lt;p&gt;殊途同归：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # vmstat -z | grep &quot;sock\|ITEM&quot;
ITEM                   SIZE  LIMIT     USED     FREE      REQ FAIL SLEEP
socket:                 696, 130295,      30,      65,   43825,   0,   0&lt;/pre&gt;
&lt;p&gt;许多人都会在grep中用正则表达式，但你仍会忘了用POSIX字符集，即便它们也非常有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POSIX：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;[:alpha:] Any alphabetical character, regardless of case
[:digit:] Any numerical character
[:alnum:] Any alphabetical or numerical character
[:blank:] Space or tab characters
[:xdigit:] Hexadecimal characters; any number or A–F or a–f
[:punct:] Any punctuation symbol
[:print:] Any printable character (not control characters)
[:space:] Any whitespace character
[:graph:] Exclude whitespace characters
[:upper:] Any uppercase letter
[:lower:] Any lowercase letter
[:cntrl:] Control characters&lt;/pre&gt;
&lt;p&gt;找有大写字母的行：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &quot;[[:upper:]]&quot; test.txt
#comment UP&lt;/pre&gt;
&lt;p&gt;搜索结构不够醒目？高亮显示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/08/2cd4b9810e028069a61cd23343072f8c.png&quot; rel=&quot;lightbox[75410]&quot; title=&quot;grep是什么？怎么用？&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-75455&quot; alt=&quot;grep1&quot; src=&quot;/images/jobbole.com/335b3eae428745e41d7f8e3ad5fcdaf2.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多的grep小窍门。第一个稍显专业，我已经15年没用过了。&lt;/p&gt;
&lt;p&gt;选择包含six，seven或者eight的行，很简单：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -E &quot;(six|seven|eight)&quot; test.txt
seven eight one eight three
 sixteen seventeen eighteen seven
sixteen seventeen eighteen
        twenty seven
twentyseven&lt;/pre&gt;
&lt;p&gt;那么现在只选择包含six，seven或者eight若干次的行。这种用法叫回溯引用：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -E &quot;(six|seven|eight).*\1&quot; test.txt
seven eight one eight three
 sixteen seventeen eighteen seven&lt;/pre&gt;
&lt;p&gt;第二个窍门，这个更有用一些。打印504前后有tab的行（如果PCRE能够支持这个特性就好了）。&lt;/p&gt;
&lt;p&gt;POSIX字符集在此失效了：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &quot;[[:blank:]]504[[:blank:]]&quot; test.txt
one 504 one
one     504     one
one     504 one&lt;/pre&gt;
&lt;p&gt;[CTRL+V][TAB]生效：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep &quot;     504     &quot; test.txt
one     504     one&lt;/pre&gt;
&lt;p&gt;我漏讲什么了吗？grep具备递归搜索文件/目录功能。如果我们想在源码目录中搜索允许Intel使用外部SFPs的代码，但是又没清楚完整地记着函数名allow_unsupported_stp和unsupported_allow_sfp。肿么办？这正是grep的菜：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true&quot;&gt;root@nm3:/ # grep -rni allow /usr/src/sys/dev/ | grep unsupp
/usr/src/sys/dev/ixgbe/README:75:of unsupported modules by setting the static variable &#39;allow_unsupported_sfp&#39;
/usr/src/sys/dev/ixgbe/ixgbe.c:322:static int allow_unsupported_sfp = TRUE;
/usr/src/sys/dev/ixgbe/ixgbe.c:323:TUNABLE_INT(&quot;hw.ixgbe.unsupported_sfp&quot;, &amp;amp;allow_unsupported_sfp);
/usr/src/sys/dev/ixgbe/ixgbe.c:542:     hw-&amp;gt;allow_unsupported_sfp = allow_unsupported_sfp;
/usr/src/sys/dev/ixgbe/ixgbe_type.h:3249:       bool allow_unsupported_sfp;
/usr/src/sys/dev/ixgbe/ixgbe_phy.c:1228:                                if (hw-&amp;gt;allow_unsupported_sfp == TRUE) {&lt;/pre&gt;
&lt;p&gt;希望你还没晕，因为这些grep用法只是grep的冰山一角呢！&lt;/p&gt;
&lt;p&gt;最后祝大家 Happy grepping！&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Wed, 20 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-20-75410-40a117b94.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-20-75410-40a117b94.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>黑客故事：如何接管Java/Clojure/Scala程序员的电脑</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;Sonatype已经对此帖做出了相应的反应，并在他们的&lt;a href=&quot;http://blog.sonatype.com/2014/07/ssl_connectivity_for_central/&quot; title=&quot;SSL Connectivity&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;上声明将会对所有的用户开启SSL链接。这变化让Java程序的生态系统变得更加安全可靠，我为此感到非常高兴。&lt;/p&gt;
&lt;p&gt;虽说如此，但如果当你看到这个博客，并考虑花10美元来评估你的产品是否需要这个安全性的需要时，答案是否定的。这就好比汽车公司决定花10美元来评估他们的汽车是否需要气囊。幸运的是，现实生活中汽车公司必须安装气囊。&lt;/p&gt;
&lt;p&gt;Sonatype的这次机制修改令我感到很开心，希望他们能够继续减少安全性与产品的冲突。对于我们开发者而已，为用户提供最安全的最有保障的产品是我们的责任。用户对于不能处理好产品与安全性的容忍度能有多大。&lt;/p&gt;
&lt;p&gt;有一天，我看到我的防火墙是这么设置的，于是我开始对我的一个Clojure项目进行入侵：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/8dc6daceea3036f60246b8ac26612f00.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后我通过80端口在 &lt;a href=&quot;http://repo.maven.apache.org/&quot; target=&quot;_blank&quot;&gt;http//repo.maven.apache.org&lt;/a&gt;下载了clojure.jar。这意味着我将能够通过一个未加密的http来下载包。我一开始认为这是&lt;a href=&quot;http://leiningen.org/&quot; target=&quot;_blank&quot;&gt;leiningen&lt;/a&gt;的&lt;a href=&quot;https://github.com/technomancy/leiningen/issues/1604&quot; target=&quot;_blank&quot;&gt;问题&lt;/a&gt;。但结果完全不是。Clojure.jar和其他许多的jar包在Java/Clojure/Scala领域都很重要，他们都会被正式的放在Sonatype提供的一个公共服务 -&lt;a href=&quot;http://search.maven.org/&quot; target=&quot;_blank&quot;&gt; Maven Central&lt;/a&gt;。&lt;a href=&quot;http://www.sonatype.com/&quot; target=&quot;_blank&quot;&gt;Sonatype&lt;/a&gt;有一个机制：只有那些拥有身份标识的人才允许SSL链接。你需要通过捐给Apache基金会十美元，才能获得身份标识和SSL链接。如果你不相信我说的话，捐赠的网页&lt;a href=&quot;http://www.sonatype.com/clm/secure-access-to-central&quot; target=&quot;_blank&quot;&gt;在这&lt;/a&gt;，此机制&lt;a href=&quot;http://www.sonatype.com/clm/secure-access-to-central&quot; target=&quot;_blank&quot;&gt;在此&lt;/a&gt;博客上声明。这里面甚至提到了中间人攻击。&lt;/p&gt;
&lt;p&gt;因为身份标识是针对个人或者组织分发，所以像maven或者leiningen这些工具不能绑定它。如果你使用这些工具，那么下载java程序或者安装它的一些依赖不会通过SSL。经过我在twitter和Sonatype的一个员工对此事进行了争论，确认了此事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/333163c5f60b55e668e873e4cc12e7f2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;你下载的jar包会来自中间人的，并且你执行的代码会被恶意软件替换过。要想阻止这类的事情发生，你需要小心的执行每一步操作，稍有不慎就会支付别人十美元。&lt;/p&gt;
&lt;p&gt;通常什么时候会发生这类事情？如果你曾链接过咖啡店的公共网络或者&lt;a href=&quot;https://ettercap.github.io/ettercap/&quot; target=&quot;_blank&quot;&gt;别人的无线网络&lt;/a&gt;，中间人就能和你通信了。你的网络服务提供者应能够随意的跟你通信，有的人这么做是为了打广告。或者，你也会还会遭受来自&lt;a href=&quot;http://www.renesys.com/2013/11/mitm-internet-hijacking/&quot; target=&quot;_blank&quot;&gt;国家操纵&lt;/a&gt;的这类攻击。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dilettante&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了证明这有多么容易，我写了一个中间人代理&lt;a href=&quot;https://github.com/mveytsman/dilettante&quot; target=&quot;_blank&quot;&gt;dilettante&lt;/a&gt;，它功能是拦截来自于maven central的JAR包然后再注入恶意代码进去。&lt;/p&gt;
&lt;p&gt;通过dilettante来代理http的传输，然后给任何在maven central下载的JAR包设置后门。那个设置了后门的版本同时会保留原有的功能，但是当他们使用的这个类库的时候，将会提示一个友好的信息。你可以&lt;a href=&quot;http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer/&quot; target=&quot;_blank&quot;&gt;看这个视频&lt;/a&gt;：&lt;br&gt;
或者截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/95eb51d5b251e469edde5cb3601a3ab3.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;源代码&lt;a href=&quot;https://github.com/mveytsman/dilettante&quot; target=&quot;_blank&quot;&gt;在这&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JAR包从maven central 下载的时候，由于是通过HTTP进行传输的，因此中间人可以随意的替换。JAR包是可以被标识的，但是根据我对于标准工具使用的经验，这些标识是不会被检查的。其他唯一的方法可以验证一个也是通过HTTP传输的SHA1和。当dilettante发现有JAR来自maven central，它将会把一个拥有后门的版本来替换成原来的。然后替换后的版本将会在受害者的电脑上运行恶意的代码。由于SHA1仅是通过HTTP传输，那么dilettante会简单地将它所能看到的所有哈希表替换成对应的拥有后面JAR包的哈希表。&lt;/p&gt;
&lt;p&gt;我用优秀的mitproxy类库来创建我的工具。我先为代理写一个inline script，然后又用libmproxy创建一个独立的工具。&lt;/p&gt;
&lt;pre class=&quot;brush: java; gutter: true&quot;&gt;package dilettante;

public class Dilettante {
    public static void() {
        // do some evil stuff
    }
}&lt;/pre&gt;
&lt;p&gt;JAR包只是一个包含资源，类和元数据的压缩包。我通过添加自己的类到JAR，从而给这个JAR设置了后门。&lt;/p&gt;
&lt;p&gt;稍微头疼的是想办法如何调用我的恶意代码。我知道受害者肯定会下载一些类库。然而我需要不管用户调用类库中的哪个类，它都能运行我的代码，并且还不能影响以前类库的正常使用。&lt;/p&gt;
&lt;p&gt;Java有静态类块这一概念，它能在类级别进行初始化。当类加载到内存的时候，静态类里面的代码会只被调用这一次。在我把恶意的类插入到Jar包之后，我就能像下面这样在静态块里面调用代码：&lt;/p&gt;
&lt;pre class=&quot;brush: java; gutter: true&quot;&gt;import dilettante.*;
static {
    Dilettante.backdoor();
}&lt;/pre&gt;
&lt;p&gt;为了插入上面的代码，我需要将它直接插入到Java  class里面，而不是source文件。我是使用&lt;a href=&quot;https://github.com/Storyyeller/Krakatau&quot; target=&quot;_blank&quot;&gt;Karakatau&lt;/a&gt;将代码以&lt;a href=&quot;http://jasmin.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Jasmin&lt;/a&gt;的格式插入进去。Karakatau是一个针对Python的Java 反编译/编译类库。&lt;/p&gt;
&lt;pre class=&quot;brush: java; gutter: true&quot;&gt;.method static &amp;lt;clinit&amp;gt; : ()V
  ; method code size: 4 bytes
  .limit stack 0
  .limit locals 0
  invokestatic dilettante/Dilettante backdoor ()V
  return
.end method&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;局限性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这只是个概念化的试验，同时它还是存在局限性。&lt;/p&gt;
&lt;p&gt;1.目前由于一些原因，它还不是很快：&lt;/p&gt;
&lt;p&gt;我必须进行反编译和编译。如果能够直接插入编译好的代码到类里面，那就更高效了。&lt;/p&gt;
&lt;p&gt;我实际上是通过使用Python的zipfile类库将压缩包的类文件都创建了个副本。从空间和速度方面而言，这是不高效的。如果能够更加了解zip的功能，可能会找到一个高效插入数据的方法。&lt;/p&gt;
&lt;p&gt;2.如果用户同时下载多个JAR包。那么我将会逐个设置后门。恶意的代码在每个JAR只会被执行一次。但是如果多个jar被设置了后门，那么它将会被执行多次。如果我们将那个猫的图片替换成一个高质量，稳定的后门并且它能够只影响系统一次，那么这个问题就不会再出现。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Tue, 19 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-19-75167-6caddfcf2.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-19-75167-6caddfcf2.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title> Access Control and protected </title>
        <description>

						
						

						&lt;p&gt;The response to support for access control in Swift has been extremely positive. However, some developers have been asking, “Why doesn’t Swift have something like &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;?” Many other programming languages have an access control option that restricts certain methods from being accessed from anywhere except subclasses.&lt;/p&gt;
&lt;p&gt;When designing access control levels in Swift, we considered two main use cases:&lt;/p&gt;
&lt;ul class=&quot;tight&quot;&gt;
&lt;li&gt;keep &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; details of a class hidden from the rest of the app&lt;/li&gt;
&lt;li&gt;keep &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; details of a framework hidden from the client app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These correspond to &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; and &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; levels of access, respectively.&lt;/p&gt;
&lt;p&gt;In contrast, &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; conflates access with inheritance, adding an entirely new control axis to reason about. It doesn’t actually offer any real protection, since a subclass can always expose “protected” API through a new public method or property. It doesn’t offer  additional optimization opportunities either, since new overrides can come from anywhere. And it’s unnecessarily restrictive — it allows subclasses, but not any of the subclass’s helpers, to access something.&lt;/p&gt;
&lt;p&gt;As some developers have pointed out, Apple frameworks do occasionally separate parts of API intended for use by subclasses. Wouldn’t &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; be helpful here? Upon inspection, these methods generally fall into one of two groups. First, methods that aren’t really useful outside the subclass, so protection isn’t critical (and recall the helper case above). Second, methods that are designed to be overridden but not called. An example is &lt;span class=&quot;keyword&quot;&gt;drawRect(_:)&lt;/span&gt;, which is certainly used within the UIKit codebase but is not to be called outside UIKit.&lt;/p&gt;
&lt;p&gt;It’s also not clear how &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; should interact with extensions. Does an extension to a class have access to that class’s protected members? Does an extension to a subclass have access to the superclass’s protected members? Does it make a difference if the extension is declared in the same module as the class?&lt;/p&gt;
&lt;p&gt;There was one other influence that led us to the current design: existing practices of Objective-C developers both inside and outside of Apple. Objective-C methods and properties are generally declared in a public header (.h) file, but can also be added in class extensions within the implementation (.m) file. When parts of a public class are intended for use elsewhere within the framework but not outside, developers create a second header file with the class’s “internal” bits. These three levels of access correspond to &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;, and &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; in Swift.&lt;/p&gt;
&lt;p&gt;Swift provides access control along a single, easy-to-understand axis, unrelated to inheritance. We believe this model is simpler, and provides access control the way it is most often needed: to isolate implementation details to within a class or within a framework. It may be different from what you’ve used before, but we encourage you to try it out.&lt;/p&gt;

						
												
											

</description>
        <pubDate>Tue, 19 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-19--id=11-d6318f574.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-19--id=11-d6318f574.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>用 ES 的 RangeFacets 接口实现一个查看区间占比的 Kibana 面板 </title>
        <description>

  
  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;公司用 kibana 的同事提出一个需求，希望查看响应时间在不同区间内占比的饼图。第一想法是用 1.3.0 新加的 percentile rank aggregation 接口。不过仔细想想，其实并不合适 —— 这个接口目的是计算固定的 &lt;code&gt;[0 TO $value]&lt;/code&gt; 的比例。不同的区间反而还得自己做减法来计算。稍微查了一下，更适合的做法是专门的 range aggregation。考虑到 kibana 内大多数还是用 facet 接口，这里也沿用：&lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-facets-range-facet.html&quot;&gt;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-facets-range-facet.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;range facet 本身的使用非常简单，就像官网示例那样，直接 curl 命令就可以完成调试：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
curl -XPOST http://localhost:9200/logstash-2014.08.18/_search?pretty=1 -d &#39;{
    &quot;query&quot; : {
        &quot;match_all&quot; : {}
    },
    &quot;facets&quot; : {
        &quot;range1&quot; : {
            &quot;range&quot; : {
                &quot;field&quot; : &quot;resp_ms&quot;,
                &quot;ranges&quot; : [
                    { &quot;to&quot; : 100 },
                    { &quot;from&quot; : 101, &quot;to&quot; : 500 },
                    { &quot;from&quot; : 500 }
                ]
            }
        }
    }
}&#39;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过在 kibana 里，我们就不要再自己拼 JSON 发请求了 —— 虽然之前我实现 percentile panel 的时候就是这么做的 —— 前两天合并了 github 上一个 commit 后，现在可以用高版本的 elastic.js 了，所以我也把原来用原生 &lt;code&gt;$http.post&lt;/code&gt; 方法写的 percentile panel 用 elastic.js 对象重写了。&lt;/p&gt;
&lt;p&gt;elastic.js 关于 range facet 的文档见：&lt;a href=&quot;http://docs.fullscale.co/elasticjs/ejs.RangeFacet.html&quot;&gt;http://docs.fullscale.co/elasticjs/ejs.RangeFacet.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为 range facet 本身比较简单，所以 RangeFacet 对象支持的方法也比较少。一个 &lt;code&gt;addRange&lt;/code&gt; 方法添加 ranges 数组，一个 &lt;code&gt;field&lt;/code&gt; 方法添加 field 名称，就没了。&lt;/p&gt;
&lt;p&gt;所以这个新 panel 的实现，更复杂的地方在如何让 range 范围值支持自定义填写。这一部分借鉴了同样是前两天合并的 github 上另一个第三方面板 multifieldhistogram 的写法。&lt;/p&gt;
&lt;p&gt;另一个需要注意的地方是饼图出来以后，单击饼图区域，自动生成的 &lt;code&gt;filterSrv&lt;/code&gt; 内容。一般的面板这里都是 &lt;code&gt;terms&lt;/code&gt; 类型的 &lt;code&gt;filterSrv&lt;/code&gt;，传递的是面板的 label 值。而我们这里 label 值显然不是 ES 有效的 terms 语法，还好 &lt;code&gt;filterSrv&lt;/code&gt; 有 &lt;code&gt;range&lt;/code&gt; 类型(histogram 面板的 &lt;code&gt;time&lt;/code&gt; 类型的 &lt;code&gt;filterSrv&lt;/code&gt; 是在 daterange 基础上实现的)，所以稍微修改就可以了。&lt;/p&gt;
&lt;p&gt;最终效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/chenlinux.com/346387fdd05063ce113983e8f47a4cab.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;面板的属性界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/chenlinux.com/7bd79c8c8c66f951098b2111084e5e25.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码已经上传到我个人 fork 的 kibana 项目里：&lt;a href=&quot;https://github.com/chenryn/kibana.git&quot;&gt;https://github.com/chenryn/kibana.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我这个 kibana 里已经综合了 8 个第三方面板或重要修改。在官方年底推出 4.0 版本之间，自觉还是值得推荐给大家用的。具体修改说明和效果图见 README。&lt;/em&gt;&lt;/p&gt;
    &lt;hr&gt;
    
    &lt;hr&gt;
  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;
  &lt;/div&gt;

</description>
        <pubDate>Mon, 18 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-18-intro-range-facet-and-implement-panel-for-it-9f5a65b7a.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-18-intro-range-facet-and-implement-panel-for-it-9f5a65b7a.html</guid>
        
        
        <category>chenlinux</category>
        
      </item>
    
      <item>
        <title>一个快速、高效的Levenshtein算法实现</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;Levenshtein算法，用于计算两个字符串之间的Levenshtein距离。而&lt;a href=&quot;http://baike.baidu.com/view/4123766.htm&quot; target=&quot;_blank&quot;&gt;Levenshtein&lt;/a&gt;距离又称为编辑距离，是指两个字符串之间，由一个转换成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。&lt;/p&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;Levenshtein距离用来描述两个字符串之间的差异。我在一个网络爬虫程序里面使用这个算法来比较两个网页之间的版本，如果网页的内容有足够多的变动，我便将它更新到我的数据库。&lt;/p&gt;
&lt;h2&gt;说明&lt;/h2&gt;
&lt;p&gt;原来的算法是创建一个大小为StrLen1*StrLen2的矩阵。如果所有字符串加起来是1000个字符那么长的话，那么这个矩阵就会是1M；如果字符串是10000个字符，那么矩阵就是100M。如果元素都是整数（这里是指数字，Int32）的话，那么矩阵就会是4*100M == 400MB这么大，唉……&lt;/p&gt;
&lt;p&gt;现在的算法版本只使用2*StrLen个元素，这使得后面给出的例子成为2*10,000*4 = 80 KB。其结果是，不但内存占用更少，而且速度也变快了！因为这使得内存分配只需要很少的时间来完成。当两个字符串的长度都是1k左右时，新算法的效率是旧算法的两倍！&lt;/p&gt;
&lt;h2&gt;示例&lt;/h2&gt;
&lt;p&gt;原来的版本将会创建一个矩阵[6+1, 5+1]，而我的新算法将会创建两个向量[6+1]（黄色元素）。在这两个算法版本中，字符串的顺序是无关紧要、无所谓的，也就是说，它也可以是矩阵[5+1, 6+1]和两个向量[5+1]。&lt;/p&gt;
&lt;h2&gt;新的算法&lt;/h2&gt;
&lt;h3&gt;步骤&lt;/h3&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;1&quot; cellpadding=&quot;2&quot; align=&quot;center&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th bgcolor=&quot;#ffffcc&quot;&gt;步骤&lt;/th&gt;
&lt;th bgcolor=&quot;#ffffcc&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;1&lt;/td&gt;
&lt;td&gt;设置n为字符串s的长度。(“GUMBO”)&lt;br&gt;
设置m为字符串t的长度。(“GAMBOL”)&lt;br&gt;
如果n等于0，返回m并退出。&lt;br&gt;
如果m等于0，返回n并退出。&lt;br&gt;
构造两个向量v0[m+1] 和v1[m+1]，串联0..m之间所有的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;2&lt;/td&gt;
&lt;td&gt;初始化 v0 to 0..m。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;3&lt;/td&gt;
&lt;td&gt;检查 s (i from 1 to n) 中的每个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;4&lt;/td&gt;
&lt;td&gt;检查 t (j from 1 to m) 中的每个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;5&lt;/td&gt;
&lt;td&gt;如果 s[i] 等于 t[j]，则编辑代价为 0；&lt;br&gt;
如果 s[i] 不等于 t[j]，则编辑代价为1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;6&lt;/td&gt;
&lt;td&gt;设置单元v1[j]为下面的最小值之一：&lt;br&gt;
a、紧邻该单元上方+1：v1[j-1] + 1&lt;br&gt;
b、紧邻该单元左侧+1：v0[j] + 1&lt;br&gt;
c、该单元对角线上方和左侧+cost：v0[j-1] + cost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;7&lt;/td&gt;
&lt;td&gt;在完成迭代 (3, 4, 5, 6) 之后，v1[m]便是编辑距离的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;本小节将演示如何计算”GUMBO”和”GAMBOL”两个字符串的Levenshtein距离。&lt;/p&gt;
&lt;h4&gt;步骤1、2&lt;/h4&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;6&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;步骤3-6，当 i = 1&lt;/h4&gt;
&lt;p&gt; &lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;6&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;步骤3-6，当 i = 2&lt;/h4&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;步骤3-6，当 i = 3&lt;/h4&gt;
&lt;p&gt; &lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;步骤3-6，当 i = 4&lt;/h4&gt;
&lt;p&gt; &lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;步骤3-6，当 i = 5&lt;/h4&gt;
&lt;p&gt; &lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v0&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;3&lt;/td&gt;
&lt;td bgcolor=&quot;yellow&quot;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;步骤7&lt;/h4&gt;
&lt;p&gt;编辑距离就是矩阵右下角的值，v1[m] == 2。由”GUMBO”变换为”GAMBOL”的过程对于我来说是很只管的，即通过将”A”替换为”U”，并在末尾追加”L”这样子（实际上替换的过程是由移除和插入两个操作组合而成的）。&lt;/p&gt;
&lt;h2&gt;改良&lt;/h2&gt;
&lt;p&gt;如果您确信你的字符串永远不会超过2^16（65536）个字符，那么你可以使用ushort来表示而不是int，如果字符串少于2^8个，还可以使用byte。我觉得这个算法用非托管代码实现的话可能会更快，但我没有试过。&lt;/p&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.merriampark.com/ld.htm&quot; target=&quot;_blank&quot;&gt;Levenshtein Distance, in Three Flavors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;下载代码请前往原文：&lt;a href=&quot;http://www.codeproject.com/Articles/13525/Fast-memory-efficient-Levenshtein-algorithm&quot;&gt;http://www.codeproject.com/Articles/13525/Fast-memory-efficient-Levenshtein-algorithm&lt;/a&gt;&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Mon, 18 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-18-75496-98e05ea76.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-18-75496-98e05ea76.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>Vagrant介绍</title>
        <description>

	
	

	&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/3a784269d7a14c662d09ad64711997df.jpg&quot; title=&quot;Vagrant&quot; alt=&quot;Vagrant&quot;&gt;&lt;/p&gt;

&lt;h1&gt;介绍&lt;/h1&gt;

&lt;p&gt;Vagrant可以为你提供可配置、可再生、便携的工作环境，它主要是一个中间层技术，它的下层是VirtualBox, VMware, AWS或者其他&lt;a href=&quot;http://docs.vagrantup.com/v2/providers/&quot;&gt;provider&lt;/a&gt;，它的上层是&lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/&quot;&gt;provisioning工具&lt;/a&gt;，比如shell scripts, Chef, or Puppet等可以自动化安装和配置软件的工具。&lt;/p&gt;

&lt;h1&gt;对你有什么用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于开发人员来说，Vagrant可以帮你统一团队成员的开发环境。如果你或者你的伙伴创建了一个&lt;a href=&quot;http://docs.vagrantup.com/v2/vagrantfile/&quot;&gt;Vagrantfile&lt;/a&gt;，那么你只需要执行&lt;code&gt;vagrant up&lt;/code&gt;就行了，所有的软件都会安装并且配置好。团队成员可以通过相同的Vagrantfile来创建他们的开发环境，无论他们是在Linux, Mac OS X, 或者Windows下，这样就可以保证你团队成员的代码是跑在相同的环境中，从而避免令人烦躁的【在我的机器上是可以的】问题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于运维人员来说，Vagrant可以给你提供一次性，并且与线上一致的服务器环境，你可以利用VirtualBox或者VMware来测试你的shell scripts, Chef cookbooks, Puppet modules等管理脚本。你不需要再苦逼的登录到线上服务器提心吊胆的测试了，Vagrant可以解救你。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于设计人员来说，Vagrant可以帮你处理一切，你只需要专注在设计上就好了。一旦开发人员帮你配置好了Vagrant之后，你只需要执行&lt;code&gt;vagrant up&lt;/code&gt;，然后开始设计。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;安装&lt;/h1&gt;

&lt;p&gt;Vagrant的安装非常简单，直接&lt;a href=&quot;http://www.vagrantup.com/downloads&quot;&gt;下载&lt;/a&gt;对应操作系统的版本就可以了。&lt;/p&gt;

&lt;h1&gt;第一印象&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant init hashicorp/precise32
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以上命令之后，你已经拥有了一个Ubuntu 12.04 LTS 32-bit系统运行在VirtualBox中。
你可以通过&lt;code&gt;vagrant ssh&lt;/code&gt;登录到这个虚拟机中，如果你不需要它了，可以通过&lt;code&gt;vagrant destroy&lt;/code&gt;来销毁。&lt;/p&gt;

&lt;h1&gt;建立项目&lt;/h1&gt;

&lt;p&gt;建立Vagrant项目的第一步是配置Vagrantfile。执行如下命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir my_vagrant
$ cd my_vagrant
$ vagrant init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会在当前目录下生成一个Vagrantfile文件，这个文件就是一切的开始，对了，你最好把它添加到版本库中，这样你的小伙伴也可以通过它来初始化开发环境了。&lt;/p&gt;

&lt;h1&gt;Box&lt;/h1&gt;

&lt;p&gt;Vagrant使用的image叫做box，如果你执行过上面的命令，那么你已经在本地拥有了一个box。如果没有执行，那么你需要执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box add hashicorp/precise32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会从&lt;a href=&quot;https://vagrantcloud.com/&quot;&gt;Vagrant Cloud&lt;/a&gt;中下载hashicorp/precise32。
我们接下来需要配置我们的项目来使用这个box，编辑Vagrantfile文件并修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;hashicorp/precise32&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了hashicorp/precise32，你可以在Vagrant Cloud找到更多适合你的box。&lt;/p&gt;

&lt;h1&gt;启动&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就这么简单。完成之后，你就拥有了一个Ubuntu系统，你可以通过&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登录它，然后随意执行任何命令，除了&lt;code&gt;rm -rf /&lt;/code&gt;，原因接下来说明。&lt;/p&gt;

&lt;h1&gt;目录同步&lt;/h1&gt;

&lt;p&gt;虽说如此容易的启动一个虚拟机的确很酷，但不是所有人都喜欢通过终端来编辑文件（Vim党和Emacs党勿喷），所以Vagrant提供了一个目录同步的功能。默认情况下Vagrant会把你的项目目录（存储Vagrantfile的那个）与虚拟机中的&lt;code&gt;/vagrant&lt;/code&gt;进行同步（这就是为什么你不要执行&lt;code&gt;rm -rf /&lt;/code&gt;的原因，否则你会把项目目录删掉）。我们可以登录到虚拟机上验证一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
...
$ vagrant ssh
...
vagrant@precise32:~$ ls /vagrant
Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不确信，可以创建一个文件看看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@precise32:~$ touch /vagrant/foo
vagrant@precise32:~$ exit
$ ls
foo Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;怎么样？没骗你吧。通过目录同步功能，你还可以继续使用最爱的编辑器来修改虚拟机中的文件。&lt;/p&gt;

&lt;h1&gt;配置&lt;/h1&gt;

&lt;p&gt;假设我们的业务需要安装Apache，传统的做法是在虚拟机上手动安装并配置，如果这样那么使用Vagrant的人都需要重复一遍。幸好Vagrant提供了自动配置（automated provisioning）的功能。通过这个特性，Vagrant会在你执行&lt;code&gt;vagrant up&lt;/code&gt;的时候自动安装所需的软件。&lt;/p&gt;

&lt;p&gt;在你的项目目录（即包含Vagrantfile的目录）下创建Bash脚本bootstrap.sh，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

apt-get update
apt-get install -y apache2
rm -rf /var/www
ln -fs /vagrant /var/www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，我们来配置让Vagrant在启动虚拟机的时候自动执行以上脚本，在Vagrantfile中添加如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;hashicorp/precise32&quot;
  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;provision这一行告诉Vagrant使用shell provisioner来配置虚拟机，要执行的脚本是bootstrap.sh。&lt;/p&gt;

&lt;p&gt;接下来执行&lt;code&gt;vagrant up&lt;/code&gt;来启动虚拟机，之后你可以登录到虚拟机来验证Apache时候已经安装成功：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
...
vagrant@precise32:~$ wget -qO- 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;网络&lt;/h1&gt;

&lt;p&gt;总是在终端里边访问Apache不是什么好的主意，所以这个部分我们会对Vagrant的网络进行配置，让它可以通过宿主机器（Host machine）来访问。&lt;/p&gt;

&lt;p&gt;我们用端口映射来实现对Apache服务的访问，编辑Vagrantfile文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.box = &quot;hashicorp/precise32&quot;
  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;
  config.vm.network :forwarded_port, host: 4567, guest: 80
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;forwarded_port&lt;/code&gt;这一行把宿主机器的4567端口映射到了客户机器（Guest machine）的80端口。然后通过&lt;code&gt;vagrant reload&lt;/code&gt;重启虚拟机，重启完成之后你用浏览器打开
http://127.0.0.1:4567就可以访问到WEB页面了。&lt;/p&gt;

&lt;h1&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/getting-started/index.html&quot;&gt;http://docs.vagrantup.com/v2/getting-started/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/getting-started/project_setup.html&quot;&gt;http://docs.vagrantup.com/v2/getting-started/project_setup.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/getting-started/boxes.html&quot;&gt;http://docs.vagrantup.com/v2/getting-started/boxes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/getting-started/up.html&quot;&gt;http://docs.vagrantup.com/v2/getting-started/up.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/getting-started/provisioning.html&quot;&gt;http://docs.vagrantup.com/v2/getting-started/provisioning.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


	(完)

	&lt;div class=&quot;post-info&quot;&gt;
		17 Aug 2014  
	
		
	
		
	&lt;/div&gt;
	
	&lt;!-- disqus start --&gt;
	
	
	
	
	&lt;!-- disqus end --&gt;

	&lt;!-- related start --&gt;
	
	&lt;!-- related end --&gt;

</description>
        <pubDate>Sun, 17 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-17-learn-vagrant-01.html-f54d13727.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-17-learn-vagrant-01.html-f54d13727.html</guid>
        
        
        <category>weizhifeng</category>
        
      </item>
    
      <item>
        <title>让你的Git水平更上一层楼的10个小贴士</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;最近，我们发表了关于&lt;a href=&quot;http://www.sitepoint.com/git-for-beginners/&quot;&gt;Git基础知识&lt;/a&gt;和&lt;a href=&quot;http://www.sitepoint.com/getting-started-git-team-environment/&quot;&gt;在团队中使用Git&lt;/a&gt;的教程。我们之前讨论的那些命令，已经足够让帮助一个开发者在Git世界里生存了。本篇文章，我们将尝试探索如何更有效的管理您的时间以及如何充分使用Git提供的各种功能。&lt;/p&gt;
&lt;p&gt;注意：本文中，一些命令包含含有方括号的部分(e.g.&lt;code&gt;git add -p [file_name]&lt;/code&gt;).在这些例子中，您要在该处插入所需的数字，标示符等。而不需要保留方括号。&lt;/p&gt;
&lt;h2&gt;1.Git自动补全&lt;/h2&gt;
&lt;p&gt;如果你在命令行中使用Git命令，每次手动输入命令是一件非常烦人的。为了解决这个问题，你可以很方便的开启自动补全功能。&lt;br&gt;
在Unix系统下，运行以下指令来获取脚本：&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;cd ~
curl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash&lt;/pre&gt;
&lt;p&gt;然后，在您的&lt;code&gt;~/.bash_profile&lt;/code&gt;文件中添加以下代码：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi&lt;/pre&gt;
&lt;p&gt;尽管我之前就提到过，在这里我仍要不厌其烦的说：如果你想使用Git提供的全部功能，你肯定是需要转而使用命令行来操作的。&lt;/p&gt;
&lt;h2&gt;2.在Git中忽略文件&lt;/h2&gt;
&lt;p&gt;你是否对出现在你Git仓库中的已编译文件（比如&lt;code&gt;.pyc&lt;/code&gt;）感到厌烦？&lt;br&gt;
亦或是你已经对把它们加入Git中这件事感到忍无可忍了？&lt;br&gt;
眼下就有一个可以让Git忽略特定文件或是目录的方法。只需要简单的创建一个&lt;code&gt;.gitignore&lt;/code&gt;文件，然后列出你不想让Git跟踪的文件和目录即可。你可以使用感叹号(!)来指出例外的情况。&lt;/p&gt;
&lt;pre class=&quot;brush: text; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;*.pyc
*.exe
my_db_config/

!main.pyc&lt;/pre&gt;
&lt;h2&gt;3.谁动了我的代码？&lt;/h2&gt;
&lt;p&gt;出了问题后去责怪别人，是人类的天性。如果你的成品服务器出了问题，你可以非常轻松的把坏人揪出来——只需要使用&lt;code&gt;git blame&lt;/code&gt;命令。&lt;br&gt;
这个命令会显示文件中每一行的作者，最后一次改动后进行的提交(commit)以及该次提交的时间戳。。&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git blame [file_name]&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/6b3e5f1146d3df53ebfc586bb41081b7.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;下图中，你可以看到在一个大型仓库中使用该命令是什么样子的。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/91c14843dcbe3464bb34fc786360c6bb.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;4.回顾仓库历史&lt;/h2&gt;
&lt;p&gt;在之前的教程中，我们了解了&lt;code&gt;git log&lt;/code&gt;命令的用法，然而，它还有三个选项，你应该了解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--oneline&lt;/code&gt;——把每次提交间显示的信息压缩成缩减的hash值和提交信息，在一行显示。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--graph&lt;/code&gt;——该选项会在输出界面的左手边用一种基于文本的图形表示法来显示历史。&lt;br&gt;
如果你只是浏览一个单独分支的历史，那么这个功能是没有用的。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--all&lt;/code&gt;——显示全部分支的历史&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里是以上命令综合使用的效果。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/e34c063302188f8422aac1a6070de8ed.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;5.绝不丢失一个提交信息&lt;/h2&gt;
&lt;p&gt;比方说，你提交了一个你不想要提交的代码，最后你通过使用硬重置(hard reset)使其回到了之前的状态。稍后，你意识到，在这个过程中你丢失了一些其他的信息，并想要退回或是至少能看一眼。&lt;code&gt;git reflog&lt;/code&gt;命令可以帮你做到这一点。&lt;/p&gt;
&lt;p&gt;一个简单的&lt;code&gt;git log&lt;/code&gt;命令，显示你最近的提交信息，以及上一次，再上一次的提交信息，以此类推。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;git reflog&lt;/code&gt;显示的是所有head移动的信息。记住，它是在本地的，而不是你仓库的一部分，不会包含在推送(push)和合并中(merge)。&lt;br&gt;
如果我使用&lt;code&gt;git log&lt;/code&gt;，我得到的提交信息是我的仓库的一部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/87201bf9ff9fe488b655e8508ac6ebaf.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;然而&lt;code&gt;git reflog&lt;/code&gt;显示了一个提交信息（&lt;code&gt;b1b0ee9&lt;/code&gt; – &lt;code&gt;HEAD@{4}&lt;/code&gt;），这是我使用硬重置(hard reset)时丢失的那个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/16b4fd76f9d0ddd4df62a830dc249ce3.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;6.暂存一个文件的部分改动&lt;/h2&gt;
&lt;p&gt;通常来讲，创建一个基于特性的提交是一个良好的做法，就是说，每次提交都必须代表一个新特性的产生或者是一个bug的修复。考虑一下，如果你修复了两个bug，或是添加了多个新特性但是却没有提交这些变化会怎样呢？在这种情况下，你可以把这些变化放在一次提交中。但是还有一个更好的方法：把文件分别暂存(Stage)然后分别提交。&lt;/p&gt;
&lt;p&gt;比如说，你对一个文件进行了多次修改并且想把他们分别提交。这种情况下，你可以在添加命令(&lt;code&gt;add&lt;/code&gt;)中加上&lt;code&gt;-p&lt;/code&gt;选项&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git add -p [file_name]&lt;/pre&gt;
&lt;p&gt;让我们演示一下。我在&lt;code&gt;file_name&lt;/code&gt;文件中添加了3行文字，而且我只想提交第一行和第三行。我们先看一下&lt;code&gt;git diff&lt;/code&gt;显示的结果。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/e8415c3ccb47af4a1f1318b01d36b559.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，我们看一下，在添加命令(add)中加上&lt;code&gt;-p&lt;/code&gt;选项后会发生什么。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/6b26c180647c3f45664ef5d04400183a.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;看上去，Git假定所有的改变都是针对同一件事情的，因此它把这些都放在了一个块里。你有如下几个选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入&lt;code&gt;y&lt;/code&gt;来缓存该块&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;n&lt;/code&gt;不缓存该块&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;e&lt;/code&gt;来人工编辑该块&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;d&lt;/code&gt;来退出或进入下一个文件&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;s&lt;/code&gt;来分割这个块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对我们而言，我们肯定希望把它分成几个部分，有选择的添加一部分而忽略其他的。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/72b09d1bd7cdcbdbd6dd7c7a2c0482bb.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，我们添加了第一行和第三行而忽略了第二行。你可以在之后查看仓库状态并进行提交。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/fd320c663ebd8d06bf7623b8a8f303d0.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;7.合并多次提交&lt;/h2&gt;
&lt;p&gt;当你提交你的代码进行审核并创建一个pull request时(在开源项目中常常发生这样的情况)，你经常会在代码被采纳前，要求修改一些代码。你进行了一些修改，而在下一次审核中，又会被要求进行另外的修改。你不知道还有多少次修改等着你，在你知道以前，你进行了多次额外的提交。理想的状态是，你可以使用&lt;code&gt;rebase&lt;/code&gt;命令，把他们都合并成一次提交。&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git rebase -i HEAD~[number_of_commits]&lt;/pre&gt;
&lt;p&gt;如果你希望合并最后两次提交，您需要以下命令&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git rebase -i HEAD~2
&lt;/pre&gt;
&lt;p&gt;使用该命令，你会进入一个交互式的界面，显示了最后两次提交，并且询问你要压缩哪些。理想状态是你&lt;code&gt;pick&lt;/code&gt;最近的一次提交并把它和之前的提交&lt;code&gt;squash&lt;/code&gt;。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/9e903d23d408f3843347825101e47f3d.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下来你会被要求为合并后的这次提交填写描述信息。这一个过程实际上重写了你的提交历史。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/9e903d23d408f3843347825101e47f3d.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;8.保存尚未提交的改动&lt;/h2&gt;
&lt;p&gt;比方说你正在解决一个bug或是添加某个新功能，这时你突然被要求展示你的工作。你当前的工作还没有完成到进行提交的地步，而且你在这个阶段也没办法展示你的工作（如果不回退所有变化的话）。在这种情况下，&lt;code&gt;git stash&lt;/code&gt;可以拯救你。stash命令本质上是保存了你全部的改动以供将来使用。保存你的改动，你只需要运行如下命令：&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git stash&lt;/pre&gt;
&lt;p&gt;查看暂存列表，你可以运行如下命令：&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git stash list&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/a37cb041871952537678e1a1347f2364.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你不想保存了或是想要恢复这些改动，你使用如下命令：&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git stash apply&lt;/pre&gt;
&lt;p&gt;在最后一张截图中，你可以看到，每一次保存都有一个标示符，一个独一无二的数字（尽管我们此处只有一次保存），万一你只想使用某些保存，你需要在&lt;code&gt;apply&lt;/code&gt;命令后指明标示符。&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git stash apply stash@{2}&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/218a4fe2c22652d0f144bfc63541c810.jpg&quot;&gt;&lt;/p&gt;
&lt;h2&gt;9.检查丢失的提交&lt;/h2&gt;
&lt;p&gt;尽管&lt;code&gt;reflog&lt;/code&gt;是一种查看丢失提交的方法，但是它在大型仓库中行不通。这时就该&lt;code&gt;fsck&lt;/code&gt;&lt;br&gt;
(file system check)出场了。&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git fsck --lost-found&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/025d8cdcf910f029a695ff814a78e024.jpg&quot;&gt;&lt;br&gt;
这里你可以看到丢失的提交，你可以使用&lt;code&gt;git show [commit_hash]&lt;/code&gt;来查看这些提交所包含的改动或者是使用&lt;code&gt;git merge [commit_hash]&lt;/code&gt;来恢复它。&lt;br&gt;
&lt;code&gt;git fsck&lt;/code&gt;比&lt;code&gt;reglog&lt;/code&gt;有一个优势。比如你删除了一个远端分支并且克隆了仓库，使用&lt;code&gt;fsck&lt;/code&gt;命令你可以搜索并恢复该远端分支。&lt;/p&gt;
&lt;h2&gt;10.cherry-pick命令&lt;/h2&gt;
&lt;p&gt;我把最优雅的Git命令留在了最后。&lt;code&gt;cherry-pick&lt;/code&gt;是我最爱的Git命令，因为它的名字就意味着它的功能！&lt;/p&gt;
&lt;p&gt;简而言之，&lt;code&gt;cherry-pick&lt;/code&gt;是指从不同的分支里选择某次提交并且把它合并到当前的分支来。如果你在并行的开发某两个或多个分支，你可能会注意到有一个bug存在于所有的分支中。如果你在一个分支中解决了它，你可以使用&lt;em&gt;cherry-pick&lt;/em&gt;来把这次提交合并进其他的分支而不会搞乱其他的文件或是提交。&lt;/p&gt;
&lt;p&gt;让我们想象一个可以使用该命令的场景。我有两个分支，并且我想要把&lt;code&gt;b20fd14: Cleaned junk&lt;/code&gt;这次提交使用&lt;em&gt;cherry-pick&lt;/em&gt;的方法放入到另一个分支。&lt;br&gt;
&lt;img src=&quot;/images/jobbole.com/bc31cd847e25f8d60114bfedfd296c95.jpg&quot;&gt;&lt;br&gt;
我切换到我想要放入该提交的分支，然后运行如下命令：&lt;/p&gt;
&lt;pre class=&quot;brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;git cherry-pick [commit_hash]&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/jobbole.com/48c03cbbf8b0fe9804fa50a17217038c.jpg&quot;&gt;&lt;br&gt;
尽管我们本次使用&lt;code&gt;cherry-pick&lt;/code&gt;没什么问题，但是你应该清楚这个命令会带来冲突，请谨慎使用。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;说着说着我们就来到了文章的末尾，我认为这些技巧会让你的Git水平更上一层楼。&lt;br&gt;
Git是最棒的，只要你能想得到，它就能做得到。&lt;br&gt;
因此，要经常挑战自己的Git水平。最后你很有可能会学到新的东西。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Sun, 17 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-17-75348-c0b370f73.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-17-75348-c0b370f73.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>黑客入侵后，重新夺回我的网站</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;自2012年3月开始我就一直运营的一个网站：RamshackleGlam.com 在上周被别人给盗了。它被一个叫“bahbouh”的家伙放到了一个名叫Flippa.com的拍卖网站上，差点就被卖给了出价最高的竞争者（大概3万刀的样子）。他答应给竞标人提供我的流量、文件以及数据，并且建议我可以受雇佣的形式继续写文章（或者说，他希望提供给竞标人“高质量的文章”和“SEO(搜索引擎优化)建议”来维持网站的流量售后服务）。&lt;/p&gt;
&lt;p&gt;我是在上周六意识到我的网站被盗的。三天过后我把它给找了回来，而这中间经历了6个部门，超过50多名雇员的参与，和律师们的午夜会议，FBI的介入，以及一个诱捕行动——可能在Sandra Bullock主演的影片中出现过，只不过这次主角换成了…我。&lt;/p&gt;
&lt;p&gt;当然，我之前就听说过身份盗用以及网络黑客的故事，但说实话，当这些事情发生在我身上时我的第一反应就是“这不可能！”即便是在发生后，我也没有完全弄懂为什么这是一件非常严重的事情。你（指黑客）难道就不能给我解释一下到底发生了什么事情，证明你是谁，怎么安排了这一切吗？！我们生活在这样一个高度被记录的世界，我完全想象不到有人能够伪装成别人带走任何真实的东西最后却全身而退，仅仅留下几个电话和我的一些懊恼。&lt;/p&gt;
&lt;p&gt;这非常非常糟糕——它让我更惊恐、沮丧、难以适应——超乎了我的想象。&lt;/p&gt;
&lt;p&gt;我从父亲那里找到了黑客的痕迹。他的朋友Anthony（也是他在&lt;a href=&quot;http://www.store.proitalia.com/&quot;&gt;Pro Italia Online&lt;/a&gt;上的合伙人，经营着一家名叫&lt;a href=&quot;http://thoughtbox.net/&quot;&gt;ThoughtBox&lt;/a&gt;的网站开发和咨询公司）曾经在Flippa上面浏览过——现在来看真是非常的巧——并发现了我的网站被放在了上面，并且列着一大堆可疑的清单。突然，我记起了在那天之前收到的一封邮件——它被我我当作垃圾邮件忽视掉了——来自于某人，说他“有兴趣购买”我的“博客”。我记得一个来自于YouTube的通知，有人在别处访问了我的账户——而我忽略了，上面说我登陆了一个移动设备，当时我以为是我的丈夫偶然登陆了我的账户。&lt;/p&gt;
&lt;p&gt;但即便在我看到清单之后，我也没有在意：这看上去就像什么东西用几封邮件就能定下来一样。只是那个拍卖网站被定位在澳大利亚，并且没有联系电话，而当我发送了一封附带身份证复印件和网站的所有权证明后得到的却是一封打印信件。我询问了HostMonster——我花钱让他们运营我的网站，悲剧的发现我已经不再是我的网站的拥有者了：有人用他们的邮箱验证系统授权了我的域名转移给一个在GoDaddy（另外一个web注册服务，我也是他们的客户）上的私人账户。&lt;/p&gt;
&lt;h4&gt;为什么事情很严重？&lt;/h4&gt;
&lt;p&gt;如果你有一个依赖于URL的业务，你就会明白为什么这是一个非常让人沮丧的新闻：通过控制我的网站的域名，一个黑客就可以将这个网站完全拿下，或者将其重定向至任何地方。进一步讲，后来被证实这个黑客也同样控制了网站上的所有内容；他可以将我写的东西改道发送至任何他想要到的地方。&lt;/p&gt;
&lt;p&gt;Ramshackle Glam可能“仅仅”是一个关于育儿、时尚和装饰的生活类博客，但这也是我花了五年的时间苦心经营的一个网站，而它却落到了某些不坏好意的人手中，这伤透了我的心。我本可以转移到一个新的URL，并导出我所都的内容到那上面（我确实做了备份），但这会让我损失大量的流量。这个网站可是我的主要收入来源，它关系到&lt;a href=&quot;http://www.ramshackleglam.com/2012/08/13/jordan-in-the-house-moving-day/&quot;&gt;我的房子&lt;/a&gt;，我的&lt;a href=&quot;http://www.ramshackleglam.com/2011/10/22/this-is-the-first-day/&quot;&gt;两个孩子&lt;/a&gt;（&lt;a href=&quot;http://www.ramshackleglam.com/2014/01/13/here-we-go-again/&quot;&gt;另一个&lt;/a&gt;马上就要出生了），我这周即将要出版的&lt;a href=&quot;http://www.amazon.com/Ramshackle-Glam-Haphazard-Almost-Having/dp/0762453044/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1396361642&amp;amp;sr=1-1&amp;amp;keywords=ramshackle+glam&quot;&gt;一本书&lt;/a&gt;，和我在工商学院的&lt;a href=&quot;http://www.ramshackleglam.com/2013/08/06/developments-and-exciting-things/&quot;&gt;老公&lt;/a&gt;，这可不是开玩笑。失去这个URL很可能会对我的事业和生活造成实实在在的打击。&lt;/p&gt;
&lt;h4&gt;所以我做了什么？&lt;/h4&gt;
&lt;p&gt;这个事件之后的接下来几天很复杂，所以我会解释我所走的每一步到最后导致的结果（我会详细的描述细节，希望能为那些有类似经历的人提供帮助）。&lt;/p&gt;
&lt;h5&gt;1、我试图直接通过GoDaddy和HostMonster来解决问题，但这不管用。&lt;/h5&gt;
&lt;p&gt;从周日到周二，我花了大量的时间（而且很多都是在晚上）与GoDaddy和HostMonster进行电话沟通，而几乎所有的人都给了我同样的回答：“对不起，我们对此无能为力。”&lt;/p&gt;
&lt;p&gt;HostMonster坚持认为由于他们不再控制这个域名，他们就没有什么能做的了。GoDaddy则认为由于该账户是私人的，并且那个人通过HostMonster的转移获取了域名的所有权，所以他们也不能做什么。&lt;/p&gt;
&lt;p&gt;要说最后有什么进展：我引用了&lt;a href=&quot;http://www.ramshackleglam.com/2013/08/06/developments-and-exciting-things/&quot;&gt;ICANN的关于域名的争端解决方案&lt;/a&gt;。这让我的案子升级了，但这也并没有导致什么实际行动。&lt;/p&gt;
&lt;p&gt;原因在此：HostMonster的法律部门向我告知，他们启动转让纠纷需要以GoDaddy向我返还域名为前提，他们的“内部调查”才能找出证据证明在释放网站的过程中出现了哪些问题。换句话说，他们到时候就不得不承认他们把事情给搞砸了…而这将打开对他们的诉讼。&lt;/p&gt;
&lt;p&gt;不用说，我不会再听什么法律部门的胡扯了。尽管乍一看大家好像都是清白的，但事实是我拥有的网站在没经我授权的情况下被转移了，要是我不启动一个耗时且费钱的诉讼我将什么也做不了，总之，这些都不能很快挽回我那个即将要被出售的网站。&lt;/p&gt;
&lt;p&gt;所以这条道走不通了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ramshackleglam.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-31-at-10.15.47-PM.png&quot; rel=&quot;lightbox[75334]&quot; title=&quot;黑客入侵后，重新夺回我的网站&quot;&gt;&lt;img alt=&quot;Screen Shot 2014-03-31 at 10.15.47 PM&quot; src=&quot;/images/jobbole.com/925710ec858fc419c9e156117cfe6d61.jpg&quot; width=&quot;552&quot; height=&quot;73&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #888888;&quot;&gt;译者注：如果你的域名在未经你授权的情况下被转移了，让支持人员告诉注册热线，说你有一个TEAC的适用场景并且需要立刻联系主管人。&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;2、我联系了FBI。这是我在正确的方向上走的关键的一步&lt;/h5&gt;
&lt;p&gt;在我发现转让的那个早上我就联系了FBI。我当时觉得自己蠢爆了，居然打了这样的电话，但事实却是这是一个国际网络犯罪事件，而FBI正好是干这个的。何况这也是我的事业。可能放到大背景下我这种事情简直就是鸡毛蒜皮的小事，可对我来说却不是，它可支撑着我的家庭。&lt;/p&gt;
&lt;p&gt;那么让我来告诉你吧：所有在过去这一周遇到的令人吃惊的事情，绝大多数都是来自FBI。那天他们没过多久就给了我回应，包括几次电话和邮件的沟通，还在当天就派了两名特工来我家和我进行了一次当面的交流，一直到昨天，他们又来了一次。除此之外，过去这周我接触的每一个特工都非常能干，而且很友善，很体贴，也很投入并且行动非常迅速。他们待我并不是一个简单的号码，而是一个活生生的人。总而言之，他们令人尊敬。&lt;/p&gt;
&lt;p&gt;而我所期望的是在一个邮箱上留言并在某个时刻收到一封信件；当然我并不想要立马就看到一封调查报告。当然，在这里我也不打算写这些调查过程，因为它还没有结束（尽管我得到了他们的授权），但是我觉得非常有必要讲一下我是如何对FBI的回应感到惊喜的。&lt;/p&gt;
&lt;h5&gt;3、我试图直接联系那个“卖家”要回我的网站。这起作用了，但也相当有戏剧性&lt;/h5&gt;
&lt;p&gt;当前面的工作都在进行的时候，我也在想办法直接找那个要卖我网站的家伙要回它。&lt;/p&gt;
&lt;p&gt;我可不想直接联系那个“卖家”，要是让那个家伙知道网站的真实主人已经意识到了这笔交易，他很有可能会向我敲诈更多的钱。所以我找了Anthony——是他看到的最原始的清单，而且他还在Flippa上面有个有效账户——让他联系“bahbouh”问他是否有兴趣私下交易。经过一番讨价还价，我们最终得到了同意，并最终决定在一个第三方的交易网站（&lt;a href=&quot;https://www.escrow.com/&quot;&gt;Escrow.com&lt;/a&gt;）上面完成交易：当确认卖家将域名转移给我之后钱才会打给他。&lt;/p&gt;
&lt;p&gt;正当我以为一切都很顺利的时候，在周二的晚上，那个卖家突然要求我立即把钱打给他（在收到网站之前）。我拒绝了，结果他声称他要将网站卖给另外一个人：“sorry,bye”&lt;/p&gt;
&lt;p&gt;以下是我当时的想法：如果我不给钱，那肯定是收不回我的网站了。如果给钱，那么有一种可能是他拿了钱立马跑掉，但也有可能他会履行他的承诺，把网站还给我。这就像一场赌博…但显然我毫无选择。所以我最后还是同意了。&lt;/p&gt;
&lt;p&gt;我花了20几分钟的时间坐在这该死的GoDaddy账户面前，等着看我的钱是不是打了水漂。&lt;/p&gt;
&lt;p&gt;然后我的网站回来了。&lt;/p&gt;
&lt;p&gt;我立即将这个域名（和我的其它域名一起）转移到另一个账户上，并锁定了它们。并致电汇款公司让他们终止交易。&lt;/p&gt;
&lt;h4&gt;结果&lt;/h4&gt;
&lt;p&gt;RamshackleGlam.com又重新回到了我的怀抱，感谢那些不辞辛劳尽其所能帮助我的人。我的其它账户（包括银行账户及其它）都安全了。我最终也没有把钱给要回来，但那个小偷也没有得到它，永远都别想了。&lt;/p&gt;
&lt;p&gt;这件事情总算结束了。该死的！&lt;/p&gt;
&lt;h4&gt;那么为什么我依然感到愤怒？&lt;/h4&gt;
&lt;p&gt;当然我会因为网站被偷而生气，但我对此无能为力。我之所以写这篇文章有一部分原因是我要让人们知道这种事情是确实会发生在我们每一个人身边的，也希望通过我的一些建议去帮助大家尽量避免悲剧的发生，但除此之外，真正激发我动笔的是我对GoDaddy和HostMonster的愤愤愤愤愤愤怒。我希望你们能明白。&lt;/p&gt;
&lt;p&gt;这两家公司都没有质疑我的声明（有书面证据的支持）即我对网站的所有权，也没有怀疑网站在未经我授权的情况下被转移。而我仍然话花了几天的时间自己去找那个黑客——这几天足以让他做任何想做的事情——就是因为那群技术支持和监察员除了说“天啊，真糟糕。我们帮不了你”之外什么也做不了！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ramshackleglam.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-27-at-11.38.53-AM.png&quot; rel=&quot;lightbox[75334]&quot; title=&quot;黑客入侵后，重新夺回我的网站&quot;&gt;&lt;img alt=&quot;Screen Shot 2014-03-27 at 11.38.53 AM&quot; src=&quot;/images/jobbole.com/dd4fb9027669eb36a89d225664f2c9de.jpg&quot; width=&quot;625&quot; height=&quot;236&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ramshackleglam.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-27-at-11.40.01-AM.png&quot; rel=&quot;lightbox[75334]&quot; title=&quot;黑客入侵后，重新夺回我的网站&quot;&gt;&lt;img alt=&quot;Screen Shot 2014-03-27 at 11.40.01 AM&quot; src=&quot;/images/jobbole.com/3cd1999b377e3fc5b05e7095697f5d7c.jpg&quot; width=&quot;625&quot; height=&quot;200&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而当我找到真正能帮我的人——我是指那些能为我打一个电话或者按一个钮然后把我的财产还给我的人（亦或是简单的冻结它而避免被卖掉或摧毁），他们才不会跟我说这些。这帮人（指两家公司的人员）只会躲在他们的法律部门后面而不会做任何事，即使知道他们的不作为会逼我不得不跟一个罪犯做交易，或让我失去我事业的重要部分。&lt;/p&gt;
&lt;p&gt;而黑客们也知道这些公司会这样做。&lt;/p&gt;
&lt;p&gt;它们指着这活呢。&lt;/p&gt;
&lt;p&gt;这是一个很严重的问题——一个犯罪组织不仅“无视”公司的政策，而且事实上导致了公司将自身的利益至于其所声称的对用户的“保护”之上。我能理解像HostMonster和GoDaddy这样的公司为什么会把精力都放在保护自己免受诉讼上吗？当然！但事实是他们并没有去“保护”他们的用户，而且刚好相反地加深了对他们所支持的那些小型企业和家庭的威胁。&lt;/p&gt;
&lt;p&gt;这些公司知道如果他们堵住了那扇帮助的大门那些资产收到侵犯的用户将没有其他的依靠，他们不得不向罪犯妥协或是眼睁睁看着自己的事业——也很可能是生活——毁掉。这些公司也知道他们的不作为给那些依赖于用这种手段赚钱的黑客创造了良好的环境。而他们什么也不做。&lt;/p&gt;
&lt;p&gt;这种情况必须得改变了。&lt;/p&gt;
&lt;h4&gt;我的意见，在我看来是值得去做的：&lt;/h4&gt;
&lt;p&gt;在代理公司的支持人员必须要非常熟悉ICANN有关域名分配的相关条例，同时也需要在第一时间从客户那了解情况后就制定一个行动计划，别让客户一个又一个电话的催。&lt;/p&gt;
&lt;p&gt;此外，建立一个TEAC**可以让争议账户立即被冻结，直到事情得到圆满解决。这也不会需要任何一方去承认罪责；基于这样一个尝试：当存在争议时，我们需要确保域名必须是被安全的转移。&lt;/p&gt;
&lt;h4&gt;怎样做可以降低悲剧发生在你身上的概率：&lt;/h4&gt;
&lt;p&gt;1、要有一个非常非常靠谱的密码，并且经常更换。密码不要含有“明显”的单词（当然也不要有像“whitecat”或“angrybird”这样两个或多个连在一起的单词），而且应该包含大写字母、数字和符号。最好的密码看上去应该是杂乱无章的。&lt;/p&gt;
&lt;p&gt;2、如果可以的话，最好使用一个单独的计算机（可以是个旧的或买个便宜点的）来处理跟财产有关的业务，比方说银行转账等等，否则的话指不准哪天你家小孩点了一个恶意链接就可能会招来黑客。&lt;/p&gt;
&lt;p&gt;3、当你不再使用电脑和个人设备的时候就关掉它。&lt;/p&gt;
&lt;p&gt;4、装一个杀毒软件（但是记住这也只能让你扫描到30-40%的病毒，所以哪怕是一次“彻底”的检查也不代表你的电脑是安全的）。&lt;/p&gt;
&lt;p&gt;5、购买&lt;a href=&quot;https://www.travelers.com/business-insurance/management-professional-liability/cyber-risk.aspx&quot;&gt;CyberRisk保险&lt;/a&gt;（可以点击链接查看更多信息，它可以确保你的利益不会因为网络攻击和数据泄露遭到大的损失）。&lt;/p&gt;
&lt;h4&gt;但要是悲剧真的发生了，那你该怎么做：&lt;/h4&gt;
&lt;p&gt;1、立即仔细的检查（并且截图）。不要删除任何的邮件以及其它信息，它们很有可能在后面起到重要作用。&lt;/p&gt;
&lt;p&gt;2、立刻更改你所有的密码（包括——但不限于——域名注册商、网站托管、网站登录信息、邮箱、银行账户、无线家用电子产品、以及Apple ID）根据以下的规则。在情况还没有确定下来时我每隔几个小时都会改一次密码，并且在这之后我仍然会每隔几天都会改一次密码。&lt;/p&gt;
&lt;p&gt;3、联系注册商，引用下面的ICANN方案，然后看是否能快速解决。要是你发现你自己走近死胡同也不要惊讶。&lt;/p&gt;
&lt;p&gt;4、查看你的邮件的“过滤器”和“规则”（通常情况下，任何可能的设备都会被黑客推送邮件，比方说cetera）。&lt;/p&gt;
&lt;p&gt;5、联系合适的执法部门（我联系了FBI是因为这看上去像是一个国际犯罪，至少也是个洲际犯罪——因为Escrow.com在加利福利亚而我在纽约）。&lt;/p&gt;
&lt;p&gt;注意：每一种情况都会不同，而且我也不会全力推荐这些方法——虽然它们让我最终夺回了我的域名的控制权，但是让我不得已跟罪犯打交道。很明显这并不理想，而且也可能导致不可预料的结果。（尽管我老公说他也很想让大家知道我是个大坏蛋，但很明显这也不是事实…好吧，至少是在这件事上）&lt;/p&gt;
&lt;p&gt;（完）&lt;/p&gt;
&lt;h5&gt;伯乐在线译者注：&lt;/h5&gt;
&lt;p&gt;*Icann.Org全名为互联网域名和号码管理组织，负责管理并协调&lt;a href=&quot;https://www.icann.org/en/node/1145082#dns&quot;&gt;DNS&lt;/a&gt;。&lt;a href=&quot;https://www.icann.org/resources/pages/policy-2012-03-07-en&quot;&gt;ICANN的域名争议解决方案&lt;/a&gt;基本规定了在域名纠纷的案件下，原注册商（“Losing Registrar”，在转移发生前的域名持有人，与之相对的“Winning Registrar”，指在转移发生后的域名持有人）需要立即启动紧急转移行动接触方式（“&lt;a href=&quot;https://www.icann.org/resources/pages/policy-2012-03-07-en&quot;&gt;TEAC&lt;/a&gt;”）将球踢到立刻解决的方向上来。当初一得到这个信息，我的案子就立刻升级了。&lt;/p&gt;
&lt;p&gt;**TEAC：由ICANN建立的一种接触方式，用于其它注册商和ICANN在必要时快速解决两个注册商之间的域名转移问题。该接触必须在调查开始四小时之内响应，尽管最终的解决时间会很长。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Sat, 16 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-16-75334-fe22b32a2.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-16-75334-fe22b32a2.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>分布式消息系统：Kafka</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;Kafka是分布式发布-订阅消息系统。它最初由LinkedIn公司开发，之后成为Apache项目的一部分。Kafka是一个分布式的，可划分的，冗余备份的持久性的日志服务。它主要用于处理活跃的流式数据。&lt;/p&gt;
&lt;p&gt;在大数据系统中，常常会碰到一个问题，整个大数据是由各个子系统组成，数据需要在各个子系统中高性能，低延迟的不停流转。传统的企业消息系统并不是非常适合大规模的数据处理。为了已在同时搞定在线应用（消息）和离线应用（数据文件，日志）Kafka就出现了。Kafka可以起到两个作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;降低系统组网复杂度。&lt;/li&gt;
&lt;li&gt;降低编程复杂度，各个子系统不在是相互协商接口，各个子系统类似插口插在插座上，Kafka承担高速数据总线的作用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kafka主要特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同时为发布和订阅提供高吞吐量。据了解，Kafka每秒可以生产约25万消息（50 MB），每秒处理55万消息（110 MB）。&lt;/li&gt;
&lt;li&gt;可进行持久化操作。将消息持久化到磁盘，因此可用于批量消费，例如ETL，以及实时应用程序。通过将数据持久化到硬盘以及replication防止数据丢失。&lt;/li&gt;
&lt;li&gt;分布式系统，易于向外扩展。所有的producer、broker和consumer都会有多个，均为分布式的。无需停机即可扩展机器。&lt;/li&gt;
&lt;li&gt;消息被处理的状态是在consumer端维护，而不是由server端维护。当失败时能自动平衡。&lt;/li&gt;
&lt;li&gt;支持online和offline的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kafka的架构：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/08/975609a391574a15645c2d2e2494114f.png&quot; rel=&quot;lightbox[75328]&quot; title=&quot;分布式消息系统：Kafka&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-75329&quot; alt=&quot;kafka&quot; src=&quot;/images/jobbole.com/3802d534d36cb8eafd8110b2bb5d10ff.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Kafka的整体架构非常简单，是显式分布式架构，producer、broker（kafka）和consumer都可以有多个。Producer，consumer实现Kafka注册的接口，数据从producer发送到broker，broker承担一个中间缓存和分发的作用。broker分发注册到系统中的consumer。broker的作用类似于缓存，即活跃的数据和离线处理系统之间的缓存。客户端和服务器端的通信，是基于简单，高性能，且与编程语言无关的TCP协议。几个基本概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Topic：特指Kafka处理的消息源（feeds of messages）的不同分类。&lt;/li&gt;
&lt;li&gt;Partition：Topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。&lt;/li&gt;
&lt;li&gt;Message：消息，是通信的基本单位，每个producer可以向一个topic（主题）发布一些消息。&lt;/li&gt;
&lt;li&gt;Producers：消息和数据生产者，向Kafka的一个topic发布消息的过程叫做producers。&lt;/li&gt;
&lt;li&gt;Consumers：消息和数据消费者，订阅topics并处理其发布的消息的过程叫做consumers。&lt;/li&gt;
&lt;li&gt;Broker：缓存代理，Kafa集群中的一台或多台服务器统称为broker。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;消息发送的流程：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/08/cb5892023c894331a55de5ac7f64582d.png&quot; rel=&quot;lightbox[75328]&quot; title=&quot;分布式消息系统：Kafka&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-75330&quot; alt=&quot;message&quot; src=&quot;/images/jobbole.com/3e6f80a8240222771de43eb217ec2e6d.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Producer根据指定的partition方法（round-robin、hash等），将消息发布到指定topic的partition里面&lt;/li&gt;
&lt;li&gt;kafka集群接收到Producer发过来的消息后，将其持久化到硬盘，并保留消息指定时长（可配置），而不关注消息是否被消费。&lt;/li&gt;
&lt;li&gt;Consumer从kafka集群pull数据，并控制获取消息的offset&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kafka的设计：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、吞吐量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高吞吐是kafka需要实现的核心目标之一，为此kafka做了以下一些设计：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据磁盘持久化：消息不在内存中cache，直接写入到磁盘，充分利用磁盘的顺序读写性能&lt;/li&gt;
&lt;li&gt;zero-copy：减少IO操作步骤&lt;/li&gt;
&lt;li&gt;数据批量发送&lt;/li&gt;
&lt;li&gt;数据压缩&lt;/li&gt;
&lt;li&gt;Topic划分为多个partition，提高parallelism&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;producer根据用户指定的算法，将消息发送到指定的partition&lt;/li&gt;
&lt;li&gt;存在多个partiiton，每个partition有自己的replica，每个replica分布在不同的Broker节点上&lt;/li&gt;
&lt;li&gt;多个partition需要选取出lead partition，lead partition负责读写，并由zookeeper负责fail over&lt;/li&gt;
&lt;li&gt;通过zookeeper管理broker与consumer的动态加入与离开&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;拉取系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于kafka broker会持久化数据，broker没有内存压力，因此，consumer非常适合采取pull的方式消费数据，具有以下几点好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简化kafka设计&lt;/li&gt;
&lt;li&gt;consumer根据消费能力自主控制消息拉取速度&lt;/li&gt;
&lt;li&gt;consumer根据自身情况自主选择消费模式，例如批量，重复消费，从尾端开始消费等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当需要增加broker结点时，新增的broker会向zookeeper注册，而producer及consumer会根据注册在zookeeper上的watcher感知这些变化，并及时作出调整。&lt;/p&gt;
&lt;p&gt;Kafka的应用场景：&lt;/p&gt;
&lt;p&gt;1.消息队列&lt;/p&gt;
&lt;p&gt;比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统，如&lt;a href=&quot;http://activemq.apache.org/&quot;&gt;ActiveMR&lt;/a&gt;或&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2.行为跟踪&lt;/p&gt;
&lt;p&gt;Kafka的另一个应用场景是跟踪用户浏览页面、搜索及其他行为，以发布-订阅的模式实时记录到对应的topic里。那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。&lt;/p&gt;
&lt;p&gt;3.元信息监控&lt;/p&gt;
&lt;p&gt;作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。&lt;/p&gt;
&lt;p&gt;4.日志收集&lt;/p&gt;
&lt;p&gt;日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或HDFS）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比起以日志为中心的系统比如Scribe或者Flume来说，Kafka提供同样高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。&lt;/p&gt;
&lt;p&gt;5.流处理&lt;/p&gt;
&lt;p&gt;这个场景可能比较多，也很好理解。保存收集流数据，以提供之后对接的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从RSS数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。&lt;a href=&quot;http://storm.incubator.apache.org/&quot;&gt;Strom&lt;/a&gt;和&lt;a href=&quot;http://samza.incubator.apache.org/&quot;&gt;Samza&lt;/a&gt;是非常著名的实现这种类型数据转换的框架。&lt;/p&gt;
&lt;p&gt;6.事件源&lt;/p&gt;
&lt;p&gt;事件源是一种应用程序设计的方式，该方式的状态转移被记录为按时间顺序排序的记录序列。Kafka可以存储大量的日志数据，这使得它成为一个对这种方式的应用来说绝佳的后台。比如动态汇总（News feed）。&lt;/p&gt;
&lt;p&gt;7.持久性日志（commit log）&lt;/p&gt;
&lt;p&gt;Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中日志压缩功能为这种用法提供了条件。在这种用法中，Kafka类似于Apache BookKeeper项目。&lt;/p&gt;
&lt;p&gt;Kafka的设计要点：&lt;/p&gt;
&lt;p&gt;1、直接使用linux 文件系统的cache，来高效缓存数据。&lt;/p&gt;
&lt;p&gt;2、采用linux Zero-Copy提高发送性能。传统的数据发送需要发送4次上下文切换，采用sendfile系统调用之后，数据直接在内核态交换，系统上下文切换减少为2次。根据测试结果，可以提高60%的数据发送性能。Zero-Copy详细的技术细节可以参考：https://www.ibm.com/developerworks/linux/library/j-zerocopy/&lt;/p&gt;
&lt;p&gt;3、数据在磁盘上存取代价为O(1)。kafka以topic来进行消息管理，每个topic包含多个part（ition），每个part对应一个逻辑log，有多个segment组成。每个segment中存储多条消息（见下图），消息id由其逻辑位置决定，即从消息id可直接定位到消息的存储位置，避免id到位置的额外映射。每个part在内存中对应一个index，记录每个segment中的第一条消息偏移。发布者发到某个topic的消息会被均匀的分布到多个part上（随机或根据用户指定的回调函数进行分布），broker收到发布消息往对应part的最后一个segment上添加该消息，当某个segment上的消息条数达到配置值或消息发布时间超过阈值时，segment上的消息会被flush到磁盘，只有flush到磁盘上的消息订阅者才能订阅到，segment达到一定的大小后将不会再往该segment写数据，broker会创建新的segment。&lt;/p&gt;
&lt;p&gt;4、显式分布式，即所有的producer、broker和consumer都会有多个，均为分布式的。Producer和broker之间没有负载均衡机制。broker和consumer之间利用zookeeper进行负载均衡。所有broker和consumer都会在zookeeper中进行注册，且zookeeper会保存他们的一些元数据信息。如果某个broker和consumer发生了变化，所有其他的broker和consumer都会得到通知。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kafka.apache.org/documentation.html#design&quot;&gt;项目设计讨论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apache/kafka&quot;&gt;Github镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimeo.com/62298867&quot;&gt;Morten Kjetland对Apache Kafka的介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quora.com/RabbitMQ/RabbitMQ-vs-Kafka-which-one-for-durable-messaging-with-good-query-features?share=1&quot;&gt;Quora上与RabbitMQ的对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/people/srikanth/netdb11/netdb11papers/netdb11-final12.pdf&quot;&gt;Kafka: a Distributed Messaging System for Log Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/&quot;&gt;Zero-copy原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sna-projects.com/sna/media/kafka_hadoop.pdf&quot;&gt;Kafka与Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Fri, 15 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-15-75328-8f6fc7490.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-15-75328-8f6fc7490.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title> Value and Reference Types </title>
        <description>

						
						

						&lt;p&gt;Types in Swift fall into one of two categories: first, “value types”, where each instance keeps a unique copy of its data, usually defined as a &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;, or &lt;span class=&quot;keyword&quot;&gt;tuple&lt;/span&gt;. The second, “reference types”, where instances share a single copy of the data, and the type is usually defined as a &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;. In this post we explore the merits of value and reference types, and how to choose between them. &lt;/p&gt; &lt;h3&gt; What’s the Difference? &lt;/h3&gt; &lt;p&gt;The most basic distinguishing feature of a &lt;em&gt;value type&lt;/em&gt; is that copying — the effect of assignment, initialization, and argument passing — creates an &lt;em&gt;independent instance&lt;/em&gt; with its own unique copy of its data:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// Value type example&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;struct&lt;/span&gt; S { &lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; data: &lt;span class=&quot;title&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; }
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;pointer&quot;&gt;S&lt;/span&gt;()
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt;						&lt;span class=&quot;comment&quot;&gt;// a is copied to b&lt;/span&gt;
&lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pointer&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;						&lt;span class=&quot;comment&quot;&gt;// Changes a, not b&lt;/span&gt;
&lt;span class=&quot;method&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;\(&lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pointer&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;,&lt;/span&gt; \(&lt;span class=&quot;pointer&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;pointer&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;)	&lt;span class=&quot;comment&quot;&gt;// prints &quot;42, -1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Copying a reference type, on the other hand, implicitly creates a shared instance. After a copy, two variables then refer to a single instance of the data, so modifying data in the second variable also affects the original, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;// Reference type example&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;class&lt;/span&gt; C { &lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; data: &lt;span class=&quot;title&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; }
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;pointer&quot;&gt;C&lt;/span&gt;()
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;pointer&quot;&gt;x&lt;/span&gt;						&lt;span class=&quot;comment&quot;&gt;// x is copied to y&lt;/span&gt;
&lt;span class=&quot;pointer&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pointer&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;						&lt;span class=&quot;comment&quot;&gt;// changes the instance referred to by x (and y)&lt;/span&gt;
&lt;span class=&quot;method&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;\(&lt;span class=&quot;pointer&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pointer&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;,&lt;/span&gt; \(&lt;span class=&quot;pointer&quot;&gt;y&lt;/span&gt;.&lt;span class=&quot;pointer&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;)	&lt;span class=&quot;comment&quot;&gt;// prints &quot;42, 42&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;The Role of Mutation in Safety&lt;/h3&gt; &lt;p&gt;One of the primary reasons to choose value types over reference types is the ability to more easily reason about your code. If you always get a unique, copied instance, you can trust that no other part of your app is changing the data under the covers. This is especially helpful in multi-threaded environments where a different thread could alter your data out from under you. This can create nasty bugs that are extremely hard to debug.&lt;/p&gt; &lt;p&gt;Because the difference is defined in terms of what happens when you change data, there’s one case where value and reference types overlap: when instances have no writable data. In the absence of mutation, values and references act exactly the same way.&lt;/p&gt; &lt;p&gt;You may be thinking that it could be valuable, then, to have a case where a &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; is completely immutable. This would make it easier to use Cocoa &lt;span class=&quot;keyword&quot;&gt;NSObject&lt;/span&gt; objects, while maintaining the benefits of value semantics. Today, you can write an immutable class in Swift by using only immutable stored properties and avoiding exposing any APIs that can modify state. In fact, many common Cocoa classes, such as &lt;span class=&quot;keyword&quot;&gt;NSURL&lt;/span&gt;, are designed as immutable classes. However, Swift does not currently provide any language mechanism to enforce &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; immutability (e.g. on subclasses) the way it enforces immutability for &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; and &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;.&lt;/p&gt; &lt;h3&gt;How to Choose?&lt;/h3&gt; &lt;p&gt;So if you want to build a new type, how do you decide which kind to make? When you’re working with Cocoa, many APIs expect subclasses of &lt;span class=&quot;keyword&quot;&gt;NSObject&lt;/span&gt;, so you have to use a &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;. For the other cases, here are some guidelines:&lt;/p&gt; &lt;p&gt;Use a value type when:&lt;/p&gt; &lt;ul class=&quot;tight&quot;&gt; &lt;li&gt;Comparing instance data with &lt;span class=&quot;keyword&quot;&gt;==&lt;/span&gt; makes sense&lt;/li&gt; &lt;li&gt;You want copies to have independent state&lt;/li&gt; &lt;li&gt;The data will be used in code across multiple threads&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Use a reference type (e.g. use a &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) when:&lt;/p&gt; &lt;ul class=&quot;tight&quot;&gt; &lt;li&gt;Comparing instance identity with &lt;span class=&quot;keyword&quot;&gt;===&lt;/span&gt; makes sense&lt;/li&gt; &lt;li&gt;You want to create shared, mutable state&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In Swift, &lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;, and &lt;span class=&quot;keyword&quot;&gt;Dictionary&lt;/span&gt; are all value types. They behave much like a simple &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value in C, acting as a unique instance of that data. You don’t need to do anything special — such as making an explicit copy — to prevent other code from modifying that data behind your back. Importantly, you can safely pass variables across threads without synchronization. In the spirit of improving safety, this model will help you write more predictable code in Swift.&lt;/p&gt;

						
												
											

</description>
        <pubDate>Fri, 15 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-15--id=10-9e7bc9520.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-15--id=10-9e7bc9520.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>字符编码常识及问题解析</title>
        <description>
&lt;pre&gt;&lt;code&gt;在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几
，确实挺失望的。所以今天就结合我以前做过的一个关于字符编码的分享，总结一些与字符编码相关的知识和问题。如果你这方面的
知识已经掌握的足够了，可以忽略这篇文字。但如果你没法很好的回答我上面的面试题，或经常被乱码的问题所困扰，还是不妨一读。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;基本常识&lt;/h2&gt;

&lt;h3&gt;1.位和字节&lt;/h3&gt;

&lt;p&gt;说起编码，我们必须从最基础的说起，&lt;strong&gt;位和字节&lt;/strong&gt;(别觉得这个过于简单不值一说，我还真见过很多个不能区分这两者的程序员)。位（bit）是指计算机里存放的二进制值(0/1)，而8个位组合成的“位串”称为一个字节，容易算出，8个位的组合有256（ 2&lt;sup&gt;8&lt;/sup&gt; ）个组合方式，其取值范围是“00000000-11111111”，常用十六进制来表示。比如“01000001”就是一个字节，其对应的十六进制值为“0x41”。&lt;/p&gt;

&lt;p&gt;而我们通常所讲的字符编码，就是指&lt;strong&gt;定义一套规则&lt;/strong&gt;，将真实世界里的字母/字符与计算机的二进制序列进行相互转化。如我们可以针对上面的字节定义如下的转换规则：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 01000001（0x41）&amp;lt;-&amp;gt; 65 &amp;lt;-&amp;gt; &#39;A&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即用字位序“01000001”来表示字母’A’。&lt;/p&gt;

&lt;h3&gt;2.拉丁字符&lt;/h3&gt;

&lt;p&gt;拉丁字符是当今世界使用最广泛的符号了。通常我们说的拉丁字母，指的的是&lt;strong&gt;基础拉丁字母&lt;/strong&gt;,即指常见的”ABCD“等26个英文字母，这些字母与英语中一些常见的符号（如数字，标点符号）称为&lt;strong&gt;基础拉丁字符&lt;/strong&gt;，这些基础拉丁字符在使用英语的国家广为流行，当然在中国，也被用来当作汉语拼音使用。在欧洲其它一些非英语国家，为满足其语言需要，在基础拉丁字符的基础上，加上一些连字符，变音字符(如’Á’)，形成了&lt;strong&gt;派生拉丁字母&lt;/strong&gt;，其表示的字符范围在各种语言有所不同，而&lt;strong&gt;完整意义上的拉丁字符是指这些变体字符与基础拉丁字符的全集&lt;/strong&gt;。是比基础拉丁字符集大很多的一个集合。&lt;/p&gt;

&lt;h2&gt;编码标准&lt;/h2&gt;

&lt;p&gt;前文提到，字符编码是一套规则。既然是规则，就必须有标准。下面我就仔细说说常见的字符编码标准。&lt;/p&gt;

&lt;h3&gt;1.拉丁编码&lt;/h3&gt;

&lt;p&gt;ASCII的全称是American Standard Code for Information Interchange（美国信息交换标准代码）。顾名思义，这是现代计算机的发明国美国人设计的标准，而美国是一个英语国家，他们设定的&lt;strong&gt;ASCII编码也只支持基础拉丁字符&lt;/strong&gt;。ASCII的设计也很简单，&lt;strong&gt;用一个字节（8个位）来表示一个字符，并保证最高位的取值永远为’0’&lt;/strong&gt;。即表示字符含义的位数为7位，不难算出其可表达字符数为2&lt;sup&gt;7&lt;/sup&gt; =128个。这128个字符包括95个可打印的字符（涵盖了26个英文字母的大小写以及英文标点符号能）与33个控制字符（不可打印字符）。例如下表，就是几个简单的规则对应：&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;字符类型&lt;/th&gt;
&lt;th&gt;   字符&lt;/th&gt;
&lt;th&gt;二进制  &lt;/th&gt;
&lt;th&gt; 16进制&lt;/th&gt;
&lt;th&gt;10进制&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可打印字符&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;  01000001&lt;/td&gt;
&lt;td&gt;   0x41&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可打印字符&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;  01100001&lt;/td&gt;
&lt;td&gt;   0x61&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制字符&lt;/td&gt;
&lt;td&gt;   \r&lt;/td&gt;
&lt;td&gt;00001101&lt;/td&gt;
&lt;td&gt;    0x0D&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制字符&lt;/td&gt;
&lt;td&gt;   \n&lt;/td&gt;
&lt;td&gt;00001010&lt;/td&gt;
&lt;td&gt;    0xA&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;前面说到了，ASCII是美国人设计的，只能支持基础拉丁字符，而当计算机发展到欧洲，欧洲其它不只是用的基础拉丁字符的国家（即用更大的派生拉丁字符集）该怎么办呢？&lt;/p&gt;

&lt;p&gt;当然，最简单的办法就是将美国人没有用到的&lt;strong&gt;第8位也用上&lt;/strong&gt;就好了，这样能表达的字符个数就达到了2&lt;sup&gt;8&lt;/sup&gt; =256个，相比较原来，增长了一倍， 这个编码规则也常被称为&lt;strong&gt;EASCII&lt;/strong&gt;。EASCII基本解决了整个西欧的字符编码问题。但是对于欧洲其它地方如北欧，东欧地区，256个字符还是不够用，如是出现了&lt;strong&gt;ISO 8859&lt;/strong&gt;,为解决256个字符不够用的问题，&lt;strong&gt;ISO 8859采取的不再是单个独立的编码规则，而是由一系列的字符集（共15个）所组成&lt;/strong&gt;，分别称为ISO 8859-n(n=1,2,3…11,13…16,没有12)。其每个字符集对应不同的语言,如ISO 8859-1对应西欧语言，ISO 8859-2对应中欧语言等。其中大家所熟悉的&lt;strong&gt;Latin-1就是ISO 8859-1的别名,它表示整个西欧的字符集范围&lt;/strong&gt;。
&lt;strong&gt;需要注意的一点的是，ISO 8859-n与ASCII是兼容的，即其0000000(0x00)-01111111(0x7f)范围段与ASCII保持一致，而10000000（0x80）-11111111(0xFF)范围段被扩展用到不同的字符集。&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;2.中文编码&lt;/h3&gt;

&lt;p&gt;以上我们接触到的拉丁编码，都是单字节编码，即用一个字节来对应一个字符。但这一规则对于其它字符集更大的语言来说，并不适应，比如中文，而是出现了用多个字节表示一个字符的编码规则。常见的中文GB2312（国家简体中文字符集）就是用两个字节来表示一个汉字（注意是表示一个汉字，对于拉丁字母，GB2312还是是用一个字节来表示以兼容ASCII）。我们用下表来说明各中文编码之间的规则和兼容性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/24f49bfe6e2506470d87f565f56bbcb3.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;对于中文编码，其规则实现上是很简单的，一般都是简单的&lt;strong&gt;字符查表&lt;/strong&gt;即可，重要的是要注意其相互之间的&lt;strong&gt;兼容性&lt;/strong&gt;问题。如如果选择BIG5字符集编码，就不能很好的兼容GB2312，当做繁转简时有可能导致个别字的冲突与不一致，但是GBK与GB2312之间就不存在这样的问题。&lt;/p&gt;

&lt;h3&gt;3.Unicode&lt;/h3&gt;

&lt;p&gt;以上可以看到，针对不同的语言采用不同的编码，有可能导致冲突与不兼容性，如果我们打开一份字节序文件，如果不知道其编码规则，就无法正确解析其语义，这也是产生乱码的根本原因。有没有一种规则是全世界字符统一的呢？当然有，Unicode就是一种。为了能独立表示世界上所有的字符，Unicode采用&lt;strong&gt;4个字节表示一个字符&lt;/strong&gt;,这样理论上Unicode能表示的字符数就达到了2&lt;sup&gt;31&lt;/sup&gt; = 2147483648 = 21 亿左右个字符，完全可以涵盖世界上一切语言所用的符号。我们以汉字”微信“两字举例说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;微 &amp;lt;-&amp;gt;  \u5fae   &amp;lt;-&amp;gt;  00000000 00000000 01011111 10101110
信 &amp;lt;-&amp;gt; \u4fe1   &amp;lt;-&amp;gt;  00000000 00000000 01001111 11100001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容易从上面的例子里看出，Unicode对所有的字符编码均需要四个字节，而这对于拉丁字母或汉字来说是浪费的，其前面三个或两个字节均是0,这对信息存储来说是极大的浪费。另外一个问题就是，如何区分Unicode与其它编码这也是一个问题，比如计算机怎么知道四个字节表示一个Unicode中的字符，还是分别表示四个ASCII的字符呢？&lt;/p&gt;

&lt;p&gt;以上两个问题，困扰着Unicode，让Unicode的推广上一直面临着困难。直至UTF-8作为Unicode的一种实现后，部分问题得到解决，才得以完成推广使用。说到此，我们可以回答文章一开始提出的问题了，&lt;strong&gt;UTF-8是Unicode的一种实现方式，而Unicode是一个统一标准规范，Unicode的实现方式除了UTF-8还有其它的，比如UTF-16等。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;话说当初大牛Ben Thomson吃饭时，在一张餐巾纸上，设计出了UTF-8，然后回到房间，实现了第一版的UTF-8。关于UTF-8的基本规则，其实简单来说就两条（来自阮一峰老师的总结）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;规则1：对于单字节字符，字节的第一位为0，后7位为这个符号的Unicode码，所以对于拉丁字母，UTF-8与ASCII码是一致的。

规则2：对于n字节(n&amp;gt;1)的字符，第一个字节前n位都设为1，第n+1位为0，后面字节的前两位一律设为10，
剩下没有提及的位，全部为这个符号的Unicode编码。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过，根据以上规则，可以建立一个Unicode取值范围与UTF-8字节序表示的对应关系，如下表，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/c5e88dc37d1f58ce4b03a448d4839885.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;举例来说，’微’的Unicode是’\u5fae’，二进制表示是”00000000 00000000 01011111 10101110“，其取值就位于’0000 0800-0000 FFFF’之间，所以其UTF-8编码为’&lt;strong&gt;111&lt;/strong&gt;00101 &lt;strong&gt;10&lt;/strong&gt;111110 &lt;strong&gt;10&lt;/strong&gt;101110’ （加粗部分为固定编码内容）。&lt;/p&gt;

&lt;p&gt;通过以上简单规则，UTF-8采取变字节的方式，解决了我们前文提到的关于Unicode的两大问题。同时，作为中文使用者需要注意的一点是&lt;strong&gt;Unicode(UTF-8)与GBK，GB2312这些汉字编码规则是完全不兼容的，也就是说这两者之间不能通过任何算法来进行转换,如需转换，一般通过GBK查表的方式来进行&lt;/strong&gt;。&lt;/p&gt;

&lt;h2&gt;常见问题及解答&lt;/h2&gt;

&lt;h3&gt;1.windows Notepad中的编码ANSI保存选项，代表什么含义？&lt;/h3&gt;

&lt;p&gt;ANSI是windows的默认的编码方式，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。所以，&lt;strong&gt;如果将一个UTF-8编码的文件，另存为ANSI的方式，对于中文部分会产生乱码&lt;/strong&gt;。&lt;/p&gt;

&lt;h3&gt;2.什么是UTF-8的BOM？&lt;/h3&gt;

&lt;p&gt;BOM的全称是Byte Order Mark，BOM是微软给UTF-8编码加上的，用于标识文件使用的是UTF-8编码，即在UTF-8编码的文件起始位置，加入三个字节“EE BB BF”。这是微软特有的，标准并不推荐包含BOM的方式。采用加BOM的UTF-8编码文件，对于一些只支持标准UTF-8编码的环境，可能导致问题。比如，在Go语言编程中，对于包含BOM的代码文件，会导致编译出错。详细可见我的&lt;a href=&quot;http://sharecore.info/blog/2013/04/05/parse-csv-to-sql-for-insert/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;3.为什么数据库Latin1字符集（单字节）可以存储中文呢？&lt;/h3&gt;

&lt;p&gt;其实不管需要使用几个字节来表示一个字符，但最小的存储单位都是字节,所以，&lt;strong&gt;只要能保证传输和存储的字节顺序不会乱即可&lt;/strong&gt;。作为数据库，只是作为存储的使用的话，只要能保证存储的顺序与写入的顺序一致，然后再按相同的字节顺序读出即可，翻译成语义字符的任务交给应用程序。比如’微’的UTF-8编码是’0xE5 0xBE 0xAE’，那数据库也存储’0xE5 0xBE 0xAE’三个字节，其它应用按顺序从数据库读取，再按UTF-8编码进行展现。这当然是一个看似完美的方案，但是只要写入，存储，读取过程中岔出任何别的编码，都可能导致乱码。&lt;/p&gt;

&lt;h3&gt;4.Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/fe3b60523b621b3ac871f45c83692d11.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们分别解释：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;character_set_client&lt;/strong&gt;：客户端来源的数据使用的字符集，用于客户端显式告诉客户端所发送的语句中的的字符编码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;character_set_connection&lt;/strong&gt;：连接层的字符编码，mysql一般用character_set_connection将客户端的字符转换为连接层表示的字符。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;character_set_results&lt;/strong&gt;:查询结果从数据库读出后，将转换为character_set_results返回给前端。&lt;/p&gt;

&lt;p&gt;而我们常见的解决乱码问题的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql_query(&#39;SET NAMES GBK&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其相当于将以上三个字符集统一全部设置为GBK，这三者一致时，一般就解决了乱码问题。&lt;/p&gt;

&lt;p&gt;character_set_database:当前选中数据库的默认字符集，如当create table时没有指定字符集，将默认选择该字符集。&lt;/p&gt;

&lt;p&gt;character_set_database已经character_set_system，一般用于数据库系统内部的一些字符编码，处理数据乱码问题时，我们基本可以忽略。&lt;/p&gt;

&lt;h3&gt;5.什么情况下，表示信息丢失？&lt;/h3&gt;

&lt;p&gt;对于mysql数据库，我们可以通过&lt;strong&gt;hex(colname)&lt;/strong&gt;函数（其它数据库也有类似的函数，一些文本文件编辑器也具有这个功能），查看实际存储的字节内容，如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/259d5bdc7de57ebf071e5349db857417.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过查看存储的字节序，我们可以从根本上了解存储的内容是什么编码了。而当发现&lt;strong&gt;存储的内容全部是’3F’时，就表明存储的内容由于编码问题，信息已经丢失了，无法再找回&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;之所以出现这种信息丢失的情况，一般是将不能相互转换的字符集之间做了转换，比如我们在前文说到，UTF-8只能一个个字节地变成Latin-1，但是根本不能转换的，因为两者之间没有转换规则，Unicode的字符对应范围也根本不在Latin-1范围内，所以只能用’?(0x3F)’代替了。&lt;/p&gt;

&lt;h2&gt;总结：&lt;/h2&gt;

&lt;p&gt;本文从基础知识与实际中碰到的问题上，解析了字符编码相关内容。而之所以要从头介绍字符编码的基础知识，是为了更好的从原理上了解与解决日常碰到的编码问题，只有从根本上了解了不同字符集的规则及其之间的关系与兼容性，才能更好的解决碰到的乱码问题，也能避免由于程序中不正确的编码转换导致的信息丢失问题。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;如果您觉得这篇文字有意思，欢迎转发！欢迎更多的朋友们关注我的微信公众号：&lt;strong&gt;JustinNotes&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

</description>
        <pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-10-zi-fu-bian-ma-chang-shi-ji-wen-ti-jie-xi-6cc6d9c3f.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-10-zi-fu-bian-ma-chang-shi-ji-wen-ti-jie-xi-6cc6d9c3f.html</guid>
        
        
        <category>sharecore</category>
        
      </item>
    
      <item>
        <title>递归是如何进入编程的？</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;现在我们很难想象，曾经有段时间，在编程中使用递归的实用性甚至是可能性是受到怀疑的。然而，这种现象在1960年左右的编程社区中是真实的。创造了Algol 60的委员会也甚至在这个问题上存在分歧。递归如何进入编程语言是一个阴谋和误解的故事。当我读Gauthier van den Hove的优秀硕士论文[11]时，我第一次知道了这个故事。这也是[12]中第3章的主题。&lt;/p&gt;
&lt;p&gt;在20世纪50年代末，成立了一个委员会，他们致力于设计一种通用的、与机器无关的编程语言。在当时，这样一种语言并不是多余的奢侈品：程序员们使用的编程系统由硬件制造商提供，这些编程系统甚至没有在不同的模型间进行统一。Fortran语言是第一个例外，但它在当时仍然依赖于单一制造商。Lisp语言预示这某些事情的到来：与机器无关且不依赖于制造商。这就是Algol想要做的，但后来有更多的官方介入：在联合国教科文组织的主持下成立的IFIP（国际信息处理联合会）资助了Algol。&lt;/p&gt;
&lt;p&gt;McCarthy刚刚从他的Lisp项目中获得成功，他热衷于将递归作为一种优雅的方式让计算机做它们最擅长的事：每次重复代码并做适当的修改。事实上，在最开始的Lisp语言中没有迭代，因此添加线性表中所有元素的唯一方法是写一个递归定义的函数。作为Algol 委员会的成员，McCarthy提出让递归成为新语言的一个特征的可能性。这个提案被更紧迫的问题所排挤。结果在1960年的前几个月，当报告最终敲定时，大家在递归问题上并没有达成共识。&lt;/p&gt;
&lt;p&gt;这里有充足的理由来反对。目前还不清楚它是否能实现：该委员会中的德国派认为，像Lisp解释器这样古怪的实验研究对于可靠、高效的编译器而言，并不是一个鼓舞人心的例子。但委员会成员Naur和van Wijngaarden赞同McCarthy的观点，他们认为递归是一个太诱人的机会，不容错过。Van Wijngaarden一直怂恿他的搭档Edsger W. Dijkstra，谁赞成递归，谁就可能给他们提供新的、尚未发表的实现递归的想法。&lt;/p&gt;
&lt;p&gt;Naur是编辑Algol报告最终版本的委员会成员。二十年后，Naur想起它来，如下[1]：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;编程语言概念的最后一个重大的变化是允许递归程序激活。这如下发生。 [...] 大约在2月10日， [...] 我接到了A. van Wijngaarden的电话，通话的人同时还有E.W. Dijkstra。他们指出在报告草案中缺少一个重要的定义，即程序标识符在声明中出现的意义不同于它出现在赋值语句的左边部分。他们还明确表示，通过描述的规则防止递归激活会使情况变得复杂，因为递归有可能通过程序及其参数间接激活。他们建议在5.4.4节增加一个句子来澄清此事：“在程序中任何其他程序标识符的出现都表示程序的激活”。尽管考虑到这个问题随后带来麻烦的风险，我被这个建议的大胆和简单所迷住，并决定这样做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;结果发现在这个问题上确实存在麻烦。一些委员会成员已经被骗批准这个最终版本的报告，报告中包含一个后期加入的容易被忽略的内容，这在与委员们期望相反的方向上试图解决争论。委员会成员F.L. Bauer通过将语言中增加的递归视为“阿姆斯特丹阴谋”[1, 附录5]来表明自己的抗议。&lt;/p&gt;
&lt;p&gt;Dijkstra在2001年接受采访时明确表明，这不是Bauer部分的偏执[2]：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;递归是很重要的一步。它偷偷摸摸的被介绍。ALGOL-60报告草案在十二月最后一周被发布。我们研究它，并意识到递归调用虽然没有被说明，但已被允许。我打电话给Peter Naur—打到哥本哈根是我的第一个国际电话，我永远不会忘记这种兴奋！—并给他口头提供了一个建议，而他在报告中包含了这个建议。这个建议是这样的，“在程序中任何其他程序标识符的出现都表示程序的激活。”基本上就是这个情况。这个句子被暗中插入。并且所有人，包括没有看到这句话的人，可以说都不得不同意这个报告。这就是递归是如何被明确列入的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是，是什么原因Bauer没有实现而Dijkstra实现了递归？事实上，“递归”意味着什么呢？仔细看看Naur和Dijkstra对上述的说明，结果显示Naur说“递归程序激活”，这是一个运行时的概念；而Dijkstra说“递归”，这可以解释为源程序的属性。&lt;/p&gt;
&lt;p&gt;这里有一些澄清“递归”含义的尝试。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它有可能在执行一个程序时被调用，这使得存在一个先前调用的激活记录。&lt;/li&gt;
&lt;li&gt;可能通过调用被命名为形式参数的程序，直接或间接地调用自身。&lt;/li&gt;
&lt;li&gt;间接通过调用未命名形式参数的程序，直接或间接地调用自身。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Naur想的是第一个含义，而Dijkstra想到的可能是第二个含义。&lt;/p&gt;
&lt;p&gt;当Algol委员会中的Bauer派发现他们是阿姆斯特丹阴谋的受害者时，删除有问题的句子，这似乎是定义他们的首选版Algol的一件简单事情。他们发现这并不能消除递归。至少根据第一个含义不是递归。而这正是他们想要去掉的，因为他们希望静态分配程序的激活记录。&lt;/p&gt;
&lt;p&gt;公布的Algol-60报告通过一些努力重新定义语言：SMALGOL [3], ECMA子集 [4], 和SUBSET Algol [5]。这些人基于他们的期望而联合，共同禁止那些需要动态分配程序激活记录的方案。所有这三种语言都一致删除了Algol-60报告5.4.4节中的最后一句。他们一致认为，对于消除递归这是不够的，在这个方向上他们进行了不同的尝试。例如，在Algol-60报告中最后添加了4.7.5.6节：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;不调用程序本身，在执行任何程序中的语句和给实参赋值期间，可能发生通过名字调用相应形参的情况。在表达式赋值的期间，这也会发生在程序内部声明中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;据我所知，Algol-60报告中没有这句话。但定义子集的人像我一样为他们提供了一个替代的表达：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;不要写递归程序。不要使用递归程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;正如Dijkstra已经预见到的，他们应该加入：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;不要尝试对程序的参数做任何偷偷摸摸的事情。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这样Algol 60失去了它的一大成就：对实施者和使用者而言的一个单一文件。&lt;/p&gt;
&lt;p&gt;对递归而言的一种有效治疗是消除嵌套程序声明并要求程序在第一次调用前声明。我们看看这个，例如在C中，它已经被描述为“荣耀的汇编语言”，更重要的是被Bauer派视为注重效率的典范成果。具有讽刺意味的是，这个效率典范的设计者认为在动态分配程序激活记录或允许程序调用自身两个方面都没有问题。无需修改，在调用前声明的要求将消除相互递归的可能性。因为这不会带来动态激活记录的问题，Ritchie放宽了之前使用定义的规则，允许程序头部的冗余声明。以冗余的预先声明为代价，程序员能在C中定义相互递归的程序。&lt;/p&gt;
&lt;p&gt;当然，我们不能责备Bauer派，因为后来的人没有在这个领域的经验。有趣的是，在1960年确实存在知识表明，当有人想要有吸引力的Algol程序机制时，避免动态分配的需要是多么困难。这个程序机制与20世纪30年代以来众所周知的lambda演算类似。根据当前的标准，Algol-60报告是一个及其紧凑的文件。但与lambda演算的定义相比，它有些相形见拙。例如，在[6]中，lambda演算被定义86行，分布在10个定义中。很明显，在这个紧凑的定义中，lambda演算不允许递归函数的定义。然而在1935年，lambda演算的表达至少已经发现有两个版本的Y组合子。而这个组合子使得递归函数可能在lambda 演算中定义。&lt;/p&gt;
&lt;p&gt;一旦有人有一个简单而通用的函数定义机制时，对于避免递归是多么困难，lambda演算是另一个例子。同样，我们不能责备Bauer派不知道这些事情。事实上，直到20世纪60年代，出版了如[7]这样的书籍，使用递归的Y组合子才变得家喻户晓。&lt;/p&gt;
&lt;p&gt;这是一个安全的假设，阿姆斯特丹阴谋的肇事者并不知道。那为什么他们如此肯定他们是在正确的道路上呢？我们知道，就其中的一个策划者E.W. Dijkstra而言，他在1961年10月出版了数学中心的报告MR34“与机器无关的编程语言的设计”。在这篇报告中，Dijkstra当时考虑到相关性，提出了语言设计的一般原则，在我看来，今天仍然适用。一个安全的假设是，在一年之前，他已经确信这些原则。这些原则的普遍性使他有可能运用知识实现Y组合子，并随后获得有效实现动态分配程序激活记录的经验。&lt;/p&gt;
&lt;p&gt;在被引用最多的一篇论文中， F.P. Brooks [9]将有着狂热追随者的编程系统或语言与一系列无聊却尽管可能有用，但没有狂热追随者的项目进行对比。他指出，前者是由个人创建的，后者是由委员会创建的。他的言外之意是委员会设计的东西一定要归到无聊的类别下。为了概念上的完整性，Brooks指明了区分的标准。因为委员会设计的东西一般被认为必定没有概念上的完整性，Brooks将Algol 60放在后一类中。&lt;/p&gt;
&lt;p&gt;通过Dijkstra，我从第二种观点中走出来，并发现这一点[10, 第4页]：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;然后60年代与一个绝对的奇迹，即ALGOL 60，一起开始。这是一个奇迹，因为，一方面这种编程语言已经被一个委员会设计出来，而另一方面它的优点是那样的突出，在回顾中，它已经被认为是“大多数继承者中的一个重大的进步”(C. A. R. Hoare)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;奇迹是怎样发生的？对于Algol委员会这样一个拥有各种成员的委员会而言，它引人注目地超越理想状态，然后撰写出简明、完整的文档，并在概念的完整性上描述了一门语言，其优点得到Brooks的高度赞赏。这一切怎么可能呢？&lt;/p&gt;
&lt;p&gt;答案是这有一个酝酿期，我估计它开始于1955年10月在达姆施塔特举办的自动计算国际研讨会。几位发言者提出需要一种通用的、与机器无关的算法语言。委员会的第一个继承者开始做这项工作。他在美国接触并寻找志同道合的人。这是一个欧洲/美国的联合委员会，他们在苏黎世会面，并商定这样的语言标准。他们的文档制作得足够详细，以便该语言标准值得被称为Algol 58。&lt;/p&gt;
&lt;p&gt;这个报告的公布引起了语言进一步发展的兴趣。Peter Naur是加入Algol委员会的新成员之一。Algol 58是需要进一步发展的。许多新的想法被提出来。在一些方面，委员会超前的超越了现有最先进的理念和他们自己的理解力。&lt;/p&gt;
&lt;p&gt;同时，委员会陷入困境。尽管Naur是新成员，他看到了结构化讨论方式的需求，并创建了Algol会刊。他开始以语言定义的形式统一成果。他为了语法定义研究了Backus的形式主义，并将其应用在新语言不堪重负的语法清单上。为了赶上在1960年1月巴黎举办的最终设计会议上上交报告，他及时准备好了它。他没有时间来准备政治。&lt;/p&gt;
&lt;p&gt;Bauer1978年的回忆[1, 第41页]:&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt; &lt;span style=&quot;color: #888888;&quot;&gt;… 解释了巴黎ALGOL-60会议上一个奇怪的事件 … 在巴黎会议的开始，Peter Naur交给他们一份他的18页的报告草案，这让他们很惊讶。Peter Naur并没有被委托做这件事，这是一个既成事实。因此，如果他写的这个报告草案被“选”为讨论的基础，这听起来充满诗意；而在Peter Naur已经获得这种优势之后，该委员会只是被迫这么做。同样，他自动成为了编辑；这只是一个邀请他的礼貌问题。由于有一些担心，他会利用这个位置在语言上发挥他自己的一些影响力（发生的事情的确如此，正如他表示的），这种发展被一些委员会成员认为是非常不健康的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;换句话说，一些委员会成员真的生气了。在接下来的一页：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;但是，应当提到，不仅委员会成员之中存在怀疑态度，而且当编辑随意修改会议的结果时，成员们无奈地表示没有谁可以做些什么。为了忠诚度，他被吞噬了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然而，Bauer写道：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;在另一方面，尽管六天巴黎会议的时间进度非常紧迫，这样的情况对获得报告完成的草稿有一定的帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这就解释了奇迹：在经过了Algol计划的创造、探索和挣扎阶段后，新人出现了并接管了它。前辈隐约意识到，那个人拯救了这个计划，但他曾经受到伤害。Bauer可能永远不会原谅Naur；尽管上述引用写于1978年，在事情发生之后很久。对我而言，他们表明在某种程度上，Algol 60这个“奇迹”是Naur创造的。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;致谢&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;直到最近我才意识到在递归和同一程序的多条激活记录的可能性之间的区别。同样，我认为Peter Naur只是Algol委员会中的一个成员，而他恰好正是个编辑。只是因为Gauthier van den Hove好心的给我看了一些他的研究成果，我才了解到这里有引人入胜的故事。van den Hove先生最近发表了他的文章http://www.fibonacci.org/GHE7.3.pdf。非常感谢Paul McJones在一些方面的帮助。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;[1] “The European Side of the Last Phase of the Development of Algol 60″ by P. Naur; page 3. ACM SIGPLAN Notices 13(8), pp. 13– 44 (1978)&lt;/p&gt;
&lt;p&gt;[2] Oral History interview conducted by Philip L. Frana on August 2, 2001, Austin, Texas. OH 330, Charles Babbage Institute, University of Minneapolis.&lt;/p&gt;
&lt;p&gt;[3] “Smalgol-61″, G.A. Bachelor, J.R.H. Dempster, D.E. Knuth, and J. Speroni, eds. Comm. ACM 4(11), pp. 499–502 (1961).&lt;/p&gt;
&lt;p&gt;[4] “ECMA subset of Algol 60″ Comm. ACM 6(10), pp. 595–597 (1963).&lt;/p&gt;
&lt;p&gt;[5] “Report on SUBSET Algol 60″ Comm. ACM 7(10), pp. 626–628 (1964).&lt;/p&gt;
&lt;p&gt;[6] Introduction to Combinators and Lambda Calculus by G.R. Hindley and J.P. Seldin. Cambridge University Press, 1986.&lt;/p&gt;
&lt;p&gt;[7] Denotational Semantics by Joseph Stoy.&lt;/p&gt;
&lt;p&gt;[8] also Annual Review in Automatic Programming vol.3, Richard Goodman, ed., pp 27 — 42, Pergamon Press 1963.&lt;/p&gt;
&lt;p&gt;[9] “No Silver Bullet: Essence and Accidents of Software Engineering” by F.P. Brooks. Computer, 20 (4), pp. 10–19 (1987).&lt;/p&gt;
&lt;p&gt;[10] “Computing Science: Achievements and Challenges” by E.W. Dijkstra. ACM SIGAPP Applied Computing Review 7 (2), pp. 2–9, 1999.&lt;/p&gt;
&lt;p&gt;[11] Edsger Wybe Dijkstra: First Years in Computing Science (1951–1968) by Gauthier van den Hove. MSc thesis, University of Namur, 2009.&lt;/p&gt;
&lt;p&gt;[12] The Dawn of Software Engineering: from Turing to Dijkstra by Edgar Daylight. Lonely Scholar, 2012.&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-10-74422-f81984a70.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-10-74422-f81984a70.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
  </channel>
</rss>
