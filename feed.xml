<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT技术干货</title>
    <description>[IT技术干货iftti.com] @KernelHacks</description>
    <link>http://iftti.com/</link>
    <atom:link href="http://iftti.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 11 Aug 2014 15:37:38 +0800</pubDate>
    <lastBuildDate>Mon, 11 Aug 2014 15:37:38 +0800</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>字符编码常识及问题解析</title>
        <description>
&lt;pre&gt;&lt;code&gt;在面试的笔试题里出了一道开放性的题：请简述Unicode与UTF-8之间的关系。一道看似简单的题，能给出满意答案的却寥寥无几
，确实挺失望的。所以今天就结合我以前做过的一个关于字符编码的分享，总结一些与字符编码相关的知识和问题。如果你这方面的
知识已经掌握的足够了，可以忽略这篇文字。但如果你没法很好的回答我上面的面试题，或经常被乱码的问题所困扰，还是不妨一读。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;基本常识&lt;/h2&gt;

&lt;h3&gt;1.位和字节&lt;/h3&gt;

&lt;p&gt;说起编码，我们必须从最基础的说起，&lt;strong&gt;位和字节&lt;/strong&gt;(别觉得这个过于简单不值一说，我还真见过很多个不能区分这两者的程序员)。位（bit）是指计算机里存放的二进制值(0/1)，而8个位组合成的“位串”称为一个字节，容易算出，8个位的组合有256（ 2&lt;sup&gt;8&lt;/sup&gt; ）个组合方式，其取值范围是“00000000-11111111”，常用十六进制来表示。比如“01000001”就是一个字节，其对应的十六进制值为“0x41”。&lt;/p&gt;

&lt;p&gt;而我们通常所讲的字符编码，就是指&lt;strong&gt;定义一套规则&lt;/strong&gt;，将真实世界里的字母/字符与计算机的二进制序列进行相互转化。如我们可以针对上面的字节定义如下的转换规则：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 01000001（0x41）&amp;lt;-&amp;gt; 65 &amp;lt;-&amp;gt; &#39;A&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即用字位序“01000001”来表示字母’A’。&lt;/p&gt;

&lt;h3&gt;2.拉丁字符&lt;/h3&gt;

&lt;p&gt;拉丁字符是当今世界使用最广泛的符号了。通常我们说的拉丁字母，指的的是&lt;strong&gt;基础拉丁字母&lt;/strong&gt;,即指常见的”ABCD“等26个英文字母，这些字母与英语中一些常见的符号（如数字，标点符号）称为&lt;strong&gt;基础拉丁字符&lt;/strong&gt;，这些基础拉丁字符在使用英语的国家广为流行，当然在中国，也被用来当作汉语拼音使用。在欧洲其它一些非英语国家，为满足其语言需要，在基础拉丁字符的基础上，加上一些连字符，变音字符(如’Á’)，形成了&lt;strong&gt;派生拉丁字母&lt;/strong&gt;，其表示的字符范围在各种语言有所不同，而&lt;strong&gt;完整意义上的拉丁字符是指这些变体字符与基础拉丁字符的全集&lt;/strong&gt;。是比基础拉丁字符集大很多的一个集合。&lt;/p&gt;

&lt;h2&gt;编码标准&lt;/h2&gt;

&lt;p&gt;前文提到，字符编码是一套规则。既然是规则，就必须有标准。下面我就仔细说说常见的字符编码标准。&lt;/p&gt;

&lt;h3&gt;1.拉丁编码&lt;/h3&gt;

&lt;p&gt;ASCII的全称是American Standard Code for Information Interchange（美国信息交换标准代码）。顾名思义，这是现代计算机的发明国美国人设计的标准，而美国是一个英语国家，他们设定的&lt;strong&gt;ASCII编码也只支持基础拉丁字符&lt;/strong&gt;。ASCII的设计也很简单，&lt;strong&gt;用一个字节（8个位）来表示一个字符，并保证最高位的取值永远为’0’&lt;/strong&gt;。即表示字符含义的位数为7位，不难算出其可表达字符数为2&lt;sup&gt;7&lt;/sup&gt; =128个。这128个字符包括95个可打印的字符（涵盖了26个英文字母的大小写以及英文标点符号能）与33个控制字符（不可打印字符）。例如下表，就是几个简单的规则对应：&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;字符类型&lt;/th&gt;
&lt;th&gt;   字符&lt;/th&gt;
&lt;th&gt;二进制  &lt;/th&gt;
&lt;th&gt; 16进制&lt;/th&gt;
&lt;th&gt;10进制&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可打印字符&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;  01000001&lt;/td&gt;
&lt;td&gt;   0x41&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可打印字符&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;  01100001&lt;/td&gt;
&lt;td&gt;   0x61&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制字符&lt;/td&gt;
&lt;td&gt;   \r&lt;/td&gt;
&lt;td&gt;00001101&lt;/td&gt;
&lt;td&gt;    0x0D&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;控制字符&lt;/td&gt;
&lt;td&gt;   \n&lt;/td&gt;
&lt;td&gt;00001010&lt;/td&gt;
&lt;td&gt;    0xA&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;前面说到了，ASCII是美国人设计的，只能支持基础拉丁字符，而当计算机发展到欧洲，欧洲其它不只是用的基础拉丁字符的国家（即用更大的派生拉丁字符集）该怎么办呢？&lt;/p&gt;

&lt;p&gt;当然，最简单的办法就是将美国人没有用到的&lt;strong&gt;第8位也用上&lt;/strong&gt;就好了，这样能表达的字符个数就达到了2&lt;sup&gt;8&lt;/sup&gt; =256个，相比较原来，增长了一倍， 这个编码规则也常被称为&lt;strong&gt;EASCII&lt;/strong&gt;。EASCII基本解决了整个西欧的字符编码问题。但是对于欧洲其它地方如北欧，东欧地区，256个字符还是不够用，如是出现了&lt;strong&gt;ISO 8859&lt;/strong&gt;,为解决256个字符不够用的问题，&lt;strong&gt;ISO 8859采取的不再是单个独立的编码规则，而是由一系列的字符集（共15个）所组成&lt;/strong&gt;，分别称为ISO 8859-n(n=1,2,3…11,13…16,没有12)。其每个字符集对应不同的语言,如ISO 8859-1对应西欧语言，ISO 8859-2对应中欧语言等。其中大家所熟悉的&lt;strong&gt;Latin-1就是ISO 8859-1的别名,它表示整个西欧的字符集范围&lt;/strong&gt;。
&lt;strong&gt;需要注意的一点的是，ISO 8859-n与ASCII是兼容的，即其0000000(0x00)-01111111(0x7f)范围段与ASCII保持一致，而10000000（0x80）-11111111(0xFF)范围段被扩展用到不同的字符集。&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;2.中文编码&lt;/h3&gt;

&lt;p&gt;以上我们接触到的拉丁编码，都是单字节编码，即用一个字节来对应一个字符。但这一规则对于其它字符集更大的语言来说，并不适应，比如中文，而是出现了用多个字节表示一个字符的编码规则。常见的中文GB2312（国家简体中文字符集）就是用两个字节来表示一个汉字（注意是表示一个汉字，对于拉丁字母，GB2312还是是用一个字节来表示以兼容ASCII）。我们用下表来说明各中文编码之间的规则和兼容性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/24f49bfe6e2506470d87f565f56bbcb3.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;对于中文编码，其规则实现上是很简单的，一般都是简单的&lt;strong&gt;字符查表&lt;/strong&gt;即可，重要的是要注意其相互之间的&lt;strong&gt;兼容性&lt;/strong&gt;问题。如如果选择BIG5字符集编码，就不能很好的兼容GB2312，当做繁转简时有可能导致个别字的冲突与不一致，但是GBK与GB2312之间就不存在这样的问题。&lt;/p&gt;

&lt;h3&gt;3.Unicode&lt;/h3&gt;

&lt;p&gt;以上可以看到，针对不同的语言采用不同的编码，有可能导致冲突与不兼容性，如果我们打开一份字节序文件，如果不知道其编码规则，就无法正确解析其语义，这也是产生乱码的根本原因。有没有一种规则是全世界字符统一的呢？当然有，Unicode就是一种。为了能独立表示世界上所有的字符，Unicode采用&lt;strong&gt;4个字节表示一个字符&lt;/strong&gt;,这样理论上Unicode能表示的字符数就达到了2&lt;sup&gt;31&lt;/sup&gt; = 2147483648 = 21 亿左右个字符，完全可以涵盖世界上一切语言所用的符号。我们以汉字”微信“两字举例说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;微 &amp;lt;-&amp;gt;  \u5fae   &amp;lt;-&amp;gt;  00000000 00000000 01011111 10101110
信 &amp;lt;-&amp;gt; \u4fe1   &amp;lt;-&amp;gt;  00000000 00000000 01001111 11100001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容易从上面的例子里看出，Unicode对所有的字符编码均需要四个字节，而这对于拉丁字母或汉字来说是浪费的，其前面三个或两个字节均是0,这对信息存储来说是极大的浪费。另外一个问题就是，如何区分Unicode与其它编码这也是一个问题，比如计算机怎么知道四个字节表示一个Unicode中的字符，还是分别表示四个ASCII的字符呢？&lt;/p&gt;

&lt;p&gt;以上两个问题，困扰着Unicode，让Unicode的推广上一直面临着困难。直至UTF-8作为Unicode的一种实现后，部分问题得到解决，才得以完成推广使用。说到此，我们可以回答文章一开始提出的问题了，&lt;strong&gt;UTF-8是Unicode的一种实现方式，而Unicode是一个统一标准规范，Unicode的实现方式除了UTF-8还有其它的，比如UTF-16等。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;话说当初大牛Ben Thomson吃饭时，在一张餐巾纸上，设计出了UTF-8，然后回到房间，实现了第一版的UTF-8。关于UTF-8的基本规则，其实简单来说就两条（来自阮一峰老师的总结）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;规则1：对于单字节字符，字节的第一位为0，后7位为这个符号的Unicode码，所以对于拉丁字母，UTF-8与ASCII码是一致的。

规则2：对于n字节(n&amp;gt;1)的字符，第一个字节前n位都设为1，第n+1位为0，后面字节的前两位一律设为10，
剩下没有提及的位，全部为这个符号的Unicode编码。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过，根据以上规则，可以建立一个Unicode取值范围与UTF-8字节序表示的对应关系，如下表，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/c5e88dc37d1f58ce4b03a448d4839885.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;举例来说，’微’的Unicode是’\u5fae’，二进制表示是”00000000 00000000 01011111 10101110“，其取值就位于’0000 0800-0000 FFFF’之间，所以其UTF-8编码为’&lt;strong&gt;111&lt;/strong&gt;00101 &lt;strong&gt;10&lt;/strong&gt;111110 &lt;strong&gt;10&lt;/strong&gt;101110’ （加粗部分为固定编码内容）。&lt;/p&gt;

&lt;p&gt;通过以上简单规则，UTF-8采取变字节的方式，解决了我们前文提到的关于Unicode的两大问题。同时，作为中文使用者需要注意的一点是&lt;strong&gt;Unicode(UTF-8)与GBK，GB2312这些汉字编码规则是完全不兼容的，也就是说这两者之间不能通过任何算法来进行转换,如需转换，一般通过GBK查表的方式来进行&lt;/strong&gt;。&lt;/p&gt;

&lt;h2&gt;常见问题及解答&lt;/h2&gt;

&lt;h3&gt;1.windows Notepad中的编码ANSI保存选项，代表什么含义？&lt;/h3&gt;

&lt;p&gt;ANSI是windows的默认的编码方式，对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。所以，&lt;strong&gt;如果将一个UTF-8编码的文件，另存为ANSI的方式，对于中文部分会产生乱码&lt;/strong&gt;。&lt;/p&gt;

&lt;h3&gt;2.什么是UTF-8的BOM？&lt;/h3&gt;

&lt;p&gt;BOM的全称是Byte Order Mark，BOM是微软给UTF-8编码加上的，用于标识文件使用的是UTF-8编码，即在UTF-8编码的文件起始位置，加入三个字节“EE BB BF”。这是微软特有的，标准并不推荐包含BOM的方式。采用加BOM的UTF-8编码文件，对于一些只支持标准UTF-8编码的环境，可能导致问题。比如，在Go语言编程中，对于包含BOM的代码文件，会导致编译出错。详细可见我的&lt;a href=&quot;http://sharecore.info/blog/2013/04/05/parse-csv-to-sql-for-insert/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;3.为什么数据库Latin1字符集（单字节）可以存储中文呢？&lt;/h3&gt;

&lt;p&gt;其实不管需要使用几个字节来表示一个字符，但最小的存储单位都是字节,所以，&lt;strong&gt;只要能保证传输和存储的字节顺序不会乱即可&lt;/strong&gt;。作为数据库，只是作为存储的使用的话，只要能保证存储的顺序与写入的顺序一致，然后再按相同的字节顺序读出即可，翻译成语义字符的任务交给应用程序。比如’微’的UTF-8编码是’0xE5 0xBE 0xAE’，那数据库也存储’0xE5 0xBE 0xAE’三个字节，其它应用按顺序从数据库读取，再按UTF-8编码进行展现。这当然是一个看似完美的方案，但是只要写入，存储，读取过程中岔出任何别的编码，都可能导致乱码。&lt;/p&gt;

&lt;h3&gt;4.Mysql数据库中多个字符集变量（其它数据库其实也类似），它们之间分别是什么关系？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/fe3b60523b621b3ac871f45c83692d11.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们分别解释：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;character_set_client&lt;/strong&gt;：客户端来源的数据使用的字符集，用于客户端显式告诉客户端所发送的语句中的的字符编码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;character_set_connection&lt;/strong&gt;：连接层的字符编码，mysql一般用character_set_connection将客户端的字符转换为连接层表示的字符。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;character_set_results&lt;/strong&gt;:查询结果从数据库读出后，将转换为character_set_results返回给前端。&lt;/p&gt;

&lt;p&gt;而我们常见的解决乱码问题的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql_query(&#39;SET NAMES GBK&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其相当于将以上三个字符集统一全部设置为GBK，这三者一致时，一般就解决了乱码问题。&lt;/p&gt;

&lt;p&gt;character_set_database:当前选中数据库的默认字符集，如当create table时没有指定字符集，将默认选择该字符集。&lt;/p&gt;

&lt;p&gt;character_set_database已经character_set_system，一般用于数据库系统内部的一些字符编码，处理数据乱码问题时，我们基本可以忽略。&lt;/p&gt;

&lt;h3&gt;5.什么情况下，表示信息丢失？&lt;/h3&gt;

&lt;p&gt;对于mysql数据库，我们可以通过&lt;strong&gt;hex(colname)&lt;/strong&gt;函数（其它数据库也有类似的函数，一些文本文件编辑器也具有这个功能），查看实际存储的字节内容，如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/259d5bdc7de57ebf071e5349db857417.jpg&quot; style=&quot;width:500px&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过查看存储的字节序，我们可以从根本上了解存储的内容是什么编码了。而当发现&lt;strong&gt;存储的内容全部是’3F’时，就表明存储的内容由于编码问题，信息已经丢失了，无法再找回&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;之所以出现这种信息丢失的情况，一般是将不能相互转换的字符集之间做了转换，比如我们在前文说到，UTF-8只能一个个字节地变成Latin-1，但是根本不能转换的，因为两者之间没有转换规则，Unicode的字符对应范围也根本不在Latin-1范围内，所以只能用’?(0x3F)’代替了。&lt;/p&gt;

&lt;h2&gt;总结：&lt;/h2&gt;

&lt;p&gt;本文从基础知识与实际中碰到的问题上，解析了字符编码相关内容。而之所以要从头介绍字符编码的基础知识，是为了更好的从原理上了解与解决日常碰到的编码问题，只有从根本上了解了不同字符集的规则及其之间的关系与兼容性，才能更好的解决碰到的乱码问题，也能避免由于程序中不正确的编码转换导致的信息丢失问题。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;如果您觉得这篇文字有意思，欢迎转发！欢迎更多的朋友们关注我的微信公众号：&lt;strong&gt;JustinNotes&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

</description>
        <pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-10-zi-fu-bian-ma-chang-shi-ji-wen-ti-jie-xi-6cc6d9c3f.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-10-zi-fu-bian-ma-chang-shi-ji-wen-ti-jie-xi-6cc6d9c3f.html</guid>
        
        
        <category>sharecore</category>
        
      </item>
    
      <item>
        <title>Mojolicious 框架的环境变量列表</title>
        <description>

							&lt;p&gt;
	这是 Mojolicious 中找到的变量列表, 有时好要找, 找不到, 我找到了 Wiki 上的, 然后译成中文拿出来了.备查.&lt;br&gt;
	注意, 这并不保持下面的列表是全的.&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Home#detect&quot;&gt;&lt;strong&gt;MOJO_HOME&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Home, Mojolicious::Commands (command line opt), Mojolicious::Lite] – 当前工作的主目标&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Log#level&quot;&gt;&lt;strong&gt;MOJO_LOG_LEVEL&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;/debug|info|warn|error|fatal/&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Log, Test::Mojo] – 有效的日志级别.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojolicious#mode&quot;&gt;&lt;strong&gt;MOJO_MODE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;/&#39;development&#39;|&#39;production&#39;/&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious, Mojolicious::Commands (command line opt), Mojolicious::Lite, Mojo::Server::Hypnotoad] – 你写的应用程序工作的模式环境.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojolicious/Commands#start&quot;&gt;&lt;strong&gt;MOJO_APP&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Commands] -默认的 MOJO_APP 的值是  Mojo::HelloWorld.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojolicious/Plugin/Config#file&quot;&gt;&lt;strong&gt;MOJO_CONFIG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Plugin::Config] – 全路径的配置文件, 默认是使用的你的应用的 home 目标中的 myapp.conf 文件. &lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojolicious/Commands#run&quot;&gt;&lt;strong&gt;MOJO_NO_DETECT&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Commands] – no detect environment (PSGI, CGI, …). &lt;span class=&quot;short_text&quot; id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;&lt;span&gt;自动&lt;/span&gt;&lt;span&gt;检测部署所使用的环境&lt;/span&gt;&lt;span&gt;可以&lt;/span&gt;&lt;span&gt;用, 可以通过&lt;/span&gt;&lt;/span&gt; MOJO_NO_DETECT 来修改它.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Server/Daemon#inactivity_timeout&quot;&gt;&lt;strong&gt;MOJO_INACTIVITY_TIMEOUT&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Server::Daemon, Mojolicious::Command::daemon (command line opt),&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#inactivity_timeout&quot;&gt;Mojo::UserAgent&lt;/a&gt;] – 连接后最大的不活动的时间, 超过会被关闭. 默认 MOJO_INACTIVITY_TIMEOUT 的环境变量是 15 ( UserAgent 中是 20 ). 将该值设置为 0 将允许连接到无限期处于非活动状态.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Server/Daemon#listen&quot;&gt;&lt;strong&gt;MOJO_LISTEN&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Server::Daemon, Mojolicious::Command::daemon (command line opt)] – 命令行检查的地址, MOJO_LISTEN 的默认值是 &#39;http://*:3000&#39;.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Server/Hypnotoad#proxy&quot;&gt;&lt;strong&gt;MOJO_REVERSE_PROXY&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Server::Hypnotoad, Mojolicious::Command::daemon (command line opt), Mojo::Message::Request, Mojo::Transaction] – 激活反向代理的支持, 这会让 Mojo 来自动的检查 X-Forwarded-For 和 X-Forwarded-HTTPS headers 来自动的检查, 默认是检查  MOJO_REVERSE_PROXY 环境变量.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Content#max_buffer_size&quot;&gt;&lt;strong&gt;MOJO_MAX_BUFFER_SIZE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Content] – 最大的进行内容 body 解析时的大小, 默认的  MOJO_MAX_BUFFER_SIZE 的值是 262144 (256KB).&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Content#max_leftover_size&quot;&gt;&lt;strong&gt;MOJO_MAX_LEFTOVER_SIZE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Content] –  pipelined HTTP 请求时最大的缓冲大小,  默认的 MOJO_MAX_LEFTOVER_SIZE 的值是 262144 (256KB).&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Headers#max_line_size&quot;&gt;&lt;strong&gt;MOJO_MAX_LINE_SIZE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Headers,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Message#max_line_size&quot;&gt;Mojo::Message&lt;/a&gt;] -最大的 header 行的长度, 单件是字节, 默认的这个 MOJO_MAX_LINE_SIZE 值是 10240 (10KB).&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojolicious/Lite#File_uploads&quot;&gt;&lt;strong&gt;MOJO_MAX_MESSAGE_SIZE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Lite,&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Message#max_message_size&quot;&gt;Mojo::Message&lt;/a&gt;, Mojolicious::Lite] – 为了保护您免受接收过大的文件默认限制是 10MB (&lt;code&gt;10485760&lt;/code&gt;) , 你可以通过 MOJO_MAX_MESSAGE_SIZE 环境变量来调整这个值.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Transaction/WebSocket#max_websocket_size&quot;&gt;&lt;strong&gt;MOJO_MAX_WEBSOCKET_SIZE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Transaction::WebSocket] – 最大的 WebSocket 消息的大小, 默认是 MOJO_MAX_WEBSOCKET_SIZE 的值是 262144.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/IOLoop#DESCRIPTION&quot;&gt;&lt;strong&gt;MOJO_NO_IPV6&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::IOLoop, Mojo::IOLoop::Client, Mojo::IOLoop::Server, Mojo::UserAgent, Mojo::Server::Morbo, Mojo::Server::Daemon, Mojo::Server::Hypnotoad] – IPv6 时&lt;span&gt;禁止&lt;/span&gt;&lt;span&gt;使用&lt;/span&gt; use IO::Socket::IP.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/IOLoop#DESCRIPTION&quot;&gt;&lt;strong&gt;MOJO_NO_TLS&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::IOLoop, Mojo::IOLoop::Client, Mojo::IOLoop::Server, Mojo::UserAgent, Mojo::Server::Morbo, Mojo::Server::Daemon, Mojo::Server::Hypnotoad] – SSL 时&lt;span class=&quot;short_text&quot; id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;&lt;span&gt;禁止&lt;/span&gt;&lt;span&gt;使用 &lt;/span&gt;&lt;/span&gt;IO::Socket::SSL.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc//Mojo/Asset/Memory#max_memory_size&quot;&gt;&lt;strong&gt;MOJO_MAX_MEMORY_SIZE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Asset::Memory] – 最大只的保持在内存中的字节大小, 超过会自动的使用 Mojo::Asset::File 对象生成临时文件, 默认值是使用 MOJO_MAX_MEMORY_SIZE 环境变量, 或者 262144.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Asset/File#tmpdir&quot;&gt;&lt;strong&gt;MOJO_TMPDIR&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Asset::File] – 本模块生成文件的临时目录, 默认是从 MOJO_TMPDIR 环境变量中取得或者自动检测.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Reactor#detect&quot;&gt;&lt;strong&gt;MOJO_REACTOR&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Reactor] – 检测和加载的最佳的可用的 REACTOR ( 事件驱动 ).这会尝试从 MOJO_REACTOR 环境变量中取指你指定的, 目前有二个 Mojo::Reactor::EV 或者 Mojo::Reactor::Poll.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
	Mojo::UserAgent (ojo 相同)&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#ca&quot;&gt;&lt;strong&gt;MOJO_CA_FILE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] – TLS certificate authority 文件的位置, 默认是从 MOJO_CA_FILE 环境变量中取得. 这会激活主机名验证.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#cert&quot;&gt;&lt;strong&gt;MOJO_CERT_FILE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] – TLS certificate 文件的位置, 默认是从 MOJO_CERT_FILE 环境变量中取得.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#key&quot;&gt;&lt;strong&gt;MOJO_KEY_FILE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] –  TLS key 文件的路径, 默认是从  MOJO_KEY_FILE 的环境变量中取得.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#connect_timeout&quot;&gt;&lt;strong&gt;MOJO_CONNECT_TIMEOUT&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] – 建连时的最多的超时时间, 超过会被注销, 默认是  10 或者从环境变量的中的 MOJO_CONNECT_TIMEOUT 取得.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#max_redirects&quot;&gt;&lt;strong&gt;MOJO_MAX_REDIRECTS&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] – 最多可以重定向的数量, 超过会失败, 默认这个是是设置为 0 或者从环境变量的  MOJO_MAX_REDIRECTS 中取得.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#request_timeout&quot;&gt;&lt;strong&gt;MOJO_REQUEST_TIMEOUT&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] - &lt;span id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;建立连接的超时时间&lt;/span&gt;, &lt;span class=&quot;short_text&quot; id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;&lt;span&gt;发送请求和&lt;/span&gt;&lt;span&gt;接收整个&lt;/span&gt;&lt;span&gt;响应&lt;/span&gt;&lt;span&gt;可能需要的时间, 超过会被注消. 默认的&lt;/span&gt;&lt;/span&gt; MOJO_REQUEST_TIMEOUT 是使用环境变量的这个值或者 0. 当设置为 0 时会无限斯的等待.  每次 redirect 会自动的重置.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#detect_proxy&quot;&gt;&lt;strong&gt;MOJO_PROXY&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent, ojo] – 检查环境变量中的 HTTP_PROXY, http_proxy, HTTPS_PROXY, https_proxy, NO_PROXY 和 no_proxy 中的代理的信息. 通过这个选项, 可以打开自动的检查代理选项.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
	&lt;a class=&quot;anchor&quot; href=&quot;https://github.com/kraih/mojo/wiki/%25ENV#debugging&quot; name=&quot;user-content-debugging&quot;&gt;&lt;/a&gt;Debugging&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Exception#verbose&quot;&gt;&lt;strong&gt;MOJO_EXCEPTION_VERBOSE&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Exception] - &lt;span class=&quot;short_text&quot; id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;&lt;span&gt;激活&lt;/span&gt;&lt;span&gt;渲染时的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;详细信息&lt;/span&gt;,默认 MOJO_EXCEPTION_VERBOSE 是 0.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc//Mojo/IOLoop#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_IOLOOP_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::IOLoop] – 你可以设置 MOJO_IOLOOP_DEBUG 环境变量来打印高级的事件循环诊断信息到标准错误.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/EventEmitter#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_EVENTEMITTER_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::EventEmitter] -你可以设置 MOJO_EVENTEMITTER_DEBUG 环境变量来打印高级的事件调用的诊断信息到标准错误.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Server/Daemon#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_DAEMON_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Server::Daemon] – 你可以设置 MOJO_DAEMON_DEBUG 环境变量来打印高级的守护进程的诊断信息到标准错误.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Template#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_TEMPLATE_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Template] - 你可以设置 MOJO_TEMPLATE_DEBUG  环境变量来打印高级的模板的诊断信息到标准错误.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Transaction/WebSocket#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_WEBSOCKET_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Transaction::WebSocket] - 你可以设置 MOJO_WEBSOCKET_DEBUG 环境变量来打印高级的 WebSocket 的诊断信息到标准错误.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/Base#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_BASE_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::Base] - 你可以设置 MOJO_BASE_DEBUG 环境变量来打印高级的 Mojo::Base 的诊断信息到标准错误.&lt;/li&gt;
&lt;li&gt;
		&lt;a href=&quot;http://cpan.php-oa.com/perldoc/Mojo/UserAgent#DEBUGGING&quot;&gt;&lt;strong&gt;MOJO_USERAGENT_DEBUG&lt;/strong&gt;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::UserAgent] -你可以设置 MOJO_USERAGENT_DEBUG 环境变量来打印高级的 Mojo::UserAgent 的创建连接的请求和响应的诊断信息到标准错误.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;
		&lt;strong&gt;MOJO_REUSE&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;private&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojo::IOLoop::Server] – ?&lt;/li&gt;
&lt;li&gt;
		&lt;strong&gt;MOJO_EXE&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;private&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Lite, Mojolicious::Plugin::Config] – executable&lt;/li&gt;
&lt;li&gt;
		&lt;strong&gt;MOJO_APP_LOADER&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;em&gt;private bool&lt;/em&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Commands] – ?&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;task-list&quot; style=&quot;color: rgb(0, 0, 0); font-family: &#39;Microsoft YaHei UI&#39;, &#39;Microsoft YaHei&#39;, SimSun, &#39;Segoe UI&#39;, Tahoma, Helvetica, sans-serif, &#39;Microsoft YaHei&#39;, Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;
&lt;li&gt;
		&lt;strong&gt;PLACK_ENV&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Commands::detect] – detect PSGI (Plack)&lt;/li&gt;
&lt;li&gt;
		&lt;strong&gt;HARNESS_ACTIVE&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Mojolicious::Commands] – test&lt;/li&gt;
&lt;li&gt;
		&lt;strong&gt;HARNESS_IS_VERBOSE&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;[Test::Mojo] – test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过下面的命令来找出所有的环境变量&lt;/p&gt;
&lt;pre class=&quot;brush:perl;first-line:1;pad-line-numbers:true;highlight:null;collapse:false;&quot;&gt;
for f in $(find $(perl -MMojo -e &#39;print map { $INC{$_} =~ s/Mojo.pm//; $INC{$_} } grep /Mojo.pm/, keys %INC&#39;) -name &#39;*.pm&#39; -path &#39;*ojo*&#39;)
do 
  echo $f;
  grep -n &quot;MOJO_&quot; $f;
done

&lt;/pre&gt;
&lt;ul class=&quot;task-list&quot; style=&quot;color: rgb(0, 0, 0); font-family: &#39;Microsoft YaHei UI&#39;, &#39;Microsoft YaHei&#39;, SimSun, &#39;Segoe UI&#39;, Tahoma, Helvetica, sans-serif, &#39;Microsoft YaHei&#39;, Georgia, Helvetica, Arial, sans-serif, 宋体, PMingLiU, serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;
&lt;li&gt;
		
&lt;div style=&quot;color: gray;&quot;&gt;
			&lt;small&gt;来源： &amp;lt;&lt;a href=&quot;https://github.com/kraih/mojo/wiki/%25ENV&quot;&gt;https://github.com/kraih/mojo/wiki/%25ENV&lt;/a&gt;&lt;small&gt;&amp;gt;&lt;/small&gt;&lt;/small&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

			&lt;!--[syntaxhighlighter]--&gt;
			&lt;!--代码高亮，请勿编辑--&gt;
			

			&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://www.php-oa.com/wp-content/plugins/ck-and-syntaxhighlighter/syntaxhighlighter/styles/shCoreDefault.css&quot;&gt;
			&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://www.php-oa.com/wp-content/plugins/ck-and-syntaxhighlighter/syntaxhighlighter/styles/shThemeDefault.css&quot;&gt;
			
			&lt;!--[/syntaxhighlighter]--&gt;						

</description>
        <pubDate>Fri, 08 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-08-mojolicious-env.html-318d07a98.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-08-mojolicious-env.html-318d07a98.html</guid>
        
        
        <category>php-oa</category>
        
      </item>
    
      <item>
        <title>关于推荐系统中的特征工程</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;在多数数据和机器学习的blog里，特征工程 Feature Engineering 都很少被提到。做模型的或者搞Kaggle比赛的人认为这些搞feature工作繁琐又不重要不如多堆几个模型，想入手实际问题的小朋友又不知道怎么提取feature来建模型。我就用个性化推荐系统做个例子，简单说说特征工程在实际的问题里是怎么做。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;特征工程 Feature Engineering 在一篇Kaggle blog 上有很好的定义：&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;基本上说是，用目标问题所在的特定领域知识或者自动化的方法来生成、提取、删减或者组合变化得到特征。这些特征可能是显而易见比如说商品的品牌，也有可能需要复杂的模型计算，比如Facebook上用户A和用户B之间关系的紧密程度（FB使用了一个决策树来生成一个描述这个程度的向量，这个向量决定了他们News Feed推荐内容。）。这篇blog覆盖了一些用领域知识的方法，自动化方法在这里没有提及。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;个性化推荐系统 Personalized recommender system 比其他的机器学习方法更依赖特征工程，所以我拿它来当作问题的背景，结合我之前做过的一个推荐系统里相关经验来说说特征工程具体是个什么东西。&lt;/p&gt;
&lt;p&gt;关于推荐系统和个性化推荐系统，可以参看 wikipedia 具体不赘述，以下的要点也尽量点到为止，否则这篇又成了“收藏了Mark了”但是不会读的冗余长文。以下如果不特别指出，我就用推荐系统作为“个性化商品推荐系统”的简称。简单来说，推荐系统就是你买了商品A，我们给你算出来个推荐列表 B C D E 等等。商业上来说个性化的推荐比一般化的推荐更能吸引顾客点击或购买，所以利用特征功能提取这些“个性化”的特征放到推荐模型里就很重要，比如在我们的推荐系统里，把“品牌”的特征加进去，相对于 baseline 提高了20%左右的nDCG。推荐系统可以是机器学习的模型也可以是基于关联或者统计规则的模型，对后者来说特征对推荐效果的提升占的比重更大。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这几乎是特征工程里占大半时间的工作了：如何描述个性化并且用变量表示成特征。一般方法就是，想想你就是该商品的目标用户，你会想要什么样的个性化。&lt;/p&gt;
&lt;p&gt;比如说我们做一个女性衣服类的推荐引擎，这个网站卖各种牌子颜色尺寸等。我们列出可能相关的一些特征，然后在实际购买数据里面检查他们是否对购买结果产生影响和关联性。比如，从购买数据里可以看出，女性对衣服的品牌多数有固定偏好，比如我太太就很喜欢LOFT的衣服。这些能对购买产生影响的因素都可以成为特征。&lt;/p&gt;
&lt;p&gt;这部分工作需要很多领域知识，一般需要一组的研究人员讨论，要认真的思考这个特定问题有些什么和别的问题不同的特征，也建议和市场部销售部等有领域知识的专家讨论。经验上来说，这些特征提取的越多越好，并不用担心特征过多，因为推荐系统的数据量都比较大，并且基于一些规则可以很好的筛选特征。&lt;/p&gt;
&lt;p&gt;很多机器学习的方法也可以拿来提取一些比较不容易得到的直接特征，比如说原始数据里面没有人工标记过商品的颜色，这些颜色可以通过图像识别得到。统计规则也可以从销售数据里得到一些特征，比如该商品的流行程度。&lt;/p&gt;
&lt;p&gt;注意，这些特征可能是固定不变的，比如颜色，品牌等。它也有可能随着时间变化，比如商品的销售排名。实际经验来说，时间变化采样的颗粒度要按照实际推荐效果来决定，很可能过去三个月的销售排名对推荐效果来说可以很稳定，也或许昨天的排名对今天的推荐效果比三个月平均更好。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;大家都知道特征可以是“红”“绿”“蓝”这些离散特征，也可以是1.57这样的连续值特征。一个特征具体如何表达，要看在它在具体模型上怎么用。某些特定问题更倾向于离散特征，因为像推荐系统这样数据很大的情况可以利用模型训练这些特征得到比连续值表达更好的效果。&lt;/p&gt;
&lt;p&gt;比如说，商品的流行度可以是一个特征，因为对于某些流行的商品大家都抢着买，喜欢跟风买热门商品这一特性可以作为推荐的特征。我们可以按照销量排名然后归一化得到每个商品的流行度值，但是直接用这个连续值会有一些问题，比如说用户甲买了流行度分数为 0.75 0.5 0.2 0.1的四个商品，用户乙买了流行度为0.7的一个商品，他们两个怎么比？&lt;/p&gt;
&lt;p&gt;如果还记得算法书上说的，定义几个桶buckets，把流行度分到这几个buckets里面，可以解决这个问题。比如定义三个桶：很流行1-0。95，较流行0.95-0.75，普通0.75-0.4。这样用户甲的特征就是［0，1，1］用户乙的特征就是［0，1，0］，这样你的推荐模型就可以做一些对比他们俩的相似度或者其他推荐计算了。&lt;/p&gt;
&lt;p&gt;顺道提一下就是，为什么在这里直接把0.4之后的丢掉了以及为什么取了三个buckets。这个要看具体问题里面具体特征的用处。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果这个模型是学习训练出来的，可以用一些feature selection的办法自动去掉一些不需要的bucket。对于那些不是学习出来的模型比如是简单的相似性模型，按照实际推荐效果思考一下用户的行为特征，需要丢弃一些特征。我之前包含过0.4以下的部分但是实际测试的时候发现推荐结果会恶化，也就是说对于我们的问题，用户喜欢跟风买热门的，但是不喜欢一直买冷门的。&lt;/li&gt;

&lt;/ol&gt;
&lt;p&gt;一个比较高级的例子是 Facebook 在他们的 Machine Learning meetup 上提到的推荐News feed的特征。每个用户对于其他用户的 news 的点赞和留言以及其他的动作都会得到一个评价值，这是一系列的连续值，直接拿来训练模型效果不好。他们的做法是做了一个简单的决策树，训练的输入是这些连续值，训练目标是看对于用户A是否应该显示用户B的 news 。这个决策树显然很粗糙，但是树的每个叶子节点可以成为一个特征，那么这些叶子节点就可以当作用户A的特征向量，拿来训练其他模型比如Logistic Regression，效果不错。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;直接特征 Extacted Feature 就是比如商品的品牌，间接特征 Derived Feature 可以是从直接特征或者各种数据组合里计算推导出来的。&lt;/p&gt;
&lt;p&gt;间接特征的一个例子还是品牌特征，拿女性服饰类举例。比如我太太很喜欢LOFT的衣服，但如果一个推荐引擎使劲给推荐LOFT牌的衣服，她也会很烦。所以品牌并不完全是一个直接特征，它可以有一些变化。比如从购买数据里面看到，购买了LOFT牌衣服的，有20%也购买了J Crew牌，15%也购买了Ann Taylor牌。所以 LOFT 这个特征应该变成一个向量 [LOFT:1, J_Crew:0.2, Ann_Taylor:0.15, … ]。实际效果上它提高了推荐的多样性，在多个测试函数中都有不错的提升。&lt;/p&gt;
&lt;p&gt;间接特征另外一个高级一些的例子就是用户职业。绝大多数用户都不会填自己的职业等个人相关信息，主要是因为隐私或者就是因为麻烦。从用户的购买记录和浏览记录里面，我们可以定义几个预设的职业类型然后用户的职业预测到这几个类型里。比如用户买过一些转换插头和充电器还有旅行电脑包，所以他可能常外出旅行，所以以后推荐的商品可能是轻便携带；又比如用户买过母婴用品就知道该用户可能自己是妈妈或者家里有小孩。&lt;/p&gt;
&lt;p&gt;关于间接特征我印象最深的是美国亚马逊上的性别特征。我有一次给我太太买了给女生修眉毛的剃刀，亚马逊的推荐内容就立刻从推荐相机鼠标键盘等男性特征较强的变成了推荐时尚杂志这种有女性特征的东西。&lt;/p&gt;
&lt;p&gt;间接特征的提取可以用到很多机器学习的技术，比如根据商品的文本描述提取它的文本向量，以这些文本向量为特征训练多分类的分类器，可以把商品分类对应到各种用户职业特征上。它也可以利用人工标记的类型列表，比如时尚杂志的女性特征。它也可以利用一些统计规则，比如单反相机的购买记录里，男性的比例会高于女性，所以单反相机的性别特征向量可以是购买人数性别的比例值。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这部分的工作就看起来比较高级一些，比较贴近机器学习的研究工作。一般来说是两个方法：基于领域知识的手工选择以及自动选择方法。&lt;/p&gt;
&lt;p&gt;对于关联规则和统计规则的模型来说，手工选择的比重要大一些。比如我们已有了baseline的特征向量，现在加进去品牌偏好，给一定的权值，看评价函数输出的结果是否增强了推荐效果。对于学习的模型来说，可以通过模型自动选择每个特征的权值，按照和效果的关联来调整模型的参数。这里需要提醒的是，这个选择过程不是单增单减，很可能遇到两个特征组合A＋B效果很好，A＋C效果也很好，但是A＋B＋C效果就呵呵了。个人建议在关联和统计规则里面把最重要的几个特征放进去然后优化关于这几个特征的规则，把复杂的特征选择留给学习出来的模型。&lt;/p&gt;
&lt;p&gt;自动选择方法就很多了，用的也是常用的各种自动选择方法，什么forward selection啊backward selection啊各种regularization等等，全写在这里篇幅就太长，推荐看看一些其他关于机器学习里 feature selection 的blog和综述。值得提醒的是选择方法和评价函数的关联。推荐系统的评价函数一般不是AUC曲线等按照error计算的函数，也就是说推荐的效果并不是按照“精准”来衡量，要遵循特定问题需要的评价函数比如nDCG，所以以error matrix为标准的一些方法可能效果会不好。比如说用PCA降低特征的维度很可能把那些对推荐效果很重要的长尾特征给舍弃了。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这部分工作看起来就比较碉堡，可发挥的空间就看你的想像力和经验了。这里的组合变化远不限于把已有的特征加减乘除（比如Kernel Tricks之类），我举个比较有想像力的例子。&lt;/p&gt;
&lt;p&gt;现在市面上社交网络里面“你可能认识的人”的推荐算法几乎都是基于补全网络的办法，这样推荐的人可能只是单纯的补充和完善朋友圈，推荐的人可能很无趣，这样会导致推荐效果不好让用户失去接受推荐的兴趣。目测新浪微博用的还是这种补全的方法，因为整天向我推荐丁一晨李开复姚晨等人或者最近关注的人的共同关注人，所以推荐的人很无趣几乎都不会点关注。&lt;/p&gt;
&lt;p&gt;斯坦福小帅哥教授 Jure Leskovec 在2010年的一篇文章“Predicting Positive and Negative Links in Online Social Networks”说到过一种基于用户反馈的推荐“你可能认识的人”的推荐算法，他把邻近三人之间的三角关系总共16种正负反馈的组合当作特征向量用来表达用户A和被推荐目标用户C之间的正负反馈，在图里去掉一些已知正负反馈的边来构建训练数据，用简单的Logistic Regression训练模型达到了不错的效果。可以谷歌找到这篇文章的幻灯片，里面有图示讲解。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这篇文章就简单提及一些特征工程的常用方法，说的是手工提取特征，从这些入手可以深入研究研究具体问题的具体做法，这是一个很细致的工作可以多钻研钻研。这里面没有说到自动提取方法比如深度学习和卷积网络等等，也没说到推荐系统的其他方面比如大规模用户聚类。构建一个推荐系统需要涉及很多东西，绝对不是GraphLab或者Mahout跑个协同过滤就能上马的，这里面特征工程是很重要的一部分工作，在很多其他数据和机器学习的工作里面特征工程也差不多是从根本上改变模型效果的重要办法之一。大家在欢乐调参的过程中不妨考虑考虑搞搞特征。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-06-74951-df59c114f.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-06-74951-df59c114f.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>算法系列：求幂算法</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;h2&gt;1.快速求幂算法&lt;/h2&gt;
&lt;p&gt;在这篇文章我会展示怎样通过求一个数的幂的基本思路，来引导我们发现一些抽象的东西比如半群和含幺半群。&lt;/p&gt;
&lt;p&gt;有一个很有名的对一个数求幂的算法,也就是说,求一个数x的n次方或者这样简单表示：&lt;strong&gt;x^n&lt;/strong&gt;。&lt;a href=&quot;http://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;在&lt;a href=&quot;http://www-cs-faculty.stanford.edu/~uno/taocp.html&quot;&gt;TAOCP&lt;/a&gt;的中提出这个算法。&lt;/p&gt;
&lt;p&gt;这个算法很简单的实现就是x乘以自己n次，但是在这里当然会提供一种比这种方式更快的算法。正在谈论的算法通常被称作&lt;strong&gt;二进制法(binary method)&lt;/strong&gt;、&lt;strong&gt;梯度求幂(the powering ladder)&lt;/strong&gt;或者&lt;/p&gt;
&lt;p&gt;假设我们想计算&lt;strong&gt;2^23&lt;/strong&gt;，在这里&lt;strong&gt;x = 2&lt;/strong&gt;，&lt;strong&gt;n = 23&lt;/strong&gt;，这个算法首先把23表示成&lt;strong&gt;二进制&lt;/strong&gt;的形式&lt;strong&gt;10111&lt;/strong&gt;。扫描这个&lt;strong&gt;二进制数(10111)&lt;/strong&gt;每当遇到&lt;strong&gt;0&lt;/strong&gt;或&lt;strong&gt;1&lt;/strong&gt;，则相应的&lt;strong&gt;求x的平方&lt;/strong&gt;或者&lt;/p&gt;
&lt;p&gt;这个方法有一个问题就是它扫描二进制表示的数是从左到右进行的，但是对于计算机通常以相反的方向能够更容易实现，因此提出一个替代的算法。&lt;/p&gt;
&lt;p&gt;一个出自&lt;a href=&quot;http://www-cs-faculty.stanford.edu/~uno/taocp.html&quot;&gt;TAOCP&lt;/a&gt;的&lt;strong&gt;4.63节&lt;/strong&gt;的的简单实现如下：&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    function power1($x, $n) {
        $y = 1;

        while (true) {
            $t = $n % 2;
            $n = floor($n/2);

            if ($t == 1) {
                $y = $y * $x;
            }

            if ($n == 0) {
                break;
            }

            $x = $x * $x;
        }

        return $y;
    }&lt;/pre&gt;
&lt;p&gt;这个函数需要两个整数，&lt;strong&gt;$x&lt;/strong&gt;和&lt;strong&gt;$n&lt;/strong&gt;然后返回&lt;strong&gt;$x&lt;/strong&gt;的次幂作为结果。&lt;/p&gt;
&lt;p&gt;首先创建一个辅助变量&lt;strong&gt;$y&lt;/strong&gt;并且初始化为，把它作为乘法的主体。&lt;/p&gt;
&lt;p&gt;然后函数在每次循环迭代的时候扫描&lt;code&gt;$n&lt;/code&gt;的二进制表示的数。如果遇到&lt;strong&gt;1&lt;/strong&gt;则&lt;strong&gt;$y&lt;/strong&gt;乘上&lt;strong&gt;$x&lt;/strong&gt;，然后赋值回&lt;strong&gt;$y&lt;/strong&gt;。每次循环都会计算&lt;strong&gt;$x&lt;/strong&gt;的平方，并且把它赋值回。&lt;/p&gt;
&lt;p&gt;遇到&lt;strong&gt;1&lt;/strong&gt;意味着当前&lt;strong&gt;$n&lt;/strong&gt;的值不能被&lt;strong&gt;2&lt;/strong&gt;整除，换句话说就是，。&lt;/p&gt;
&lt;p&gt;同样的每次循环&lt;strong&gt;$n&lt;/strong&gt;都会折半，然后向下取整得到结果。当&lt;strong&gt;$n&lt;/strong&gt;等于&lt;strong&gt;0&lt;/strong&gt;的时候，我们结束循环并且返回的值。&lt;/p&gt;
&lt;p&gt;函数能够这样被调用:&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    1024 == power1(2, 10);
    =&amp;gt; true&lt;/pre&gt;
&lt;p&gt;我能想象你现在就像这个gif中的男孩。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;尽管这个算法看起来像一个 “呵呵，真有意思” 的故事，实际上当它用来计算非常的大数时时十分高效的。例如有很多的素数测试算法都是依赖这个算法的不同变式。&lt;/p&gt;
&lt;h2&gt;2.增加一些抽象&lt;/h2&gt;
&lt;p&gt;到目前为止还没有什么意想不到的事情发生，但是如果我们注意到求一个数的幂实际上和一个数&lt;strong&gt;自乘&lt;/strong&gt;多次是等价的，我们也可以看到乘法实际上等价于&lt;strong&gt;自加&lt;/strong&gt;多次。举个例子&lt;code&gt;2 * 5&lt;/code&gt;能够像这样被计算。&lt;/p&gt;
&lt;p&gt;我们能把这个算法转换成一种更普遍的形式使它能同样应用在乘法还有加法上吗?当然可以，我们仅仅需要改变几样东西。&lt;/p&gt;
&lt;p&gt;在当前实现中，我们创建&lt;strong&gt;$y&lt;/strong&gt;作为乘法的主体，并设置为&lt;strong&gt;1&lt;/strong&gt;。如果我们想把算法用在加法上，我们需要把&lt;strong&gt;$y&lt;/strong&gt;设置为。因此我们仅需要改变函数的单位元素的值。&lt;/p&gt;
&lt;p&gt;第二步要提供一个函数给我们的算法，它能够作乘法或者加法。为了实现这个目的我们会传递一个担当&lt;strong&gt;二元运算&lt;/strong&gt;的函数。例如：一个需要两个参数的函数。这个函数需要遵循以下的规则。必须满足：。还要求返回结果的类型必须和两个输入参数的类型一致。&lt;/p&gt;
&lt;p&gt;幸运的是&lt;strong&gt;加法&lt;/strong&gt;和&lt;strong&gt;乘法&lt;/strong&gt;都满足&lt;a href=&quot;http://zh.wikipedia.org/zh/%E7%BB%93%E5%90%88%E5%BE%8B&quot;&gt;结合律&lt;/a&gt;，因此我们能够仅在一个函数中包含他们然后把它传递给我们的算法。&lt;/p&gt;
&lt;p&gt;这里是这个算法新的实现：&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;  function power2($x, $n, $id, $f) {
        $y = $id;

        while (true) {
            $t = $n % 2;
            $n = floor($n/2);

            if ($t == 1) {
                $y = $f($y, $x);
            }

            if ($n == 0) {
                break;
            }

            $x = $f($x, $x);
        }

        return $y;
    }&lt;/pre&gt;
&lt;p&gt;我们能够像这样调用它:&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;   1024 == power2(2, 10, 1, function ($a, $b) { return $a * $b; });
    =&amp;gt; true&lt;/pre&gt;
&lt;p&gt;记住传递进我们算法的运算必须是可结合的,举个例子,减法不能被用在这里由于&lt;code&gt;10 - ( 5 - 3) = 8&lt;/code&gt;但是。&lt;/p&gt;
&lt;h2&gt;3.附加更抽象的概念&lt;/h2&gt;
&lt;p&gt;从数学的角度说这个算法能够在任何满足结合律的代数结构中有效(在这个案例中就是整数的乘法和加法)，换言之，它能够用在&lt;strong&gt;半群&lt;/strong&gt;中，引用一本关于的书。&lt;/p&gt;
&lt;pre&gt;一个半群的集合S含有一个可结合的运算 · ；
也就是说,x·(y · z) = (x · y) · z 对于所有的x, y, z ∈ S都成立。&lt;/pre&gt;
&lt;p&gt;同样，这个集合必须有一个&lt;code&gt;单位元素&lt;/code&gt;使得它有一个:&lt;/p&gt;
&lt;pre&gt;一个独异点是一个集合M含有一个可结合运算·；伴有一个单位元素e∈ M满足e·x = x· e =  x对于所有x∈ M都成立。&lt;/pre&gt;
&lt;p&gt;在这个预设条件下，有什么我们经常用在编程上的结构能使用这个算法的呢？如果你是一个web开发者，你不需要费大力气去获取strings。对于字符串（strings），使用&lt;strong&gt;string append&lt;/strong&gt;作为二元操作而且&lt;strong&gt;空字符串(empty string)&lt;/strong&gt;作为单位元素同样会带来类似的结果。如果一个字符串想重复次,我们创建下面的函数:&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    function repeat($s, $n) {
        return power2($s, $n, &quot;&quot;, function ($a, $b) {
                   return $a . $b;
               });
    }&lt;/pre&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    &quot;aaaaaaaaaa&quot; == repeat(&quot;a&quot;, 10);
    =&amp;gt; true&lt;/pre&gt;
&lt;p&gt;现在考虑一下&lt;strong&gt;数组(arrays)&lt;/strong&gt;(或者其它语言称为&lt;strong&gt;列表(lists)&lt;/strong&gt;)。我们想把一个数组复制n次。在这里空数组是单位元素，对PHP来说会用来作为二元操作。&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    function repeat_el($el, $n) {
        return power2(array($el), $n, array(), function ($a, $b) {
                return array_merge($a, $b);
               });
    }&lt;/pre&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class=&quot;brush: php; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    $arr = repeat_el(&quot;a&quot;, 10);
    10 == count($arr);
    =&amp;gt; true&lt;/pre&gt;
&lt;p&gt;从上不难看出,像求一个数幂运算的这样简单事情给我们带来一个优雅的算法,它能被运用一些事情上,像重复的东西还有数组里的元素。&lt;/p&gt;
&lt;h2&gt;4.延伸阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这里的快速求幂算法是基于&lt;a href=&quot;http://www-cs-faculty.stanford.edu/~uno/taocp.html&quot;&gt;TAOCP&lt;/a&gt;中，&lt;code&gt;卷二&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;所有的关于工作原理的解答都可以在&lt;strong&gt;TAOCP&lt;/strong&gt;或者在这本书&lt;a href=&quot;http://shoup.net/ntb/&quot;&gt;《A Computational Introduction to Number Theory and Algebra》&lt;/a&gt;上找到,这本书的PDF版本在作者的主页上可以免费下载。浏览章节：&lt;/li&gt;
&lt;li&gt;如果你想学习这个算法的一些用法或者想知道更多这个算法背后的理论,请查阅这本叫做&lt;a href=&quot;http://www.amazon.com/Elements-Programming-Alexander-Stepanov/dp/032163537X&quot;&gt;《Elements of Programming》&lt;/a&gt;的书。这本书非常了不起，它定义了不同类型的函数和使用类型系统确定函数是否是可结合的，二元的等等。作者是&lt;code&gt;C++STL&lt;/code&gt;的设计者,所以这本书的内容可能会比较,然后它能够直接应用在面向对象编程(OOP)。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;半群&lt;/strong&gt; 和 &lt;strong&gt;含幺半群&lt;/strong&gt;的引用来自于&lt;a href=&quot;http://www.amazon.com/Handbook-Computational-Discrete-Mathematics-Applications/dp/1584883723/&quot;&gt;《Handbook of Computational Group Theory.》&lt;/a&gt;。一本非常有趣的书，如果你对有兴趣的话。&lt;/li&gt;
&lt;li&gt;如果你想学习更多有关&lt;code&gt;幺半群&lt;/code&gt;还有它们的实现。&lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;《Learn You a Haskell》&lt;/a&gt;里的有个&lt;strong&gt;章节&lt;/strong&gt;非常有趣的介绍它:&lt;/li&gt;

&lt;/ul&gt;
&lt;h2&gt;5.你是想说Haskell?&lt;/h2&gt;
&lt;p&gt;既然我已经提及一本&lt;strong&gt;Haskell&lt;/strong&gt;的书，这里有一个Haskell实现的求幂算法，使用的递归算法来自于这本书&lt;/p&gt;
&lt;pre class=&quot;brush: perl; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;    power :: (Eq a, Integral b) =&amp;gt; (a -&amp;gt; a -&amp;gt; a) -&amp;gt; a -&amp;gt; b -&amp;gt; a
    power f a n
      | n == 1 = a
      | even n = square a (n `div` 2)
      | otherwise = f a (square a ((n-1) `div` 2))
      where
        square a&#39; n&#39; = f (power f a&#39; n&#39;) (power f a&#39; n&#39;)&lt;/pre&gt;
&lt;p&gt;几个函数调用的结果：&lt;/p&gt;
&lt;pre class=&quot;brush: perl; gutter: true; first-line: 1; highlight: []; html-script: false&quot;&gt;  *Main&amp;gt; :load pow.hs
    [1 of 1] Compiling Main             ( pow.hs, interpreted )
    Ok, modules loaded: Main.
    *Main&amp;gt; power (*) 2 10
    1024
    *Main&amp;gt; power (+) 2 10
    20
    *Main&amp;gt; power (++) &quot;a&quot; 10
    &quot;aaaaaaaaaa&quot;&lt;/pre&gt;
&lt;p&gt;正如你所看到的,这个函数调用一个function&lt;strong&gt;(a-&amp;gt;a-&amp;gt;a)&lt;/strong&gt;，例子中，对于&lt;strong&gt;integers&lt;/strong&gt;使用&lt;code&gt;*&lt;/code&gt;或者&lt;code&gt;+&lt;/code&gt;,对于&lt;strong&gt;lists&lt;/strong&gt;使用。&lt;/p&gt;
&lt;p&gt;我希望你会觉得这边文章有趣或者激起你学习与编程有关的数学的欲望。因为我认为我们掌握得越多数学方面的知识，我们就能更好的使用抽象的东西。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-06-74468-5d8d42a9b.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-06-74468-5d8d42a9b.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>使用 Mojo::UserAgent 的 Get 方法来模拟 Head 方法</title>
        <description>

							&lt;p&gt;在我们做一些测试, 接口和监控的服务时, 我们常常需要发送 Get 之类的请求, 去取得一些信息. 比如很常见的一个需求. 在监控的时候, 我们需要记录解析时间, header 取得的时间, 首字节的时间. 然后只取前 2M 断开之类, 各种小需求.&lt;/p&gt;
&lt;p&gt;在这, 我来演示一下怎么用 Mojo::UserAgent 来实现其中一些需求.&lt;/p&gt;
&lt;pre class=&quot;brush:perl;first-line:1;pad-line-numbers:true;highlight:null;collapse:false;&quot;&gt;
my $ua = Mojo::UserAgent-&amp;gt;new;

my $tx = $ua-&amp;gt;build_tx(GET =&amp;gt; &#39;http://www.php-oa.com&#39;);

$tx-&amp;gt;res-&amp;gt;content-&amp;gt;on(body =&amp;gt;sub {
    my $single = shift;
    my $length = $single-&amp;gt;headers-&amp;gt;content_length || 0;
    my $stat = $tx-&amp;gt;client_close; 
});
$ua-&amp;gt;start($tx);

Mojo::IOLoop-&amp;gt;start unless Mojo::IOLoop-&amp;gt;is_running;

&lt;/pre&gt;
&lt;p&gt;象上面这样, 使得原本的 Get 请求, 基本变得象 Head 一样的请求.因为有些服务就不支持 Head . 在这个地方, 也可以用来做首字节, 和 2M 以后立即断开之类来进行速度测试.&lt;/p&gt;
&lt;p&gt;因为上面的 content 的写事件会触发 body , 这个 body 的事件是在 header 解析之后,  body 取得之前的事件. 所以可以在这做任何事情.&lt;/p&gt;
&lt;p&gt;注意这个地方, 还是一样可以使用回调的, $ua-&amp;gt;start($tx) , 也可以是 $ua-&amp;gt;start($tx, sub {xxoo})&lt;/p&gt;

			&lt;!--[syntaxhighlighter]--&gt;
			&lt;!--代码高亮，请勿编辑--&gt;
			

			&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://www.php-oa.com/wp-content/plugins/ck-and-syntaxhighlighter/syntaxhighlighter/styles/shCoreDefault.css&quot;&gt;
			&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://www.php-oa.com/wp-content/plugins/ck-and-syntaxhighlighter/syntaxhighlighter/styles/shThemeDefault.css&quot;&gt;
			
			&lt;!--[/syntaxhighlighter]--&gt;						

</description>
        <pubDate>Wed, 06 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-06-%25e4%25bd%25bf%25e7%2594%25a8-mojo-usergent-%25e7%259a%2584-get-%25e6%2596%25b9%25e6%25b3%2595%25e6%259d%25a5%25e6%25a8%25a1%25e6%258b%259f-head-%25e6%2596%25b9%25e6%25b3%2595.html-c5168ea10.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-06-%25e4%25bd%25bf%25e7%2594%25a8-mojo-usergent-%25e7%259a%2584-get-%25e6%2596%25b9%25e6%25b3%2595%25e6%259d%25a5%25e6%25a8%25a1%25e6%258b%259f-head-%25e6%2596%25b9%25e6%25b3%2595.html-c5168ea10.html</guid>
        
        
        <category>php-oa</category>
        
      </item>
    
      <item>
        <title>我是如何绕过Google和Facebook等大站的两步验证的</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;我记得在两年前，两步验证(2-Factor-Authentication, 2FA)变得非常普及并且在各大主流网站(Google, Facebook, Yahoo 等)广泛应用。那时我十六岁，天真的我想不通为什么这么天才的想法之前没有人想到过。在那时，我认为2FA就是一个可以保护自己的金色盾牌，它可以抵御那些最复杂的网络欺诈。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当两步验证依旧是你所使用的主要应用的金色盾牌时，我开始列出以下文档—我是如何用一系列的方法来绕过Google, Facebook, Yahoo, LinkedIn的两步验证以及几乎任何向语音信箱发送两步验证标记的服务的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;注：超过959万的澳大利亚Optus公司的手机用户会受到我下面所说的语音信箱的攻击。这959万使用两步验证的用户中任何一人，都很有可能会受到我下文所说的绕过两步验证的攻击。&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;两步验证的分析，概念以及流程&lt;/h2&gt;
&lt;h3 align=&quot;left&quot;&gt;两步验证的分析&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;当将两步验证看做一个整体时，从一个攻击者的角度看来仅仅有这些东西。在我第一次对两步验证的分析中，我经常在想是否可能进行以下的攻击:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暴力搜索两步验证的pin码（有一些服务，比如苹果，只有四位的pin，并且几乎没有任何频率的限制）。&lt;/li&gt;
&lt;li&gt;发现pin生成的漏洞。&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;以上技术都是攻击的有效手段，但是通常没有人会使用，因为这些手段太老套了，已经有了相应的防御。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在我经历过这个初步测试的阶段后，我列举了更多的东西，意识到一定有一个弱点能够让我们完全避开两步验证。这个弱点就是语音信箱。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;有些读者可能会知道为什么语音信箱容易出问题，因为他们可能听说过2009年英国某些名人的语音信箱被黑客攻击的丑闻。他们进入语音信箱的方式相当让人担心，分为以下几种：默认的语音信箱PIN，未设置语音信箱PIN以及拨打自己电话的方法—都在中写到过。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在另一起类似的事故中，Cloudflare公司的CEO也是通过语音信箱绕过两步验证的受害者之一。然而，在这一次事件中，攻击更为复杂，要求攻击者设法使得AT&amp;amp;T(美国电话电报公司)的员工将Matthew Prince的语音信箱重定向到一个假的语音信箱处。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;­那些我用来登录到语音信箱账号（仅限于那些已经授权的用于测试的账号）的方法在很久以前我就写过了，并且执行起来并不难。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;虽然进入语音信箱的方法受到越来越多的关注，但是这一方法并不适应部分国家的大多数网络。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;概念及攻击流程&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;作为一个攻击者，你需要知道四件事情，才能进入被攻击者被两步验证保护的账号中。它们包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被攻击者的用户名/邮箱和密码。&lt;/li&gt;
&lt;li&gt;被攻击者关联到两步验证服务的手机号。&lt;/li&gt;
&lt;li&gt;一个手机号欺诈服务。&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;在现实中，作为一名富有经验的攻击者，以上四点要求并不难达到。获取用户名和密码可以通过任何传统的方法做到，获取关联的手机号码在现在也并不困难。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;手机号欺诈服务，比如（可以显示虚假的手机号码的服务）仅仅花费十美元就可以多次使用并且可以获得手机语音信箱的端点。另外，如果想要避免Spoofcard的登记，他们可以雇佣VoIP服务，打电话人的ID可以是虚假的，作用是一样的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;li&gt;攻击者向被攻击者的手机号拨打电话（只需要20-30秒即可）&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;由于被攻击者正在跟攻击者通话，两步验证的电话服务就会立即将验证码发送到被攻击者的语音信箱里。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这是第一个漏洞。我是这样认为的，大家或许不同意，但是我想不出别的使验证码发送到语音信箱的方法了。由于这种方法的易用性，这样做的时候有一点危险。根据过去几年的语音信箱黑客的情况来看，通过向语音信箱发送pin，看起来好像不用管下面我将要告诉你们的第二个漏洞，直接就可以绕过两步验证。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当被攻击者没有接两步验证的电话时，两步验证的pin码也会被发送到语音信箱中。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;绕过两步验证的第二阶段实际上依赖所谓的语音信箱窃听/电话窃听。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;上图是应用于澳大利亚的和我的整个第二部分的方法，它只是和上述移动服务运营商相对应（在未发现其他的运营商之前）。在图中，我展示了我认为容易受到语音信箱攻击的网络以及其他部分或者完全不易攻击的网络。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;另外，我必须指出，英国的Three 和EE网络也很容易通过电子欺骗受到语音信箱攻击。这一点最近被英国的证实。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Telco公司的自动数字识别(ANI)或者是Caller ID是用来判断呼叫者是否是语音信箱账户的合法拥有者。如果ANI或Caller ID和账户持有者相匹配，在进入语音信箱账户时系统就不会要求输入pin码。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在美国，可以不通过Caller ID来请求pin码，然而在澳大利亚，据我所知除非服务提供商从他们的服务上来解决问题，否则没有可以预防语音信箱受到欺诈攻击的办法。&lt;/p&gt;
&lt;ol start=&quot;1&quot;&gt;
&lt;li&gt;通过网络语音电话业务运营商或者专门的欺诈服务提供商获得ANI/Caller ID欺诈服务。&lt;/li&gt;
&lt;li&gt;在上文列出的所有的所有易受攻击的服务中，输入目标号码为&lt;/li&gt;
&lt;li&gt;输入被攻击者的手机号作为要显示的Caller ID.&lt;/li&gt;
&lt;li&gt;如果你在使用SpoofCard（可以显示虚假的手机号码的服务），你会收到一个手机号和一个访问码。拨打这个手机号码并输入访问码。&lt;/li&gt;
&lt;li&gt;你会连接到被攻击者的语音信箱服务提供商的终端上。在这里输入被攻击者的手机号并按#键、&lt;/li&gt;

&lt;/ol&gt;
&lt;p align=&quot;left&quot;&gt;为什么目标号码是&lt;b&gt;+610411000321&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;澳大利亚有三大主要的移动业务运营商：Telstra, Optus和Vodafone。&lt;/li&gt;
&lt;li&gt; Telstra, Optus和Vodafone可以转售他们的服务，因此业务可以拓展到其他的提供商处。&lt;/li&gt;
&lt;li&gt;所有的中间商用和Optus相同的主要服务（例如账号信息热线，语音信箱服务等）。&lt;/li&gt;
&lt;li&gt;因此，如果攻击者能够开发任何三个电信提供商其中的任何一个服务的话，每个下属的服务提供商也很有可能受影响。&lt;/li&gt;
&lt;li&gt; Optus呼叫语音信箱的主号码是“321”。&lt;/li&gt;
&lt;li&gt;然而，当进行欺诈攻击时，由于我们不能呼叫“321”我们需要远程号码去呼叫。&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;注意：Optus语音信箱中任何易被攻击的端点都已经被固定了,包括我曾经用来绕过他们的端点。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;我说过Telstra, Virgin和 Vodafone是部分易受攻击或不易受到攻击的，因为我并没有机会彻底测试攻击语音信箱的能力。然而我的确知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;&lt;/b&gt;不管是什么Caller ID或者是ANI都要求一个pin码，因此对于我上文描述的破解来说是安全的。&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;&lt;/b&gt;在未设置pin码的情况下，如果我通过欺诈服务冒充你的号码拨打，会让我设置pin码或者是进入你的语音信箱。&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;你如果不确定你现在使用的是哪种网络，或者你想检查一下自己是否是易受攻击的，我的一个朋友（(）写了一段程序通过你的手机号来确定你的在澳大利亚的移动网络。你只需输入你的手机号然后点击check就可以了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你可以在上找到检测移动网络的代码。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;向谷歌安全团队揭露&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;谷歌是两步验证的早期使用者，它的全部服务都使用了两步验证。如果你所选择的电话公司在语音信箱安全方面管理非常严格的话，谷歌现在使用的两步验证系统还是非常安全的，但是谷歌所提供的两步验证可以绕过的概率其实是非常高的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;假设你现在已经阅读了上文中提到的破解步骤，使我能够绕过两步验证的Google, Facebook, Yahoo 等其他主要的支持两步验证服务的漏洞是当你不在线时，两步验证会发送两步验证标记到你的语音信箱中。单看这一点，这是个很小的问题，但是站在安全的角度上来看，这个漏洞是非常明显的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;语音信箱并未实现全球统一化，它的安全性也是一样的。每个电话公司都运行他们自己的语音信箱管理服务。&lt;/p&gt;
&lt;ol start=&quot;1&quot;&gt;
&lt;li&gt;语音信箱服务的安全并不由谷歌管理而是由电话商管理。&lt;/li&gt;

&lt;/ol&gt;
&lt;p align=&quot;left&quot;&gt;如果你想看我和谷歌对话的全部邮件记录，你可以点击这里。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;注意：通过这个绕过两步验证的方法并不能不动声色地来盗取谷歌账户，因为很有可能一旦登录到支持两步验证的谷歌账户中就会自动向用户发送信息。在前面的步骤中你必须选择拨打电话的方式然后继续破解。这样很可能会引起受害者的警觉。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;他们对我最初的破解的回复如下：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;虽然我知道语音信箱系统不够安全这是电话商的错误，我仍然觉得谷歌把两步验证标记发送到语音信箱这一做法有缺陷，这是个很危险的做法，并且大部分2FA提供商都不这样做。因此，我作出了以下回复：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;ul style=&quot;padding-left: 30px;&quot;&gt;
&lt;li style=&quot;padding-left: 30px;&quot;&gt;
&lt;li style=&quot;padding-left: 30px;&quot;&gt;

&lt;/ul&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;谷歌很快回复道：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;假设这个问题不能修正，因此目前解决这个问题的最好方法就是禁用通过短信或者电话的两步验证，启用谷歌的两步验证，如果你绑定到手机就可能容易受到攻击。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这个设置方法可以在下面找到：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;另外，当不确定时，可以通过下面的方法通过两步验证来还原谷歌账户：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;a href=&quot;https://support.google.com/accounts/answer/183728&quot;&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;我自己还原账户时失败了，我的朋友也是一样的。然而一段时间以前，成功地还原了账户。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;状态: &lt;b&gt;&lt;/b&gt;&lt;b&gt;仍然易受攻击&lt;/b&gt;&lt;b&gt;/&lt;/b&gt;&lt;b&gt;并不会修复&lt;/b&gt; | 揭露时间: &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;———————————————————————————————————————————————————–&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;向Facebook安全团队揭露&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;因为我的一个失误，在这次揭露之前我刚刚意识到可以用攻击谷歌的类似方法来攻击Facebook。Facebook称他们的两步验证是一个类似于登录通知的特点，但是有额外的安全步骤。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;用和上述步骤相同的流程来破解，同样可以绕过Facebook的两步验证。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; 让Facebook发送验证码到语音信箱的步骤如下：&lt;/p&gt;
&lt;ol start=&quot;1&quot;&gt;
&lt;li&gt;登录账户。&lt;/li&gt;
&lt;li&gt; 点击“通过短信发送验证码”。&lt;/li&gt;
&lt;li&gt;会显示出拨打电话的选项。&lt;/li&gt;
&lt;li&gt;通过拨打被攻击者电话或其他方法保证被攻击者处于通话状态。&lt;/li&gt;
&lt;li&gt; 点击“电话通知验证码”选项。&lt;/li&gt;

&lt;/ol&gt;
&lt;p align=&quot;left&quot;&gt;另外，除了上述模式，也可以通过向”“发送表单数据为”method_requested=phone_requested”的请求。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这个方法是通过截取最初发送短信的请求，将”sms_requested”替换为”phone_requested”来实现的，它是最有效地方法。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你可以在这里找到我向facebook 披露这个漏洞的完整版本.&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;然而，他们对此的回复如下：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; Facebook在我绕过两步验证之后迅速的禁用了部分功能，他们非常迅速地采取了措施，至少是临时的措施。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;状态: 不再会受攻击| 揭露日期: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;向 LinkedIn安全团队揭露&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;正如谷歌和Facebook一样，当被攻击者没有接到系统自动来电或者占线时LinkedIn就会将两步验证码发送到被攻击者的语音信箱中。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;LinkedIn处理地很好，他们关闭了通过电话发送两步验证码这个功能，直到他们可以和第三方的两步验证提供商来修复这个问题。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你可以在这里看到我和LinkedIn发送的所有邮件.&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;他们对这一问题的主要回复如下：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot; align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;状态: 不再会受攻击| 揭露日期: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;向雅虎团队揭露 (通过HackerOne)&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;雅虎支持两步验证的主要服务也容易受到我上文中所说的攻击。事实上，对支持两步验证的雅虎账号的攻击会更严重因为攻击者并不用担心被攻击者知道他的账号已经登录。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;通常支持两步验证的网络应用会在有人登录后发送短信通知。然而，当登录到雅虎账号以后，并不会发送短信，并且可以选择通过短信或者是电话来发送验证码。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;由于攻击者不用冒着被立刻知道的风险，攻击者会更有可能登录更长时间。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当我揭示这个问题14天后，雅虎仍然没有回复，因此他们仍然很容易受到攻击。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在这里可以看到我揭示雅虎漏洞的全过程&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot; align=&quot;left&quot;&gt;状态: &lt;b&gt;仍然易受攻击&lt;/b&gt;&lt;b&gt;/&lt;/b&gt;&lt;b&gt;尚未回复&lt;/b&gt; | 揭露日期: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;向 Authy &amp;amp; Duosecurity揭露&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;我很快假设那些提供两步验证的服务都一定是易受攻击的。然而，我是错误的—因为他们知道这个事实并且对发送pin码到语音信箱这个问题有着长远考虑。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;你可以阅读我和Authy 及 Duosecurity的来往邮件&lt;a href=&quot;http://static.shubh.am/2fadisclosure/authy.pdf&quot;&gt;&lt;/a&gt; and &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这两个服务提供商都在24小时内给了我回复，并且他们对此都非常热心。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Authy&lt;/b&gt; | 状态：不易受攻击 | 揭露日期: &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Duosecurity&lt;/b&gt; | 状态:不易受攻击 | 揭露日期: &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Authy会发送空白的语音信息，Duosecurity会在验证前要求用户的交互操作。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;感谢&lt;a href=&quot;https://www.authy.com/&quot;&gt;&lt;/a&gt; 和!&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;缓解技术和向电话商 Telco 揭露：&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;广大的读者你们好，我校对了上面的一些信息，包括世界各地各种移动网络的终端。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;由于我不能查对 Telco 的海外电话商，我 知道世界各地的人都关心他们的电话商是否是易受攻击的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;要看你是否可以通过欺诈服务不用pin码就进入语音信箱，仅需要跟着上午所说的流程来，将终端号码改为你的电话商用的。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如果你的电话商也容易受到攻击请通过邮件或者是评论来告诉我。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;应对这个问题并没有想象中的那么简单，这要求重新构造两步验证的电话通知。这里是一些建议的解决方法（在给那些公司的邮件里都提到过）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求用户的交互作为验证（推荐）&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;最后也是最重要的：&lt;/p&gt;
&lt;ul&gt;

&lt;/ul&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h2 align=&quot;left&quot;&gt;向 Optus揭露&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;我和一起工作很愉快(The Sydney Morning Herald and The Age的编辑)，他帮助我把这些问题反映给Optus并且在此过程中非常热心也很有合作精神。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当我第一次发现Optus是易受攻击的时候，我的研究让我注意到这篇文章&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Optus很严肃认真地对待顾客的隐私。顾客必须设置一个独一无二的PIN码来激活他们的语音信箱系统。当他们的PIN码被用户服务重新设置时，Optus会建议他们重新设置一个只有他们自己知道的PIN码。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;至于欺诈服务，我们正在寻求多种方式来强调这一正在出现的整个工业界的威胁，包括技术上的解决途径以及进行对顾客的教育。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这篇文章的日期是2011年7月22号，距今已经三年了，令人惊讶的是这个问题依然存在并且是一个关于隐私的巨大隐患！&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;我和Ben在2014年3月2日将这个问题告诉了Optus，从那以后七天左右Optus修复了这个问题。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;然而，在修复以后几个小时之内，我能够又一次找出不用pin就可以进入任何Optus顾客语音信箱的方法。Optus正在研究这样的绕过方法，但是在没有其他公告之前，如果你使用Optus或者其他使用他们网络的代理商的服务，请假设你的语音信箱是不安全的，比如Vaya, LiveConnected, Amaysim, Exetel, Yatango 等等。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;

&lt;/div&gt;
&lt;h3 align=&quot;left&quot;&gt;备注&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;正如同我之前对于&lt;a href=&quot;http://blog.shubh.am/captchajacking-bypass-captchas/&quot;&gt;&lt;/a&gt;, &lt;a href=&quot;http://blog.shubh.am/demonstrating-the-critical-nature-of-ssrf---accessing-paypal%27s-internal-network-2/&quot;&gt;&lt;/a&gt;和 的迷恋一样，我认为语音信箱和移动网络的安全会占用我未来的许多时间。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;每个人都知道移动网络的安全性很差，但是都没有做出什么改变，直到我们因此受到侵害才能意识到这件事情的重要性。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如果你想要跟进我的语音信箱的研究，我会根据电话商的回复来定期更新我的twitter.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;以下服务可能会受到影响，但是我并没有彻底去检测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Snapchat&lt;/li&gt;
&lt;li&gt; (Uses DuoSecurity 2FA and hence is not vuln until further notice)&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;li&gt;Dynadot&lt;/li&gt;
&lt;li&gt;Airbnb&lt;/li&gt;
&lt;li&gt;Elance&lt;/li&gt;
&lt;li&gt;Chase&lt;/li&gt;
&lt;li&gt;Discover&lt;/li&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;另外有已确认是易受攻击的：&lt;/p&gt;
&lt;ul&gt;

&lt;/ul&gt;
&lt;p align=&quot;left&quot;&gt;感谢你的阅读，我希望你能够觉得这篇文章有用。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Tue, 05 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-05-74590-9247f11e1.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-05-74590-9247f11e1.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>Boolean</title>
        <description>
&lt;p&gt;The boolean &lt;span class=&quot;keyword&quot;&gt;Bool&lt;/span&gt; type in Swift underlies a lot of primitive functionality, making it an interesting demonstration of how to build a simple type. This post walks through the creation of a new &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt; type designed and implemented to be very similar to the &lt;span class=&quot;keyword&quot;&gt;Bool&lt;/span&gt; type built into Swift. We hope this walk through the design of a simple Swift type will help you better understand how the language works.&lt;/p&gt; &lt;p&gt;Let’s start with the basic definition. The &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt; type models two different cases, perfect for an enum:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;enum&lt;/span&gt; MyBool {
	&lt;span class=&quot;key&quot;&gt;case&lt;/span&gt; myTrue, myFalse
}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To reduce confusion in this post, we’ve named the cases &lt;span class=&quot;keyword&quot;&gt;myTrue&lt;/span&gt; and &lt;span class=&quot;keyword&quot;&gt;myFalse&lt;/span&gt;. We want &lt;span class=&quot;keyword&quot;&gt;MyBool()&lt;/span&gt; to produce a false value, and can do so by providing an &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;init&lt;/span&gt;() { &lt;span class=&quot;key&quot;&gt;self&lt;/span&gt; = .&lt;span class=&quot;enum&quot;&gt;myFalse&lt;/span&gt; }
}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Swift enum declarations implicitly scope their enumerators within their body, allowing us to refer to &lt;span class=&quot;keyword&quot;&gt;MyBool.myFalse&lt;/span&gt; and even &lt;span class=&quot;keyword&quot;&gt;.myFalse&lt;/span&gt; when a contextual type is available.  However, we want our type to work with the primitive &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; and &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; literal keywords. To make this work, we can make &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt; conform to the &lt;span class=&quot;keyword&quot;&gt;BooleanLiteralConvertible&lt;/span&gt; protocol like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;BooleanLiteralConvertible&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;static func&lt;/span&gt; convertFromBooleanLiteral(value: &lt;span class=&quot;title&quot;&gt;Bool&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
		&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; value ? &lt;span class=&quot;enum&quot;&gt;myTrue&lt;/span&gt; : &lt;span class=&quot;enum&quot;&gt;myFalse&lt;/span&gt;
	}
}

&lt;span class=&quot;comment&quot;&gt;// We can now assign &#39;true&#39; and &#39;false&#39; to MyBool.&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; a : &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; = &lt;span class=&quot;key&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With this set up, we have our basic type, but we still can’t do much with it.  Booleans need to be testable within an &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; condition.  Swift models this with the &lt;span class=&quot;keyword&quot;&gt;BooleanType&lt;/span&gt; protocol, which allows any type to be used as a logical condition:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;BooleanType&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; boolValue: &lt;span class=&quot;title&quot;&gt;Bool&lt;/span&gt; {
		&lt;span class=&quot;key&quot;&gt;switch self&lt;/span&gt; {
		&lt;span class=&quot;key&quot;&gt;case&lt;/span&gt; .myTrue: &lt;span class=&quot;key&quot;&gt;return true&lt;/span&gt;
		&lt;span class=&quot;key&quot;&gt;case&lt;/span&gt; .myFalse: &lt;span class=&quot;key&quot;&gt;return false&lt;/span&gt;
		}
	}
}

&lt;span class=&quot;comment&quot;&gt;// Can now test MyBool in &#39;if&#39; and &#39;while&#39; statement conditions.&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt; {}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We also want anything that conforms to &lt;span class=&quot;keyword&quot;&gt;BooleanType&lt;/span&gt; to be castable to &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt;, so we add:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
	&lt;span class=&quot;comment&quot;&gt;// MyBool can be constructed from BooleanType&lt;/span&gt;
	&lt;span class=&quot;key&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;key&quot;&gt;_&lt;/span&gt; v : &lt;span class=&quot;title&quot;&gt;BooleanType&lt;/span&gt;) {
		&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; v.&lt;span class=&quot;title&quot;&gt;boolValue&lt;/span&gt; {
			&lt;span class=&quot;key&quot;&gt;self&lt;/span&gt; = .&lt;span class=&quot;enum&quot;&gt;myTrue&lt;/span&gt;
		} &lt;span class=&quot;key&quot;&gt;else&lt;/span&gt; {
			&lt;span class=&quot;key&quot;&gt;self&lt;/span&gt; = .&lt;span class=&quot;enum&quot;&gt;myFalse&lt;/span&gt;
		}
	}
}

&lt;span class=&quot;comment&quot;&gt;// Can now convert from other boolean-like types.&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; basicBool : &lt;span class=&quot;title&quot;&gt;Bool&lt;/span&gt; = &lt;span class=&quot;key&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;(&lt;span class=&quot;pointer&quot;&gt;basicBool&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the use of &lt;span class=&quot;keyword&quot;&gt;_&lt;/span&gt; in the initializer argument list disables the keyword argument, which allows the &lt;span class=&quot;keyword&quot;&gt;MyBool(x)&lt;/span&gt; syntax to be used instead of requiring &lt;span class=&quot;keyword&quot;&gt;MyBool(v: x)&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;Now that we have basic functionality, let’s define some operators to work with it, starting with the &lt;span class=&quot;keyword&quot;&gt;==&lt;/span&gt; operator.  Simple enums that have no associated data (like &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt;) are automatically made &lt;span class=&quot;keyword&quot;&gt;Equatable&lt;/span&gt; by the compiler, so no additional code is required. However, you can make arbitrary types equatable by conforming to the &lt;span class=&quot;keyword&quot;&gt;Equatable&lt;/span&gt; protocol and implementing the &lt;span class=&quot;keyword&quot;&gt;==&lt;/span&gt; operator. If &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt; weren’t already &lt;span class=&quot;keyword&quot;&gt;Equatable&lt;/span&gt;, this would look like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Equatable&lt;/span&gt; {
}

&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; ==(lhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;, rhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;title&quot;&gt;Bool&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;switch&lt;/span&gt; (lhs, rhs) {
	&lt;span class=&quot;key&quot;&gt;case&lt;/span&gt; (.myTrue,.myTrue), (.myFalse,.myFalse):
		&lt;span class=&quot;key&quot;&gt;return true
	default&lt;/span&gt;:
		&lt;span class=&quot;key&quot;&gt;return false&lt;/span&gt;
	}
}

&lt;span class=&quot;comment&quot;&gt;// Can now compare with == and !=&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt; == &lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt; {}
&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt; != &lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt; {}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here we’re using some simple pattern matching in the &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; statement to handle this. Since &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt; is now &lt;span class=&quot;keyword&quot;&gt;Equatable&lt;/span&gt;, we get a free implementation of the &lt;span class=&quot;keyword&quot;&gt;!=&lt;/span&gt; operator.  Lets add binary operations:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; &amp;amp;(lhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;, rhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; lhs {
		&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; rhs
	}
	&lt;span class=&quot;key&quot;&gt;return false&lt;/span&gt;
}

&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; |(lhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;, rhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; lhs {
		&lt;span class=&quot;key&quot;&gt;return true&lt;/span&gt;
	}
	&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; rhs
}

&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; ^(lhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;, rhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;(lhs != rhs)
}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the basic operators in place, we can implement a variety of helpful unary and compound assignment operators as well, for example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;prefix func&lt;/span&gt; !(a: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;enum&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;key&quot;&gt;true&lt;/span&gt;
}

&lt;span class=&quot;comment&quot;&gt;// Compound assignment (with bitwise and)&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;func&lt;/span&gt; &amp;amp;=(&lt;span class=&quot;key&quot;&gt;inout&lt;/span&gt; lhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;, rhs: &lt;span class=&quot;pointer&quot;&gt;MyBool&lt;/span&gt;) {
	lhs = lhs &lt;span class=&quot;enum&quot;&gt;&amp;amp;&lt;/span&gt; rhs
}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;span class=&quot;keyword&quot;&gt;&amp;amp;=&lt;/span&gt; operator takes the left operand as &lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; because it reads and writes to it, and the effect must be visible to the user of the operator.  Swift gives you complete control over mutability of operations on value types like &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; and &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;.&lt;/p&gt; &lt;p&gt;With this, the simple &lt;span class=&quot;keyword&quot;&gt;MyBool&lt;/span&gt; type has all of the basic operations and operators.  Hopefully this post gives you a few tips that you can apply to your own code when defining higher-level types.&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-05--id=8-1cf8664dd.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-05--id=8-1cf8664dd.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>对TCP/IP网络协议的深入浅出归纳</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;前段时间做了一个开发，涉及到网络编程，开发过程比较顺利，但任务完成后始终觉得有一些疑惑。主要是因为对网络协议不太熟悉，对一些概念也没弄清楚。后来 我花了一些时间去了解这些网络协议，现在对TCP/IP网络协议有了初步的认识，在这里总结出来，可以梳理一下我对网络协议的理解，加深印象.&lt;/p&gt;
&lt;p&gt;话说两台电脑要通讯就必须遵守共同的规则，就好比两个人要沟通就必须使用共同的语言一样。一个只懂英语的人，和一个只懂中文的人由于没有共同的语言（规则）就没办法沟通。两台电脑之间进行通讯所共同遵守的规则，就是网络协议。&lt;/p&gt;
&lt;p&gt;那么谁来制定这个网络协议？&lt;/p&gt;
&lt;p&gt;国际标准化组织(ISO)定义了网络协议的基本框架，被称为OSI模型。要制定通讯规则，内容会很多，比如要考虑A电脑如何找到B电脑，A电脑在发送信息 给B电脑时是否需要B电脑进行反馈，A电脑传送给B电脑的数据的格式又是怎样的？内容太多太杂，所以OSI模型将这些通讯标准进行层次划分，每一层次解决 一个类别的问题，这样就使得标准的制定没那么复杂。OSI模型制定的七层标准模型，分别是：应用层，表示层，会话层，传输层，网络层，数据链路层，物理 层。&lt;/p&gt;
&lt;p&gt;虽然国际标准化组织制定了这样一个网络协议的模型，但是实际上互联网通讯使用的网络协议是TCP/IP网络协议。&lt;/p&gt;
&lt;p&gt;TCP/IP 是一个协议族，也是按照层次划分。共四层：应用层，传输层，互连网络层，网络接口层。 那么TCP/IP协议和OSI模型有什么区别呢？OSI网络协议模型，是一个参考模型，而TCP/IP协议是事实上的标准。TCP/IP协议参考了OSI 模型，但是并没有严格按照OSI规定的七层去划分标准，而只划分了四层，个人觉得这样会更简单点，当划分太多层次时，你很难区分某个协议是属于哪个层次 的。TCP/IP协议和OSI模型也并不冲突，TCP/IP协议中的应用层协议，就对应于OSI中的应用层，表示层，会话层。就像以前有工业部和信息产业 部，现在实行大部制后只有工业和信息化部一个部门，但是这个部门还是要做以前两个部门一样多的事情，本质上没有多大的差别。TCP/IP中有两个重要的协 议，传输层的TCP协议和互连网络层的IP协议，因此就拿这两个协议做代表，来命名整个协议族了，在说TCP/IP协议时，是指整个协议族。&lt;/p&gt;
&lt;p&gt;TCP/IP协议分为四个层次，但我们并不需要了解所有层次的协议，我觉得主要关注应用层和传输层的协议就可以了。拿寄送邮件举例， A寄邮件给B，A关心的是用什么格式写什么内容给B（应用层内容），是寄挂号信还是寄平信（传输层内容），但是A是不会去关注邮件传送过程中采用了那条路 线，邮递员是如何把信件递送到B手里的（互连网络层，网络接口层）。&lt;/p&gt;
&lt;p&gt;先说传输层，传输层有多个协议，但最主要的是TCP和UDP协议。两则的区别在于TCP协议需要接收方反馈，UDP协议不需要接收方反馈。TCP就像挂号 信，A电脑发信息给B电脑后，需要得到B电脑的反馈，这样A电脑就能知道B电脑是否已经收到信息。UDP就像平信，A电脑发信息给B电脑后，B电脑并不给 A电脑发聩，A电脑发送信息出去后并不知道B电脑是否已经收到。 因此，TCP传输比UDP传送更可靠，但是TCP传输的效率就不如UDP了。至于，在传送过程中具体选择哪种传送方式，需要具体问题具体分析。在不可靠的 网络传送过程中一般选择TCP传送方式。在讲求效率，或者不在乎传送失误的情况下可以选择UDP方式来提高传输速率。&lt;/p&gt;
&lt;p&gt;应用层的协议有很多，每一个协议代表一种类型的服务。HTTP协议，万维网服务。FTP协议，文件传送服务。POP3，邮件服务，SOAP协议webService服务。&lt;/p&gt;
&lt;p&gt;在理解TCP/IP协议的过程中，我遇到了三个困惑。&lt;/p&gt;
&lt;p&gt;1.什么是socket?&lt;/p&gt;
&lt;p&gt;以前有听说过socket编程这种说法，也有的说套接字编程。我在搜索关于socket的资料时，发现有的说socket是指一个连接，有的说 socket是一指一个端点。拿打电话做比喻，A电话机和B电话机正在通话，那么socket是指的A和B之间的连接线呢，还是指电话机（端点）？&lt;/p&gt;
&lt;p&gt;我现在的理解是，socket就是一个连接中的一个端点，一次通讯（连接）a,b端都会有一个socket。一个socket对应一个连接。&lt;/p&gt;
&lt;p&gt;2.http协议属于应用层还是传输层？&lt;/p&gt;
&lt;p&gt;http 超文本传送协议，听上去像是传输层的协议一样。但事实上大家都知道http和ftp一样都是属于应用层的协议，我先前很纳闷的是，既然是应用层的协议，怎 么就取这样一个误导人的名称啊。在对TCP/IP协议还不熟悉的时候，这很容易让人误解和纳闷的。后来，我在wiki上发现这么一段话：&lt;/p&gt;
&lt;p&gt;http中文译名问题
HTTP 在中国大陆被翻译为“超文本传输协议”，因为“transfer”在中文里有“传输”的含意。但依据 HTTP 定制者之一的 Roy Fielding博士的论文[1]（6.5.3节），作者专门强调“transfer”表示的是“（表述状态的）转移” （Representational State Transfer），而不是“传输”（transport）。故其中文译名“超文本传输协议”恰恰引种反映了这种误解。更符合原义的译名应该为“超文本转 移协议”。&lt;/p&gt;
&lt;p&gt;这段话解除了我的疑惑。那么http协议当然是应用层的协议。&lt;/p&gt;
&lt;p&gt;3.SOAP可以使用HTTP协议进行传输吗？&lt;/p&gt;
&lt;p&gt;在了解SOAP协议的过程中，看到介绍说soap可以通过tcp,udp,http协议来传送。这也是让人困惑的描述。一看这句话，就会感觉http怎么 和tcp,udp协议并列了呢？难道http还是属于传输层的协议？再加上http中文译名的问题，名字听上去像传输层，初学者又要开始头大了。&lt;/p&gt;
&lt;p&gt;事实上，http是应用层的协议，这一点可以毫无怀疑。那么现在新的问题来了。soap和http都是应用层协议，怎么说soap能用http协议来传输呢？应用层的协议可以用应用层的协议传送吗？&lt;/p&gt;
&lt;p&gt;我查阅了资料，是这样一回事情，soap将信息进行XML的序列化后，再用http协议的方式再打包进行传送，传送的方式还是tcp或者udp。做个比喻 就好理解了。tcp 和 udp 都是公路，暂且把tcp认为是一般公路，udp高速公路，soap和http就都是汽车，那么soap和http都可以在tcp和udp上跑。说soap 可以通过http来传送，实际就是说soap是小轿车，http是装轿车的卡车，把soap的信息装到http里面，然后再运输，当然走的道路还是tcp 或udp。&lt;/p&gt;
&lt;p&gt;说soap可以通过http协议来传输，这句话不太准确，比较准确第说法是：soap信息可以通过http协议包装后通过tcp或udp传输。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Mon, 04 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-04-74795-7a8fff1f3.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-04-74795-7a8fff1f3.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>你或许想要用到的三个新的Javascript API</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;如果你是一个SitePoint的老读者并且是我的粉丝的话，那么你已经知道我写了很多关于HTML5以及JS API的文章。到目前为止，我已经发布了一些介绍你现在就可以马上使用的API，尽管可能会用到polyfill的方式。（译注：不知道什么是polyfill请。）&lt;/p&gt;
&lt;p&gt;但是今天我可能要打破这个常规来给大家介绍一些仍然还处在初期阶段的API。大家必须知道这些API是非常新的，在这三个里面有两个都是在几天之前刚刚发布的。正因如此，这些API现目前都还无法使用。但是如果你有兴趣了解它们具体是用来做什么的，你可以继续阅读下面关于它们的详细介绍，同时也欢迎留下你的看法和回应。&lt;/p&gt;
&lt;p&gt;废话不多说，现在开始！&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Web Alarms API&lt;/h2&gt;
&lt;p&gt;让你可以配置设备的闹铃设置，从而能够安排通知消息或让某个特定的应用在指定的时间点启动。这个API最典型的用法会涉及到像闹钟，日历，或其他任何需要在特定时间进行特定操作的程序。&lt;/p&gt;
&lt;p&gt;自从去年开始，这个API刚刚成为了一个W3C的设计草案。因此所有有待成为W3C官方推荐的相关细节都还在初期阶段。这个API需要通过&lt;span style=&quot;color: #008000;&quot;&gt;window.navigator&lt;/span&gt;对象下的&lt;span style=&quot;color: #008000;&quot;&gt;alarms&lt;/span&gt;属性来使用。属性会提供三个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;span style=&quot;color: #008000;&quot;&gt;&lt;/span&gt;从设备获取全部已有的闹铃并以包含对象的数组形式返回。&lt;/li&gt;
&lt;li&gt;
&lt;span style=&quot;color: #008000;&quot;&gt;&lt;/span&gt;注册一个基于&lt;span style=&quot;color: #008000;&quot;&gt;Date&lt;/span&gt;对象的闹铃并返回一个对象。&lt;/li&gt;

&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;为了向大家演示理想情况下这些函数应当如何使用，这里有一个添加闹铃的例子（请记住现目前任何浏览器都不支持这段代码）&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;var alarmId;
var request = navigator.alarms.add(
    new Date(&quot;June 29, 2012 07:30:00&quot;),
    &quot;respectTimezone&quot;,
);

request.onsuccess = function (e) {
    alarmId = e.target.result;
};

request.onerror = function (e) {
    alert(e.target.error.name);
};&lt;/pre&gt;
&lt;p&gt;然后，如果你想要移除之前添加的闹铃，可以这样写：&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;var request = navigator.alarms.remove(alarmId);

request.onsuccess = function (e) {
    alert(&quot;alarm removed&quot;);
};

request.onerror = function (e) {
    alert(e.target.error.name);
};&lt;/pre&gt;
&lt;p&gt;如果你想要了解更多关于Web Alarms API，请参阅。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Presentation API&lt;/h2&gt;
&lt;p&gt;的目标就是让投影仪或TV这样的第二显示设备能够被Web使用，包括所有通过有线（HDMI，DVI等）连接以及通过无线（MiraCast, Chromecast, DLNA, AirPlay等）的设备。这个API所做的就是在请求页面与第二显示设备上的演示页面之间实现消息互通。&lt;/p&gt;
&lt;p&gt;请注意该API细节并不属于W3C标准，也不在W3C标准计划当中。这个API需要通过&lt;span style=&quot;color: #008000;&quot;&gt;window.navigator&lt;/span&gt;对象下的&lt;span style=&quot;color: #008000;&quot;&gt;presentation&lt;/span&gt;属性来使用。该属性提供了一个叫&lt;span style=&quot;color: #008000;&quot;&gt;requestSession()&lt;/span&gt;函数，以及&lt;span style=&quot;color: #008000;&quot;&gt;present&lt;/span&gt;和&lt;span style=&quot;color: #008000;&quot;&gt;availablechange&lt;/span&gt;两个事件。&lt;span style=&quot;color: #008000;&quot;&gt;requestSession()&lt;/span&gt;函数可以用来启动或恢复第二显示设备上的演示。它会返回一个&lt;span style=&quot;color: #008000;&quot;&gt;session&lt;/span&gt;对象指代当前的演示。当通过&lt;span style=&quot;color: #008000;&quot;&gt;requestSession()&lt;/span&gt;传入的url里面的演示内容被加载完成后，演示屏幕的页面会收到&lt;span style=&quot;color: #008000;&quot;&gt;present&lt;/span&gt;事件。最后，在第一张演示出现后或者最后一张演示完成后会发出事件。&lt;/p&gt;
&lt;p&gt;举个例子，来自细节文档，该API的用法如下所示：&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;&amp;lt;button disabled&amp;gt;Show&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;
var presentation = navigator.presentation,
    showButton = document.querySelector(&#39;button&#39;);

presentation.onavailablechange = function(e) {
  showButton.disabled = !e.available;
  showButton.onclick = show;
};

function show() {
  var session = presentation.requestSession(&#39;http://example.org/&#39;);

  session.onstatechange = function() {
    switch (session.state) {
      case &#39;connected&#39;:
        session.postMessage(/*...*/);
        session.onmessage = function() { /*...*/ };
        break;
      case &#39;disconnected&#39;:
        console.log(&#39;Disconnected.&#39;);
        break;
    }
  };
}
&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;p&gt;如果你想要了解更多关于Presentation API的消息，可以看看。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Standby API&lt;/h2&gt;
&lt;p&gt;让你可以在顶层浏览器页面中请求屏幕持续显示锁。这可以防止设备进入省电状态（例如屏幕自动关闭）。这个功能对有些web应用来说至关重要。例如，想像一下你正在驾车并在手机上使用基于web的导航软件（非本地应用）。如果你不去触碰屏幕的话，你的手机的屏幕会自动关闭，除非你事前在手机上进行过相关的设置。在这样的情况下，通常你是想要让屏幕保持显示状态的。这恰恰是这个API适用的地方。&lt;/p&gt;
&lt;p&gt;这个API需要通过&lt;span style=&quot;color: #008000;&quot;&gt;window.navigator&lt;/span&gt;对象下的属性来使用。它会提供两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 使当前应用能让屏幕保持显示状态。&lt;/li&gt;

&lt;/ul&gt;
&lt;p&gt;这两个函数都只接受一个参数，其只能是&lt;span style=&quot;color: #008000;&quot;&gt;“screen”&lt;/span&gt;或。前者表示操作针对的是设备屏幕，而后者针对的是除屏幕之外如CPU或广播之类的其他设备资源。&lt;/p&gt;
&lt;p&gt;以下例子会演示如何适用该API让设备屏幕保持显示状态：&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;navigator.wakeLock.request(&quot;display&quot;).then(
    function successFunction() {
        // do something
    },
    function errorFunction() {
        // do something else
    }
);&lt;/pre&gt;
&lt;p&gt;要让设备允许屏幕关闭，我们可以用以下方法：&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;navigator.wakeLock.release(&quot;display&quot;);&lt;/pre&gt;
&lt;p&gt;如果你想要了解关于Standby API的更多信息，可以参考这个。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;在这篇文章里我给大家介绍了一些崭新的JS API。我要再次强调因为它们都还处在非常早期的阶段，所以目前没有浏览器支持。因此我们也没法实际地操作它们。然而正因为它们如此之新大家现在都有机会跟进它们接下来的发展甚至参与帮助它们的细节设计的完善。&lt;/p&gt;
&lt;p&gt;Web开发的未来一片光明，加入进来吧！&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Mon, 04 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-04-74773-b877a4741.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-04-74773-b877a4741.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>浅谈服务化架构</title>
        <description>
&lt;pre&gt;&lt;code&gt;这两年来，在服务化架构设计上的实践比较多，在此对关于服务化设计一些经验稍作总结，
知识经验水平有限，如有欠缺和不准确的地方，还请指出修正！     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我在&lt;a href=&quot;http://sharecore.net/blog/2014/07/05/ke-kuo-zhan-jia-gou-de-san-ge-wei-du/&quot;&gt;《可扩展架构设计的三个维度》&lt;/a&gt;一文里，谈到服务化架构（SOA）在保证系统扩展性上，是一个比较好的架构设计实践。也谈到了通过服务网关的形式来进行多服务的注册与管理等。但困于篇幅，并未展开讲关于服务化架构实现层面上的具体细节。本文就结合我这两年来，在服务化架构设计上的一些实践经验，谈谈一个服务化框架其应该具备的一些功能以及其基本实现方式。&lt;/p&gt;

&lt;p&gt;这里说到的“服务”，本质上来说，就是指“RPC”。单纯的RPC功能实现，其实很简单，无非就是client发起调用，中间某个组件（甚至就是client本身）拦截调用信息，序列化后将信息传输到server端，server端收到调用请求后反序列化，根据请求详细发起实际调用后返回响应传输回给client端。这样的RPC很常见，比如常见的存储过程调用就是一例。但是在一个复杂的业务环境，如何管理和协同这些大量的RPC才是最麻烦的事情。所以，在此谈的“服务化”更多指的是对RPC的管理。&lt;/p&gt;

&lt;p&gt;一个复杂业务环境下的大量RPC究竟会遇到哪些问题呢？换句话说，一个服务化管理框架究竟应该具备哪些功能特性才算基本完备呢？以下是我的一些看法&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.协议选型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据序列化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为整个环境里的服务采用统一的数据序列化协议，其益处是显而易见的，能大大降低服务提供者和服务调用者之间的沟通成本，同时也可以为服务提供者减少应对不同数据协议需求而带来的代码复杂性。所以，在开始设计一个服务化框架时，第一件重要的事情就是选定一个标准的数据序列化协议。如何选择合适的序列化协议重点需要从&lt;strong&gt;扩展性，传输性能以及业界通用性（换句话说就是不同技术/语言的支持程度）&lt;/strong&gt;三个因素里来协调选择。当前看来，在这三个方面都做的比较好，也是使用最广泛的就是&lt;strong&gt;Json&lt;/strong&gt;和&lt;strong&gt;Protobuf&lt;/strong&gt;了，基于文本的Json在可读性和灵活性上占优，而基于二进制的Protobuf在传输性能生更胜一筹。而如果整个环境开发的技术栈比较统一，比如全是Java/.NET，也可以选择对这一技术更加友好的序列化协议。我这一次选择的就是Json，因为从面对的业务情况来看，传输性能不是根本矛盾，而灵活性要求较高，同时服务使用者使用的技术也较为多样化。&lt;/p&gt;

&lt;p&gt;在序列化协议的选定上&lt;strong&gt;要避免的一个误区就是采用自定义协议而不是业界通用协议&lt;/strong&gt;,自定义协议将很容易面临扩展性和使用推广方面的问题，同时，当有新的开发人员加入进来，其需要花费时间来学习与了解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;通讯协议选择&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通讯协议上的选择上灵活性比较大，有多种选择，可以在基于HTTP或TCP链接上建立自己的通讯协议。比如可以设计一个简单的header（定长）+body（序列化的请求/响应）。如果采取json作序列化协议的情况下，可以跟我本次的选择一样，采取一个类似&lt;a href=&quot;http://en.wikipedia.org/wiki/JSON-RPC&quot;&gt;json-rpc&lt;/a&gt;, 完全基于json的通讯协议：&lt;/p&gt;

&lt;p&gt;Resust:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&quot;ActionName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Do&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&quot;AppId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&quot;RequestContent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Response:&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;err&quot;&gt;“RequestId”:“xxxxxxxxx”，&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;err&quot;&gt;“HasError”:false,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&quot;ResponseContent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;对于服务访问对象主要为企业内部的情况，不太建议采取与http完全绑定的restful协议，这将牺牲链接层选择的灵活性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.注册与授权管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注册管理是解决系统交互复杂性的必备良药，我建议多余三个系统以上的系统交互，都应该具备注册管理功能。对于服务化架构来说，注册管理也是最为核心的一项功能。当服务数量和服务使用者数量爆发性增长时，最难回答的问题就是“服务被谁使用了？”以及“有哪些服务可供使用？”，注册管理就是解决这两个问题的最佳方式与实践。&lt;/p&gt;

&lt;p&gt;注册管理的实现上其实也很简单，提供一个Config Server（配置中心），收集服务提供者的注册信息（包括服务名称，服务地址（可以多个），版本，超时时间控制等），我们称为&lt;strong&gt;服务的元信息&lt;/strong&gt;。而当服务使用者需要调用相应的服务时，就可以利用这些元信息来查找和调用相应的服务了。&lt;/p&gt;

&lt;p&gt;不过，在元信息的使用上，存在两者架构方式&lt;/p&gt;

&lt;p&gt;1.服务使用者访问统一的服务中转器，由服务中转器按照注册信息以及负载情况将请求转发到相应的服务地址上。服务执行后，响应信息返回到服务中心，服务中心将响应回送给调用方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/256cb7f23c557856f23ab45f558e68dc.jpg&quot; alt=&quot;service_2&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种方式的优点是能比较好的控制所有请求的调度。当服务元信息发生变化时，能及时地调整请求转发（负载）与超时控制等。缺点是请求和响应均需要由中转中心负责转发，性能耗费较大。同时，中转中心的可用性也容易产生问题，必须通过集群的方式来解决。&lt;/p&gt;

&lt;p&gt;2.服务使用者负责从配置中心获取服务地址等信息，然后有由服务使用者直接向相对应地址上的服务发送请求，请求也直接由服务提供者返回给服务调用者。同时，服务使用者本身可以缓存一定的服务元信息，防止每次访问都要从配置中心获取，以降低配置中心的负载，增强整个系统的可用性。当配置中心的服务元信息发生变化时，通过通知的方式告知服务使用者更新本地缓存。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/36ba0cc57c1e0c0a7b8e534de7be7c60.jpg&quot; alt=&quot;service_1&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种架构方式与第一种架构相比，能显著降低性能的损耗，以及服务使用者对中心节点的直接依赖。但代价是需要彻底改造服务使用者的调用方式，框架的代码必须侵入到客户端的开发中去。一般会针对不同的客户端提供clientLib，但当客户端实现方式多样化时，这种代价是非常大的。&lt;/p&gt;

&lt;p&gt;由于我这次面对的客户端多样性，客户端开发也不在控制范围内，所以选择就是第一种方式。&lt;/p&gt;

&lt;p&gt;关于授权，可以与注册管理相互结合，将授权信息同一保存到配置中心。对于企业内部访问的服务，做到通过IP+AppId授权应该就够了。这里有个经验是可以将授权和服务版本确认两者结合起来，即在&lt;strong&gt;授权的同时完成服务版本的确定&lt;/strong&gt;，而不采取由客户端发起访问时指定版本的方式，这样做的好处是框架和服务提供者对于服务版本变更和灰度发布具有更高的可控制性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.路由与过载保护&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://sharecore.net/blog/2014/07/05/ke-kuo-zhan-jia-gou-de-san-ge-wei-du/&quot;&gt;《可扩展架构设计的三个维度》&lt;/a&gt;一文里谈到通过单元化架构以满足Z轴扩展，以满足差异性的需求或者做到安全隔离。而&lt;strong&gt;服务路由是实现这种单元化架构的基本保障&lt;/strong&gt;，以保证能将来自不同访问者请求或者不同的请求内容，分发到不同的服务提供区域去，形成单元化架构的闭环。当然，路由功能并不一定需要框架来独立实现，业界许多通用的（软）负载均衡器可以协助实现，如Nginx/HAProxy/LVS这些。但是这类通用的负载均衡软件的问题是路由算法比较通用，当需要扩展到与业务逻辑相关的路由绑定时，比较麻烦，比如需要用户ID按权重分配路由。在此建议，&lt;strong&gt;可以采取通用的负载均衡软件当第一层接入，而在服务节点之间采取自己实现路由模块的方式。&lt;/strong&gt;而在实现路由模块时，需要将扩展性上的考虑放在第一位。&lt;/p&gt;

&lt;p&gt;对于服务化架构，保障提供服务提供者的业务系统不受“恶意”调用或突发性激增调用的破坏，过载保护功能至关重要，它能起到系统“保险丝”的效果。前文提到可用于接入的Nginx/HAProxy/LVS这些软件，也多少提供了过载保护的功能。如果自己实现过载保护模块，具体可参见我的&lt;a href=&quot;http://sharecore.net/blog/2014/06/21/guo-zai-bao-hu-suan-fa-qian-xi/&quot;&gt;《过载保护算法浅析》&lt;/a&gt;一文。对于过载保护的一个经验是：&lt;strong&gt;过载保护越靠近服务访问前端越好。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.服务拆分与组合化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;传统的SOA概念，指的是不同的应用系统之间相互通过大粒度服务的方式进行集成。而当今的服务化架构已经摆脱了这一概念的束缚，更多讲的是系统内部模块级甚至是功能级的服务化模式。也就是说服务实现的粒度更小了。这当然为应用和服务的实现带来了更强的灵活性，服务交付周期也大大缩短了。但这样的细粒度拆分服务，带来的问题是项功能的实现需要访问的服务数量成倍的增加。如下图所示：一个客户下订单的功能实现需要分别访问：客户信息服务，产品类别服务，库存服务，订单管理服务等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/e310fe10a83859029875682319ae4959.jpg&quot; alt=&quot;service_3&quot;&gt;&lt;/p&gt;

&lt;p&gt;这将显著增加功能实现的复杂性。为了解决这一问题，我们只能再次使用那条永远有效的“中间层定律”：&lt;strong&gt;任何计算机问题都可以通过中间加一层来解决。&lt;/strong&gt; 我们可以将相应的服务组合成一个新的服务提供出去，比如上面的例子，我们可以按以下方式组合：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sharecore.net/f8ede80d4eaaaa4ab773f3d973a34a46.jpg&quot; alt=&quot;service_4&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.基于配置的服务运行时提供&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前文已经概述了一个服务化框架应该具有的一些基本功能以及一些基本的架构实现方式。但这个服务框架究竟如何与业务开发相结合呢？也就是说业务逻辑代码与框架代码之间如何隔离,而不是让框架的功能代码侵入到业务逻辑代码的开发中来?这里通用的做法就是&lt;strong&gt;通过基于配置，由框架提供运行时，动态加载业务代码的方式&lt;/strong&gt;。做到这点，只需要约束业务逻辑代码实现相应的接口/基类，然后打包成相应的组件（如jar/dll/so等）提供给框架加载运行即可，类似于java servlet的开发，业务开发完全不用关心服务化框架任何功能，专注开发业务逻辑即可。同时，对于既有代码的服务化也将变得简单，只需要稍加重构封装出实现相应的接口即可。&lt;/p&gt;

&lt;p&gt;配置类似于：&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;serviceName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Customer.GetCustomer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;biz&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.customer.getCustomer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;biz&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;同时，这种基于组件配置的服务实现，对于组合组件实现服务也非常简单。只需要将上面的配置改为嵌套的方式既可以实现组合。比如对于订单生成服务只要组合如下：&lt;/p&gt;

&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;serviceName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Order.CreateOrder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;biz&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.inventory.checkInventory&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;biz&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.order.createOrder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nt&quot;&gt;&amp;lt;biz&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.inventory.updateInventory&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/biz&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/biz&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;biz&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本来看，服务化架构已经在业界完成了落地，尤其是互联网公司，更是基于这一架构的领先者，有许多经验值得借鉴。当然，这个落地的服务化架构，与当年被各大商业公司用WS-*和ESB玩坏的SOA概念相去甚远。也再一次证明，那些被鼓吹出来的技术概念，只有当那些商业公司不再炒作之时，方是其真正落地之日（SOA如此，当今热炒的“大数据”，“云计算”这些概念又何尝不会是如此呢？）。在技术被鼓吹得风头正劲时，千万要保持冷静，别被那些商业公司所忽悠,你完全可以自己实现更轻量级更具有扩展性的架构。不信的话，可以去问问，那些当年花大价钱去买SOA商业组件的公司，他们还好吗？&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;如果您觉得这篇文字有意思，欢迎转发！欢迎更多的朋友们关注我的微信公众号：&lt;strong&gt;JustinNotes&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

</description>
        <pubDate>Sat, 02 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-02-qian-tan-fu-wu-hua-kuang-jia-de-ji-ben-gong-neng-25b061573.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-02-qian-tan-fu-wu-hua-kuang-jia-de-ji-ben-gong-neng-25b061573.html</guid>
        
        
        <category>sharecore</category>
        
      </item>
    
      <item>
        <title>机器学习算法基础概念学习总结</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;h2&gt;1.基础概念：&lt;/h2&gt;
&lt;p&gt;(1) 10折交叉验证：英文名是10-fold cross-validation，用来测试算法的准确性。是常用的测试方法。将数据集分成10份。轮流将其中的9份作为训练数据，1分作为测试数据，进行试验。每次试验都会得出相应的正确率（或差错率）。10次的结果的正确率（或差错率）的平均值作为对算法精度的估计，一般还需要进行多次10折交叉验证，在求其平均值，对算法的准确性进行估计。&lt;/p&gt;
&lt;p&gt;(2) 极大似然估计：极大似然估计，只是一种概率论在统计学中的应用，它是参数评估的方法之一。说的 已知某个随机样本满足某种概率分布，但是其中具体的参数不清楚，参数估计通过若干次实验，观察其结果，利用结果推出参数的大概值。极大似然估计是建立在这样的思想上的：已知某个参数能使这个样本出现的概率最大。我们当然不会再去选择其他其他小概率的样本，所以干脆就把这个参数作为估计的真实值。&lt;/p&gt;
&lt;p&gt;(3) 在信息论中，熵表示的是不确定性的量度。信息论的创始人香农在其著作《通信的数学理论》中提出了建立在概率统计模型上的信息度量。他把信息定义为”用来消除不确定性的东西“。熵的定义为信息的期望值。&lt;/p&gt;
&lt;p&gt;ps:熵指的是体系的混乱程度，它在控制论，概率论，数论，天体物理，生命科学等领域都有重要的应用，在不同的学科中也有引申出更为具体的定义，是各个领域十分重要的参量。熵由鲁道夫.克劳修斯提出，并应用在热力学中。后来在，克劳德.埃尔伍德.香农 第一次将熵的概念引入到信息论中来。&lt;/p&gt;
&lt;p&gt;(4) 后验概率是信息论的基本概念之一。在一个通信系统中，在收到某个消息之后，接收端所了解到的该消息发送的概率称为后验证概率。后验概率是指在得到”结果“的信息后重新修正的概率，如贝叶斯公式中的。是执果寻因的问题。后验概率和先验概率有着不可分割的联系，后验的计算要以先验概率为基础，其实说白了后验概率其实就是条件概率。&lt;/p&gt;
&lt;p&gt;(5) PCA 主成分分析:&lt;br&gt;
优点：降低数据的复杂性，识别最重要的多个特征。&lt;br&gt;
缺点：不一定需要，且可能损失有用信息。&lt;br&gt;
适用适用类型：数值型数据。
技术类型：降维技术。&lt;/p&gt;
&lt;p&gt;简述：在PCA中，数据从原来的坐标系转换到了新的坐标系，新坐标系的选择是由数据本身决定的。第一个新坐标轴选择时原始数据中方差最大的方向，第二个新坐标轴的选择和第一个坐标轴正交且具有最大方差的方向。该过程一直重复，重复次数为原始数据中特征的数目。会发现大部分方差都包含在最前面的几个新坐标轴中。因此，可以忽略余下的坐标轴，即对数据进行了降维处理。除了PCA主成分分析技术，其他降维技术还有ICA(独立成分分析)，因子分析等。&lt;/p&gt;
&lt;p&gt;(6) 将不同的分类器组合起来，而这种组合结果则被称为集成方法（ensemble method）或者元算法（meta-algorithm）。&lt;/p&gt;
&lt;p&gt;(7) 回归算法和分类算法很像，不过回归算法和分类算法输出标称型类别值不同的是，回归方法会预测出一个连续的值，即回归会预测出具体的数据，而分类只能预测类别。&lt;/p&gt;
&lt;p&gt;(8) SVD(singular value decomposition) 奇异值分解:&lt;br&gt;
优点：简化数据，去除噪声，提高算法的结果。&lt;br&gt;
缺点：数据转换可能难以理解。&lt;br&gt;
适用数据类型：数值型数据。
ps:SVD是矩阵分解的一种类型。&lt;/p&gt;
&lt;p&gt;总结：SVD是一种强大的降维工具，我们可以利用SVD来逼近矩阵并从中提取重要特征。通过保留矩阵80%~90%的能量，就可以得到重要的特征并去掉噪声。SVD已经运用到多个应用中，其中一个成功的应用案例就是推荐引擎。推荐引擎将物品推荐给用户，协同过滤则是一种基于用户喜好和行为数据的推荐和实现方法。协同过滤的核心是相似度计算方法，有很多相似度计算方法都可以用于计算物品或用户之间的相似度。通过在低维空间下计算相似度，SVD提高了推荐引擎的效果。&lt;/p&gt;
&lt;p&gt;(9)共线性：是指线性回归模型中的解释变量之间由于存在精确的相关关系或高度相关关系而使模型估计失真或难以估计。&lt;/p&gt;
&lt;h2&gt;2.基本算法&lt;/h2&gt;
&lt;p&gt;2.1 Logistic回归：&lt;br&gt;
优点：计算代价不高，易于理解和实现。&lt;br&gt;
缺点：容易欠拟合，分类精度可能不高。&lt;br&gt;
适用数据类型：数值型和标称型数据。&lt;br&gt;
类别：分类算法。
试用场景：解决二分类问题。&lt;/p&gt;
&lt;p&gt;简述：Logistic回归算法基于Sigmoid函数，或者说Sigmoid就是逻辑回归函数。Sigmoid函数定义如下：1/（1+exp（-z))。函数值域范围(0,1)。可以用来做分类器。
Sigmoid函数的函数曲线如下：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;逻辑回归模型分解如下： (1)首先将不同维度的属性值和对应的一组权重加和:&lt;br&gt;
公式如下： z = w0+w1x1+w2x2+…+wm*xm。（其中x1,x2,…,xm是某样本数据的各个特征，维度为m）&lt;br&gt;
ps：这里就是一个线性回归。W权重值就是需要经过训练学习到的数值，具体W向量的求解，就需要用到极大似然估计和将似然估计函数代入到 优化算法来求解。最常用的最后化算法有 梯度上升算法。
由上面可见：逻辑回归函数虽然是一个非线性的函数，但其实其去除Sigmoid映射函数之后，其他步骤都和线性回归一致。&lt;/p&gt;
&lt;p&gt;(2)然后将上述的线性目标函数 z 代入到sigmond逻辑回归函数，可以得到值域为（0,0.5)和（0.5,1）两类值，等于0.5的怎么处理还以自己定。这样其实就得到了2类数据，也就体现了二分类的概念。&lt;/p&gt;
&lt;p&gt;总结：Logistic回归的目的是寻找一个非线性函数Sigmoid的最佳拟合参数，参数的求解过程可以由最优化算法来完成。在最优化算法中，最常用的就是梯度上升算法，而梯度上升算法有可以简化为随机梯度上升算法。&lt;/p&gt;
&lt;p&gt;2.2 SVM(Support Vector Machines) 支持向量机：&lt;/p&gt;
&lt;p&gt;优点：泛化错误率低，计算开销不大，结果易解释。&lt;br&gt;
缺点：对参数调节和核函数的选择敏感，原始分类器不加修改仅适用于处理二分类问题。&lt;br&gt;
适用数据类型：数值型和标称型数据。&lt;br&gt;
类别：分类算法。
试用场景：解决二分类问题。&lt;/p&gt;
&lt;p&gt;简述：通俗的讲，SVM是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，即支持向量机的学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。或者简单的可以理解为就是在高维空间中寻找一个合理的超平面将数据点分隔开来，其中涉及到非线性数据到高维的映射以达到数据线性可分的目的。&lt;/p&gt;
&lt;p&gt;支持向量概念：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;上面样本图是一个特殊的二维情况，真实情况当然可能是很多维。先从低纬度简单理解一下什么是支持向量。从图中可以看到3条线，中间那条红色的线到其他两条先的距离相等。这条红色的就是SVM在二维情况下要寻找的超平面，用于二分类数据。而支撑另外两条线上的点就是所谓的支持向量。从图中可以看到，中间的超平面和另外两条线中间是没有样本的。找到这个超平面后，利用超平面的数据数学表示来对样本数据进行二分类，就是SVM的机制了。&lt;/p&gt;
&lt;p&gt;ps： 《机器学习实战》书中有这么几个概念：&lt;/p&gt;
&lt;p&gt;(1)如果能找到一个直线（或多维的面）将样本点分开，那么这组数据就是线性可分的。将上述数据集分隔开来的直线(或多维的面)称为分隔超平面。分布在超平面一侧的数据属于一个类别，分布在超平面另一侧的数据属于另一个类别&lt;br&gt;
(2)支持向量（Support vector）就是分离超平面最近的那些点。
(3)几乎所有分类问题都可以使用SVM，值得一提的是，SVM本身是一个二分类分类器，对多类问题应用SVM需要对代码做一些修改。&lt;/p&gt;
&lt;p&gt;公式：&lt;br&gt;
SVM有很多实现，但是本章值关注其中最流行的一种实现，及序列最小优化（Sequential Minimal Optimization，SMO）算法。
其公式如下：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;SMO算法的目标是求出一些列的alpha，一旦求出了alpha，就很容易计算出权重向量w并得到分隔超平面。&lt;/p&gt;
&lt;p&gt;SMO算法的工作原理是：每次循环中选择两个alpha进行优化处理。一旦找到一对合适的alpha，那么就增大其中一个同时减小另一个。这里所谓的“合适”就是指两个alpha必须符合一定的条件，条件之一就是这两个alpha必须要在间隔边界之外，而其第二个条件则是这两个alpha还没有进行过区间化处理或者不在边界上。&lt;/p&gt;
&lt;p&gt;核函数将数据从低维度映射到高维：
SVM是通过寻找超平面将数据进行分类的，但是当数据不是线性可分的时候就需要利用核函数将数据从低维映射到高维使其线性可分后，在应用SVM理论。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;这个二维数据分布不是线性可分的，其方程为：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;但是通过核函数维度映射后，其变为：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;对应的方程为：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;这样映射后的数据就变成了线性可分的，就可以应用SVM理论了。&lt;/p&gt;
&lt;p&gt;总结：支持向量机是一种分类器。之所以成为“机”是因为他会产生一个二值决策结果，即它是一种‘决策’机。核方法或者说核技巧会将数据（有时是非线性数据）从一个低维空间映射到一个高维空间，可以将一个在低维空间中的非线性问题转换为高维空间下的线性问题来求解。&lt;/p&gt;
&lt;p&gt;2.3 决策树&lt;br&gt;
： 优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据。&lt;br&gt;
缺点：可能会产生匹配过度问题。&lt;br&gt;
适用数据类型：数值型和标称型。&lt;br&gt;
算法类型：分类算法。
数据要求：树的构造只适用于标称型的数据，因此数值型数据必须离散化。&lt;/p&gt;
&lt;p&gt;简述：在构造决策树时，我们需要解决的第一个问题就是，当前数据集上哪个特征在划分数据分类时起决定性作用。为了找到决定性特征，划分出最好的结果，我们必须评估每个特征。完成测试后，原始数据就被划分为几个数据子集。这些数据的子集分布在第一个决策点的所有分支上，如果某个分支下的数据属于同一个类型，则无需进一步对数据集进行切割。反之则需要进一步切割。&lt;/p&gt;
&lt;p&gt;创建分支的伪代码如下：&lt;/p&gt;
&lt;pre&gt;     检测数据集中的每个子项是否属于同一分类：
        if so return 类标签；
        else
            寻找数据集的最好特征
            划分数据集
            创建分支结点
                for 每个划分的子集
                    调用函数createBranch并增加返回结果到分支结点中
                return 分支结点&lt;/pre&gt;
&lt;p&gt;在可以评测哪种数据划分方式是最好的数据划分之前，我们必须学习如何计算信息增益。集合的信息度量方式称为香农熵或者简称为熵。熵在信息论中定义为信息的期望值。&lt;br&gt;
信息熵的计算公式为：
H(信息熵) = -∑ P（xi） log2P（xi） ps:其中p（xi）表示选择该分类的概率。&lt;/p&gt;
&lt;p&gt;下面简述一下生成决策树的步骤：&lt;br&gt;
(1) 根据给定的训练数据，根据熵最大原则根据每一个维度来划分数据集，找到最关键的维度。&lt;br&gt;
(2) 当某个分支下所有的数据都数据同一分类则终止划分并返回类标签，否则在此分支上重复实施(1)过程。&lt;br&gt;
(3) 依次计算就将类标签构建成了一棵抉择树。&lt;br&gt;
(4) 依靠训练数据构造了决策树之后，我们就可以将它用于实际数据的分类。
ps:当然生成决策树的算法不止这一个，还有其他一些生成决策树的方法，比如：C4.5和CART。&lt;/p&gt;
&lt;p&gt;总结：
决策树分类器就像带有终止块的流程图，终止块表示分类结果。开始处理数据集时，我们首先需要测量集合中数据的不一致性，也就是熵，然后寻找最优的方案划分数据集，直到数据集中的所有数据属于同一个分类。&lt;/p&gt;
&lt;p&gt;2.4 朴素贝叶斯：&lt;br&gt;
优点：在数据较少的情况下仍然有效，可以处理多类别问题。&lt;br&gt;
缺点：对于输入数据的准备方式较为敏感。&lt;br&gt;
适用的数据类型：标称型数据。
算法类型：分类算法&lt;/p&gt;
&lt;p&gt;简述：朴素贝叶斯是贝叶斯理论的一部分，贝叶斯决策理论的核心思想，即选择具有高概率的决策。朴素贝叶斯之所以冠以朴素开头，是因为其在贝叶斯理论的基础上做出了两点假设：&lt;br&gt;
(1)每个特征之间相互独立。&lt;br&gt;
(2)每个特征同等重要。
贝叶斯准则是构建在条件概率的基础之上的，其公式如下：&lt;/p&gt;
&lt;p&gt;P（H|X）=P（X|H)P（H)/P(X)&lt;/p&gt;
&lt;p&gt;ps：P（H|X）是根据X参数值判断其属于类别H的概率，称为后验概率。P（H)是直接判断某个样本属于H的概率，称为先验概率。P（X|H)是在类别H中观测到X的概率（后验概率），P(X)是在数据库中观测到X的概率。可见贝叶斯准则是基于条件概率并且和观测到样本的先验概率和后验概率是分不开的。&lt;/p&gt;
&lt;p&gt;总结：对于分类而言，使用概率有事要比使用硬规则更为有效。贝叶斯概率及贝叶斯准则提供了一种利用已知值来估计未知概率的有效方法。可以通过特征之间的条件独立性假设，降低对数据量的需求。尽管条件独立性的假设并不正确，但是朴素贝叶斯仍然是一种有效的分类器。&lt;/p&gt;
&lt;p&gt;2.5 K-近邻算法（KNN）:&lt;br&gt;
优点：精度高、对异常值不敏感、无数据输入假定。&lt;br&gt;
缺点：计算复杂度高，空间复杂度搞。&lt;br&gt;
适用数据范围：数值型和标称型。
算法类型：分类算法。&lt;/p&gt;
&lt;p&gt;简述：算法原理，存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一个数据与所属分类的对应关系。输入没有标签的新数据后，将新数据的每个特征和样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似数据（最近邻）的分类标签。一般来说，我们只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数。最后选择k个最相似数据中出现次数最多的分类，作为新数据的分类。&lt;/p&gt;
&lt;p&gt;2.6 线性回归(Linear Regression)：&lt;br&gt;
优点：结果易于理解，计算上不复杂。&lt;br&gt;
缺点：对非线性数据拟合不好。&lt;br&gt;
适用数据类型：数值型和标称型数据。&lt;br&gt;
算法类型：回归算法。
ps:回归于分类的不同，就在于其目标变量时连续数值型。&lt;/p&gt;
&lt;p&gt;简述：在统计学中，线性回归（Linear Regression）是利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合（自变量都是一次方）。只有一个自变量的情况称为简单回归，大于一个自变量情况的叫做多元回归。&lt;/p&gt;
&lt;p&gt;线性方程的模型函数的向量表示形式为：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;通过训练数据集寻找向量系数的最优解，即为求解模型参数。其中求解模型系数的优化器方法可以用“最小二乘法”、“梯度下降”算法，来求解损失函数：&lt;/p&gt;
&lt;p&gt;的最优值。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;附加：岭回归（ridge regression）:
岭回归是一种专用于共线性数据分析的有偏估计回归方法，实质上是一种改良的最小二乘估计法，通过放弃最小二乘法的无偏性，以损失部分信息、降低精度为代价，获得回归系数更为符合实际、更可靠的回归方法，对病态数据的耐受性远远强于最小二乘法。&lt;/p&gt;
&lt;p&gt;岭回归分析法是从根本上消除复共线性影响的统计方法。岭回归模型通过在相关矩阵中引入一个很小的岭参数K（1&amp;gt;K&amp;gt;0），并将它加到主对角线元素上，从而降低参数的最小二乘估计中复共线特征向量的影响，减小复共线变量系数最小二乘估计的方法，以保证参数估计更接近真实情况。岭回归分析将所有的变量引入模型中，比逐步回归分析提供更多的信息。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;总结：与分类一样，回归也是预测目标值的过程。回归与分类的不同点在于，前者预测连续型的变量，而后者预测离散型的变量。回归是统计学中最有力的工具之一。在回归方程里，求得特征对应的最佳回归系统的方法是最小化误差的平方和。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;2.7 树回归:&lt;br&gt;
优点：可以对复杂和非线性的数据建模。&lt;br&gt;
缺点：结果不易理解。&lt;br&gt;
适用数据类型：数值型和标称型数据。
算法类型：回归算法。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;简述：线性回归方法可以有效的拟合所有样本点(局部加权线性回归除外）。当数据拥有众多特征并且特征之间关系十分复杂时，构建全局模型的回归算法是比较困难的。此外，实际中很多问题为非线性的，例如常见的分段函数，不可能用全局线性模型类进行拟合。树回归将数据集切分成多份易建模的数据，然后利用线性回归进行建模和拟合。较为经典的树回归算法为CART（classification and regreesion trees 分类回归树）。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;CART算法的详细描述可以看这篇文章：http://box.cloud.taobao.com/file/downloadFile.htm?shareLink=1GIQrknG （说实话，大体了解，看的不太懂,谁了解的比较透彻可以分享下）。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;2.8 K-Means(K 均值算法)：&lt;br&gt;
优点：容易实现。&lt;br&gt;
缺点：可能收敛到局部最小值，在大规模数据集上收敛较慢。&lt;br&gt;
适用数据类型：数值型数据。&lt;br&gt;
算法类型：聚类算法。
ps:K-Means和上面的分类和回归算法不同，它属于非监督学习算法。类似分类和回归中的目标变量事先并不存在。与前面“对于数据变量X能预测变量Y”不同的是，非监督学习算法要回答的问题是：“从数据X中能发现什么？“，这里需要回答的X方面可能的问题是：”构成X的最佳6个数据簇都是哪些“或者”X中哪三个特征最频繁共现？“。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;K-Means的基本步骤：&lt;br&gt;
(1) 从数据对象中随机的初始化K个初始点作为质心。然后将数据集中的每个点分配到一个簇中，具体来讲每个点找到距其最近的质心，并将其分配给该质心所对应的簇。&lt;br&gt;
(2) 计算每个簇中样本点的均值，然后用均值更新掉该簇的质心。然后划分簇结点。&lt;br&gt;
(3) 迭代重复（2）过程，当簇对象不再发生变化时，或者误差在评测函数预估的范围时，停止迭代。&lt;br&gt;
算法的时间复杂度上界为O(nkt), 其中t是迭代次数。&lt;br&gt;
ps:初始的K个质心的选取以及距离计算公式的好坏，将影响到算法的整体性能。&lt;br&gt;
附加：
二分K-均值算法:为克服K-均值算法收敛于局部最小值的问题，有人提出了另一个称为二分K-均值（bisecting K-Means）的算法。该算法首先将所有点作为一个簇，然后将簇一分为二。之后选择其中一个簇继续划分，选择哪个一簇进行划分取决于对其划分是否可以最大程度降低SSE(Sum of Squared Error，两个簇的总误差平方和)的值。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;2.9 算法关联分析:&lt;br&gt;
首先了两个概念：&lt;br&gt;
频繁项集（frequent item sets）:经常出现在一块的物品的集合。&lt;br&gt;
关联规则（association rules）：暗示两种物品间可能存在很强的关系。&lt;br&gt;
项集的支持度（support）：数据集中包含该项集记录所占的比例。
关联分析的目标包括两项：发现频繁项集合发现关联规则。首先找到频繁项集，然后才能获得关联规则。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Apriori算法：&lt;br&gt;
优点：易编码实现。&lt;br&gt;
缺点：在大型数据集上可能较慢。&lt;br&gt;
适用数据类型：数值型或标称型数据。&lt;br&gt;
原理：如果某个项集时频繁的，那么他的所有子集也是频繁的。&lt;br&gt;
Apriori运用的DEMO示例参见博客：http://blog.csdn.net/lantian0802/article/details/38331463&lt;br&gt;
简述：
Apriori算法是发现频繁项集的一种方法。Apriori算法的两个输入参数分别是最小支持度和数据集。该算法首先会生成所有单个item的项集列表。然后扫描列表计算每个item的项集支持度，将低于最小支持度的item排除掉，然后将每个item两两组合，然后重新计算整合后的item列表的支持度并且和最小支持度比较。重复这一过程，直至所有项集都被去掉。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;总结：
关联分析是用于发现大数据集中元素间有趣关系的一个工具集，可以采用两种方式来量化这些有趣的关系。发现元素间不同的组合是个十分耗时的任务，不可避免需要大量昂贵的计算资源，这就需要一些更智能的方法在合理的时间范围内找到频繁项集。能够实现这一目标的一个方法是Apriori算法，它使用Apriori原理来减少在数据库上进行检查的集合的数目。Apriori原理是说如果一个元素是不频繁的，那么那些包含该元素的超集也是不频繁的。Apriori算法从单元素项集开始，通过组合满足最小支持度要求的项集来形成更大的集合。支持度用来度量一个集合在原始数据中出现的频率。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;2.10 FP-growth算法：
简述：FP-growth也是用于发现频繁项集的算法，他以FP树的结构存储构建元素，其他Apriori算法的性能要好很多。通常性能要好2个数量级以上。其发现频繁项集的过程如下：(1)构建FP树。(2)从FP树中挖掘频繁项集。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;优点：一般要快于Apriori。&lt;br&gt;
缺点：实现比较困难，在某些数据集上性能会下降。
适用数据类型：标称型数据。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;总结：FP-growth算法是一种用于发现数据集中频繁模式的有效方法。FP-growth算法利用Apriori原则，执行更快。Apriori算法产生候选项集，然后扫描数据集来检查他们是否频繁。由于只对数据集扫描两次，因此FP-growth算法执行更快。在FP-growth算法中，数据集存储在一个称为FP树的结构中。FP树构建完成后，可以通过查找元素项的条件及FP树来发现频繁项集。该过程不断以更多元素作为条件重复进行，直到FP树只包含一个元素为止。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Sat, 02 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-02-74716-e47d709de.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-02-74716-e47d709de.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>算法系列：计数排序</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Counting_sort&quot;&gt;计数排序&lt;/a&gt;可能是最简单的一种排序，它可以被用来对一个列表进行排序，并且是&lt;a href=&quot;https://en.wikipedia.org/wiki/Radix_sort&quot;&gt;基数排序&lt;/a&gt;的一个关键部分。这两者都是被发明的，这篇文章我将解释计数排序并且用C写出来。&lt;/p&gt;
&lt;ul&gt;

&lt;/ul&gt;
&lt;p&gt;计数排序非常基础，他的主要目的是对整数排序并且会比普通的排序算法性能更好。例如，输入{1, 3, 5, 2, 1, 4}给计数排序，会输出{1, 1, 2, 3, 4, 5}。这个算法由以下步骤组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;li&gt;遍历输入数组，遇到一个数就在计数数组对应的位置上加一。例如：遇到5，就将计数数组第五个位置的数加一。&lt;/li&gt;

&lt;/ol&gt;
&lt;ul&gt;

&lt;/ul&gt;
&lt;p&gt;输入{3, 4, 3, 2, 1}，最大是4，数组长度是5。&lt;/p&gt;
&lt;p&gt;建立计数数组{0, 0, 0, 0}。&lt;/p&gt;
&lt;p&gt;遍历输入数组：&lt;/p&gt;
&lt;p&gt;{&lt;strong&gt;3&lt;/strong&gt;, 4, 3, 2, 1} -&amp;gt; {0, 0, &lt;strong&gt;1&lt;/strong&gt;, 0}&lt;br&gt;
{3, &lt;strong&gt;4&lt;/strong&gt;, 3, 2, 1} -&amp;gt; {0, 0, 1, &lt;strong&gt;1&lt;/strong&gt;}&lt;br&gt;
{3, 4, &lt;strong&gt;3&lt;/strong&gt;, 2, 1} -&amp;gt; {0, 0, &lt;strong&gt;2&lt;/strong&gt;, 1}&lt;br&gt;
{3, 4, 3, &lt;strong&gt;2&lt;/strong&gt;, 1} -&amp;gt; {0, &lt;strong&gt;1&lt;/strong&gt;, 2, 1}&lt;br&gt;
{3, 4, 3, 2, &lt;strong&gt;1&lt;/strong&gt;} -&amp;gt; {, 1, 2, 1}&lt;/p&gt;
&lt;p&gt;计数数组现在是{1, 1, 2, 1}，我们现在把它写回到输入数组里：&lt;/p&gt;
&lt;p&gt;{&lt;strong&gt;0&lt;/strong&gt;, 1, 2, 1} -&amp;gt; {&lt;strong&gt;1&lt;/strong&gt;, 4, 3, 2, 1}&lt;br&gt;
{o, &lt;strong&gt;o&lt;/strong&gt;, 2, 1} -&amp;gt; {1, &lt;strong&gt;2&lt;/strong&gt;, 3, 2, 1}&lt;br&gt;
{o, o, &lt;strong&gt;1&lt;/strong&gt;, 1} -&amp;gt; {1, 2, &lt;strong&gt;3&lt;/strong&gt;, 2, 1}&lt;br&gt;
{o, o, &lt;strong&gt;o&lt;/strong&gt;, 1} -&amp;gt; {1, 2, 3, &lt;strong&gt;3&lt;/strong&gt;, 1}&lt;br&gt;
{o, o, o, &lt;strong&gt;o&lt;/strong&gt;} -&amp;gt; {1, 2, 3, 3, }&lt;/p&gt;
&lt;p&gt;这样就排好序了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/ul&gt;
&lt;ul&gt;

&lt;/ul&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

void printArray(int * array, int size){

  int curr;
  for(curr = 0; curr &amp;lt; size; curr++){
    printf(&quot;%d, &quot;, array[curr]);
  }
  printf(&quot;\n&quot;);
}

int maximum(int * array, int size){

  int curr = 0;
  int max = 0;

  for(curr = 0; curr &amp;lt; size; curr++){
    if(array[curr] &amp;gt; max){ max = array[curr]; }
  }

  return max;
}

void countingSort(int * array, int size){

  int curr = 0;
  int max = maximum(array, size);
  int * counting_array = calloc(max, sizeof(int)); // Zeros out the array

  for(curr = 0; curr &amp;lt; size; curr ++){
    counting_array[array[curr]]++;
  }

  int num = 0;
  curr = 0;

  while(curr &amp;lt;= size){
    while(counting_array[num] &amp;gt; 0){
      array[curr] = num;
      counting_array[num]--;
      curr++;
      if(curr &amp;gt; size){ break; }
    }
    num++;
  }
  printArray(array, size);
}

int main(){

  int test1[] = {2, 6, 4, 3, 2, 3, 4, 6, 3, 4, 3, 5, 2, 6};
  int size1 = 14;

  countingSort(test1, size1);

  int test2[] = {5, 6, 7, 8, 5};
  int size2 = 5;

  countingSort(test2, size2);

  int test3[] = {8, 1, 2, 3, 3, 4};
  int size3 = 6;

  countingSort(test3, size3);

  return 0;
}&lt;/pre&gt;
&lt;p&gt;插播一句：如果你编程有困难，无妨看看。&lt;/p&gt;
&lt;ul&gt;

&lt;/ul&gt;
&lt;p&gt;不幸的是，这个算法的简洁性同时也是它的弱点。很多程序员不需要对整数排序，至少他们觉得他们不需要。其实通常非整数都可以被规约为整数，然后再用计数排序或者基数排序（基数排序就是多加了一层，这样会快一些）。谷歌一下可以有不少结果，比如。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;


	


	

</description>
        <pubDate>Fri, 01 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-01-74574-360ecc2bb.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-01-74574-360ecc2bb.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>Files and Initialization</title>
        <description>
 &lt;p&gt;By now, most of you have written a small Swift app or experimented in the playground. You may even have experienced an error after you copied code from a playground into another file and wondered, “What is actually going on? What is the difference between a playground file, and other Swift source files?” This post will explain how Swift deals with the files in your project, and how global data is initialized.&lt;/p&gt; &lt;h3&gt;Files in an App&lt;/h3&gt; &lt;p&gt;A Swift app is composed of any number of files, each with the functions, classes, and other declarations that make up the app. Most Swift files in your app are &lt;strong&gt;order-independent&lt;/strong&gt;, meaning you can use a type before it is defined, and can even import modules at the bottom of the file (although that is not recommended Swift style.)&lt;/p&gt; &lt;p&gt;However, top-level code is not allowed in most of your Swift source files. For clarity, any executable statement not written within a function body, within a class, or otherwise encapsulated is considered top-level. We have this rule because if top-level code were allowed in all your files, it would be hard to determine where to start the program.&lt;/p&gt; &lt;h3&gt;Playgrounds, REPL, and Top-Level Code&lt;/h3&gt; &lt;p&gt;You may be wondering why the code below works perfectly in a playground. This example isn’t encapsulated in anything, so it must be top-level code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;method&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above single-line program works — with no additional code at all — because playground files do support the execution of top-level code. Code within a playground file is &lt;strong&gt;order-dependent&lt;/strong&gt;, run in top-down lexical order. For example, you can’t use a type before you define it. Of course, Swift playground files can also define functions, classes, and any other legal Swift code, but they don’t need to.  This makes it easy to learn the Swift language or try a new API without writing a lot of code to get started.&lt;/p&gt; &lt;p&gt;In addition to playgrounds, top-level code can also be run in the REPL (Read-Eval-Print-Loop) or when launching Swift files as scripts. To use Swift for scripting, you can use shebang-style launching by starting your Swift file with “#!/usr/bin/xcrun swift” or type “xcrun swift myFile.swift” within Terminal.&lt;/p&gt; &lt;h3&gt;Application Entry Points and “main.swift”&lt;/h3&gt; &lt;p&gt;You’ll notice that earlier we said top-level code isn’t allowed in &lt;em&gt;most&lt;/em&gt; of your app’s source files. The exception is a special file named “main.swift”, which behaves much like a playground file, but is built with your app’s source code. The “main.swift” file can contain top-level code, and the order-dependent rules apply as well. In effect, the first line of code to run in “main.swift” is implicitly defined as the main entrypoint for the program. This allows the minimal Swift program to be a single line — as long as that line is in “main.swift”.&lt;/p&gt; &lt;p&gt;In Xcode, Mac templates default to including a “main.swift” file, but for iOS apps the default for new iOS project templates is to add &lt;span class=&quot;keyword&quot;&gt;@UIApplicationMain&lt;/span&gt; to a regular Swift file. This causes the compiler to synthesize a &lt;span class=&quot;keyword&quot;&gt;main&lt;/span&gt; entry point for your iOS app, and eliminates the need for a “main.swift” file.&lt;/p&gt; &lt;p&gt;Alternatively, you can link in an implementation of &lt;span class=&quot;keyword&quot;&gt;main&lt;/span&gt; written in Objective-C, common when incrementally migrating projects from Objective-C to Swift.&lt;/p&gt; &lt;h3&gt;Global Variables&lt;/h3&gt; &lt;p&gt;Given how Swift determines where to start executing an app, how should global variables work? In the following line of code, when should the initializer run?&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; someGlobal = &lt;span class=&quot;pointer&quot;&gt;foo&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In a single-file program, code is executed top-down, similar to the behavior of variables within a function.  Pretty simple. The answer for complex apps is less obvious, and we considered three different options:&lt;/p&gt; &lt;ul class=&quot;numbered&quot;&gt; &lt;li&gt;Restrict initializers of global variables to be simple constant expressions, as C does.&lt;/li&gt; &lt;li&gt;Allow any initializer, run as a static constructor at app load time, as C++ does.&lt;/li&gt; &lt;li&gt;Initialize lazily, run the initializer for a global the first time it is referenced, similar to Java.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The first approach was ruled out because Swift doesn’t need constant expressions like C does. In Swift, constants are generally implemented as (inlined) function calls.  And there are good reasons to use complex initializers, e.g. to set up singletons or allocate a dictionary.&lt;/p&gt; &lt;p&gt;The second approach was ruled out because it is bad for the performance of large systems, as all of the initializers in all the files must run before the application starts up. This is also unpredictable, as the order of initialization in different files is unspecified.&lt;/p&gt; &lt;p&gt;Swift uses the third approach, which is the best of all worlds: it allows custom initializers, startup time in Swift scales cleanly with no global initializers to slow it down, and the order of execution is completely predictable.&lt;/p&gt; &lt;p&gt;The lazy initializer for a global variable (also for static members of structs and enums) is run the first time that global is accessed, and is launched as &lt;span class=&quot;keyword&quot;&gt;dispatch_once&lt;/span&gt; to make sure that the initialization is atomic.  This enables a cool way to use &lt;span class=&quot;keyword&quot;&gt;dispatch_once&lt;/span&gt; in your code: just declare a global variable with an initializer and mark it &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;.&lt;/p&gt; &lt;h3&gt;Summary&lt;/h3&gt; &lt;p&gt;Swift is designed to make it easy to experiment in a playground or to quickly build a script. A complete program can be a single line of code. Of course, Swift was also designed to scale to the most complex apps you can dream up. With “main.swift” you can take complete control over initialization or you can let &lt;span class=&quot;keyword&quot;&gt;@UIApplicationMain&lt;/span&gt; do the startup work for you on iOS.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-08-01--id=7-a729c023e.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-08-01--id=7-a729c023e.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>数字证书原理</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;文中首先解释了加密解密的一些基础知识和概念，然后通过一个加密通信过程的例子说明了加密算法的作用，以及数字证书的出现所起的作用。接着对数字证书做一个详细的解释，并讨论一下windows中数字证书的管理，最后演示使用makecert生成数字证书。如果发现文中有错误的地方，或者有什么地方说得不够清楚，欢迎指出！&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h5&gt;1、基础知识&lt;/h5&gt;
&lt;p&gt;这部分内容主要解释一些概念和术语，最好是先理解这部分内容。&lt;/p&gt;
&lt;h6&gt;1.1、公钥密码体制(public-key cryptography)&lt;/h6&gt;
&lt;p&gt;公钥密码体制分为三个部分，公钥、私钥、加密解密算法，它的加密解密过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密：通过加密算法和公钥对内容(或者说明文)进行加密，得到密文。加密过程需要用到公钥。&lt;/li&gt;
&lt;li&gt;解密：通过解密算法和私钥对密文进行解密，得到明文。解密过程需要用到解密算法和私钥。注意，由公钥加密的内容，只能由私钥进行解密，也就是说，由公钥加密的内容，如果不知道私钥，是无法解密的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公钥密码体制的公钥和算法都是公开的(这是为什么叫公钥密码体制的原因)，私钥是保密的。大家都以使用公钥进行加密，但是只有私钥的持有者才能解密。在实际的使用中，有需要的人会生成一对公钥和私钥，把公钥发布出去给别人使用，自己保留私钥。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;1.2、对称加密算法(symmetric key algorithms)&lt;/h6&gt;
&lt;p&gt;在对称加密算法中，加密使用的密钥和解密使用的密钥是相同的。也就是说，加密和解密都是使用的同一个密钥。因此对称加密算法要保证安全性的话，密钥要做好保密，只能让使用的人知道，不能对外公开。这个和上面的公钥密码体制有所不同，公钥密码体制中加密是用公钥，解密使用私钥，而对称加密算法中，加密和解密都是使用同一个密钥，不区分公钥和私钥。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;// 密钥，一般就是一个字符串或数字，在加密或者解密时传递给加密/解密算法。前面在公钥密码体制中说到的公钥、私钥就是密钥，公钥是加密使用的密钥，私钥是解密使用的密钥。&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;h6&gt;1.3、非对称加密算法(asymmetric key algorithms)&lt;/h6&gt;
&lt;p&gt;在非对称加密算法中，加密使用的密钥和解密使用的密钥是不相同的。前面所说的公钥密码体制就是一种非对称加密算法，他的公钥和是私钥是不能相同的，也就是说加密使用的密钥和解密使用的密钥不同，因此它是一个非对称加密算法。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;1.4、RSA简介&lt;/h6&gt;
&lt;p&gt;RSA是一种公钥密码体制，现在使用得很广泛。如果对RSA本身有兴趣的，后面看我有没有时间写个RSA的具体介绍。&lt;/p&gt;
&lt;p&gt;RSA密码体制是一种公钥密码体制，公钥公开，私钥保密，它的加密解密算法是公开的。 由公钥加密的内容可以并且只能由私钥进行解密，并且由私钥加密的内容可以并且只能由公钥进行解密。也就是说，&lt;strong&gt;RSA的这一对公钥、私钥都可以用来加密和解密，并且一方加密的内容可以由并且只能由对方进行解密&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;1.5、签名和加密&lt;/h6&gt;
&lt;p&gt;我们说加密，是指对某个内容加密，加密后的内容还可以通过解密进行还原。 比如我们把一封邮件进行加密，加密后的内容在网络上进行传输，接收者在收到后，通过解密可以还原邮件的真实内容。&lt;/p&gt;
&lt;p&gt;这里主要解释一下签名，签名就是在&lt;strong&gt;信息&lt;/strong&gt;的后面再加上一段内容，可以证明&lt;strong&gt;信息&lt;/strong&gt;没有被修改过，怎么样可以达到这个效果呢？一般是对&lt;strong&gt;信息&lt;/strong&gt;做一个hash计算得到一个hash值，注意，这个过程是不可逆的，也就是说无法通过hash值得出原来的&lt;strong&gt;信息&lt;/strong&gt;内容。在把&lt;strong&gt;信息&lt;/strong&gt;发送出去时，把这个hash值加密后做为一个签名和&lt;strong&gt;信息&lt;/strong&gt;一起发出去。 接收方在收到&lt;strong&gt;信息&lt;/strong&gt;后，会重新计算&lt;strong&gt;信息&lt;/strong&gt;的hash值，并和&lt;strong&gt;信息&lt;/strong&gt;所附带的hash值(解密后)进行对比，如果一致，就说明信息的内容没有被修改过，因为这里hash计算可以保证不同的内容一定会得到不同的hash值，所以只要内容一被修改，根据&lt;strong&gt;信息&lt;/strong&gt;内容计算的hash值就会变化。当然，不怀好意的人也可以修改&lt;strong&gt;信息&lt;/strong&gt;内容的同时也修改hash值，从而让它们可以相匹配，为了防止这种情况，hash值一般都会加密后(也就是签名)再和&lt;strong&gt;信息&lt;/strong&gt;一起发送，以保证这个hash值不被修改。至于如何让别人可以解密这个签名，这个过程涉及到数字证书等概念，我们后面在说到数字证书时再详细说明，这里您先只需先理解签名的这个概念。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h5&gt;2、一个加密通信过程的演化&lt;/h5&gt;
&lt;p&gt;我们来看一个例子，现在假设“服务器”和“客户”要在网络上通信，并且他们打算使用RSA(参看前面的RSA简介)来对通信进行加密以保证谈话内容的安全。由于是使用RSA这种公钥密码体制，“服务器”需要对外发布公钥(算法不需要公布，RSA的算法大家都知道)，自己留着私钥。“客户”通过某些途径拿到了“服务器”发布的公钥，客户并不知道私钥。“客户”具体是通过什么途径获取公钥的，我们后面再来说明，下面看一下双方如何进行保密的通信：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.1 第一回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：？？？？&lt;/p&gt;
&lt;p&gt;因为消息是在网络上传输的，有人可以冒充自己是“服务器”来向客户发送信息。例如上面的消息可以被黑客截获如下：&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“客户”-&amp;gt;“黑客”：你好&lt;/strong&gt;        // 黑客在“客户”和“服务器”之间的某个路由器上截获“客户”发给服务器的信息，然后自己冒充“服务器”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此“客户”在接到消息后，并不能肯定这个消息就是由“服务器”发出的，某些“黑客”也可以冒充“服务器”发出这个消息。如何确定信息是由“服务器”发过来的呢？有一个解决方法，因为只有服务器有私钥，所以如果只要能够确认对方有私钥，那么对方就是“服务器”。因此通信过程可以改进为如下：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.2 第二回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;// &lt;strong&gt;注&lt;/strong&gt;意这里约定一下，{} 表示RSA加密后的内容，[ | ]表示用什么密钥和算法进行加密，后面的示例中都用这种表示方式，例如上面的&lt;/strong&gt; {你好，我是服务器}[私钥|RSA]&lt;strong&gt;  就表示用私钥对&lt;/strong&gt;“你好，我是服务器”&lt;strong&gt;进行加密后的结果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了向“客户”证明自己是“服务器”， “服务器”把一个字符串用自己的私钥加密，把明文和加密后的密文一起发给“客户”。对于这里的例子来说，就是把字符串 “你好，我是服务器”和这个字符串用私钥加密后的内容 {你好，我是服务器}[私钥|RSA] 发给客户。&lt;/p&gt;
&lt;p&gt;“客户”收到信息后，她用自己持有的公钥解密密文，和明文进行对比，如果一致，说明信息的确是由服务器发过来的。也就是说“客户”把 {你好，我是服务器}[私钥|RSA] 这个内容用公钥进行解密，然后和“你好，我是服务器”对比。因为由“服务器”用私钥加密后的内容，&lt;strong&gt;由并且只能由&lt;/strong&gt;公钥进行解密，私钥只有“服务器”持有，所以如果解密出来的内容是能够对得上的，那说明信息一定是从“服务器”发过来的。&lt;/p&gt;
&lt;p&gt;假设“黑客”想冒充“服务器”：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“客户”-&amp;gt;“黑客”：向我证明你就是服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[？？？|RSA]&lt;/strong&gt;    //这里黑客无法冒充，因为他不知道&lt;strong&gt;私钥&lt;/strong&gt;，无法用&lt;strong&gt;私钥&lt;/strong&gt;加密某个字符串后发送给客户去验证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“客户”-&amp;gt;“黑客”：？？？？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于“黑客”没有“服务器”的私钥，因此它发送过去的内容，“客户”是无法通过服务器的公钥解密的，因此可以认定对方是个冒牌货！&lt;/p&gt;
&lt;p&gt;到这里为止，“客户”就可以确认“服务器”的身份了，可以放心和“服务器”进行通信，但是这里有一个问题，通信的内容在网络上还是无法保密。为什么无法保密呢？通信过程不是可以用公钥、私钥加密吗？其实用RSA的私钥和公钥是不行的，我们来具体分析下过程，看下面的演示：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.3 第三回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[公钥|RSA]&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{你的余额是100元}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;注意上面的的信息 {你的余额是100元}[私钥]，这个是“服务器”用私钥加密后的内容，但是我们之前说了，公钥是发布出去的，因此所有的人都知道公钥，所以除了“客户”，其它的人也可以用公钥对{你的余额是100元}[私钥]进行解密。所以如果“服务器”用私钥加密发给“客户”，这个信息是无法保密的，因为只要有公钥就可以解密这内容。然而“服务器”也不能用公钥对发送的内容进行加密，因为“客户”没有私钥，发送个“客户”也解密不了。&lt;/p&gt;
&lt;p&gt;这样问题就又来了，那又如何解决呢？在实际的应用过程，一般是通过引入对称加密来解决这个问题，看下面的演示：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.4 第四回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我们后面的通信过程，用对称加密来进行，这里是对称加密算法和密钥}[公钥|RSA]    //蓝色字体的部分是对称加密的算法和密钥的具体内容，客户把它们发送给服务器。&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{OK，收到！}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{你的余额是100元}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;在上面的通信过程中，“客户”在确认了“服务器”的身份后，“客户”自己选择一个对称加密算法和一个密钥，把这个对称加密算法和密钥一起用公钥加密后发送给“服务器”。注意，由于对称加密算法和密钥是用公钥加密的，就算这个加密后的内容被“黑客”截获了，由于没有私钥，“黑客”也无从知道对称加密算法和密钥的内容。&lt;/p&gt;
&lt;p&gt;由于是用公钥加密的，只有私钥能够解密，这样就可以保证只有服务器可以知道对称加密算法和密钥，而其它人不可能知道(这个对称加密算法和密钥是“客户”自己选择的，所以“客户”自己当然知道如何解密加密)。这样“服务器”和“客户”就可以用对称加密算法和密钥来加密通信的内容了。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;总结一下，RSA加密算法在这个通信过程中所起到的作用主要有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;因为私钥只有“服务器”拥有，因此“客户”可以通过判断对方是否有私钥来判断对方是否是“服务器”。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端通过RSA的掩护，安全的和服务器商量好一个对称加密算法和密钥来保证后面通信过程内容的安全。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果这里您理解了为什么不用RSA去加密通信过程，而是要再确定一个对称加密算法来保证通信过程的安全，那么就说明前面的内容您已经理解了。(如果不清楚，再看下2.3和2.4，如果还是不清楚，那应该是我们说清楚，您可以留言提问。)&lt;/p&gt;
&lt;p&gt;到这里，“客户”就可以确认“服务器”的身份，并且双方的通信内容可以进行加密，其他人就算截获了通信内容，也无法解密。的确，好像通信的过程是比较安全了。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;但是这里还留有一个问题，在最开始我们就说过，“服务器”要对外发布公钥，那“服务器”如何把公钥发送给“客户”呢？我们第一反应可能会想到以下的两个方法：&lt;/p&gt;
&lt;p&gt;a)把公钥放到互联网的某个地方的一个下载地址，事先给“客户”去下载。&lt;/p&gt;
&lt;p&gt;b)每次和“客户”开始通信时，“服务器”把公钥发给“客户”。&lt;/p&gt;
&lt;p&gt;但是这个两个方法都有一定的问题，&lt;/p&gt;
&lt;p&gt;对于a)方法，“客户”无法确定这个下载地址是不是“服务器”发布的，你凭什么就相信这个地址下载的东西就是“服务器”发布的而不是别人伪造的呢，万一下载到一个假的怎么办？另外要所有的“客户”都在通信前事先去下载公钥也很不现实。&lt;/p&gt;
&lt;p&gt;对于b)方法，也有问题，因为任何人都可以自己生成一对公钥和私钥，他只要向“客户”发送他自己的私钥就可以冒充“服务器”了。示意如下：&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“黑客”：你好           //黑客截获“客户”发给“服务器”的消息&lt;/p&gt;
&lt;p&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器，这个是我的公钥    //黑客自己生成一对公钥和私钥，把公钥发给“客户”，自己保留私钥&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“黑客”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[黑客自己的私钥|RSA]      //客户收到“黑客”用私钥加密的信息后，是可以用“黑客”发给自己的公钥解密的，从而会误认为“黑客”是“服务器”&lt;/p&gt;
&lt;p&gt;因此“黑客”只需要自己生成一对公钥和私钥，然后把公钥发送给“客户”，自己保留私钥，这样由于“客户”可以用黑客的公钥解密黑客的私钥加密的内容，“客户”就会相信“黑客”是“服务器”，从而导致了安全问题。&lt;strong&gt;这里问题的根源就在于，大家都可以生成公钥、私钥对，无法确认公钥对到底是谁的。 &lt;/strong&gt;如果能够确定公钥到底是谁的，就不会有这个问题了。例如，如果收到“黑客”冒充“服务器”发过来的公钥，经过某种检查，如果能够发现这个公钥不是“服务器”的就好了。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，数字证书出现了，它可以解决我们上面的问题。先大概看下什么是数字证书，一个证书包含下面的具体内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书的发布机构&lt;/li&gt;
&lt;li&gt;证书的有效期&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;证书所有者（Subject）&lt;/li&gt;
&lt;li&gt;签名所使用的算法&lt;/li&gt;
&lt;li&gt;指纹以及指纹算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证书的内容的详细解释会在后面详细解释，这里先只需要搞清楚一点，&lt;strong&gt;数字证书可以保证&lt;strong&gt;数字&lt;/strong&gt;证书里的公钥确实是这个证书的所有者(Subject)的，或者证书可以用来确认对方的身份&lt;/strong&gt;。也就是说，我们拿到一个数字证书，我们可以判断出这个数字证书到底是谁的。至于是如何判断的，后面会在详细讨论数字证书时详细解释。现在把前面的通信过程使用数字证书修改为如下：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.5 第五回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器，这里是我的数字证书        //这里用证书代替了公钥&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;注意，上面第二次通信，“服务器”把自己的证书发给了“客户”，而不是发送公钥。“客户”可以根据证书校验这个证书到底是不是“服务器”的，也就是能校验这个证书的所有者是不是“服务器”，从而确认这个证书中的公钥的确是“服务器”的。后面的过程和以前是一样，“客户”让“服务器”证明自己的身份，“服务器”用私钥加密一段内容连同明文一起发给“客户”，“客户”把加密内容用数字证书中的公钥解密后和明文对比，如果一致，那么对方就确实是“服务器”，然后双方协商一个对称加密来保证通信过程的安全。到这里，整个过程就完整了，我们回顾一下：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.6 完整过程：&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;step1&lt;/strong&gt;： “客户”向服务端发送一个通信请求&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step2&lt;/strong&gt;： “服务器”向客户发送自己的数字证书。证书中有一个公钥用来加密信息，私钥由“服务器”持有&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器，这里是我的数字证书&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step3&lt;/strong&gt;： “客户”收到“服务器”的证书后，它会去验证这个数字证书到底是不是“服务器”的，数字证书有没有什么问题，数字证书如果检查没有问题，就说明数字证书中的公钥确实是“服务器”的。检查数字证书后，“客户”会发送一个随机的字符串给“服务器”用私钥去加密，服务器把加密的结果返回给“客户”，“客户”用公钥解密这个返回结果，如果解密结果与之前生成的随机字符串一致，那说明对方确实是私钥的持有者，或者说对方确实是“服务器”。&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器，这是一个随机字符串     //前面的例子中为了方便解释，用的是“你好”等内容，实际情况下一般是随机生成的一个字符串。&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{一个随机字符串}[私钥|RSA]&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step4&lt;/strong&gt;： 验证“服务器”的身份后，“客户”生成一个对称加密算法和密钥，用于后面的通信的加密和解密。这个对称加密算法和密钥，“客户”会用公钥加密后发送给“服务器”，别人截获了也没用，因为只有“服务器”手中有可以解密的私钥。这样，后面“服务器”和“客户”就都可以用对称加密算法来加密和解密通信内容了。&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{OK，已经收到你发来的对称加密算法和密钥！有什么可以帮到你的？}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{你好，你的余额是100元}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;…… //继续其它的通信&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;2.7 其它问题：&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;上面的过程已经十分接近HTTPS的真实通信过程了，完全可以按照这个过程去理解HTTPS的工作原理。但是我为了方便解释，上面有些细节没有说到，有兴趣的人可以看下这部分的内容。可以跳过不看，无关紧要。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;【问题1】&lt;/p&gt;
&lt;p&gt;上面的通信过程中说到，在检查完证书后，“客户”发送一个随机的字符串给“服务器”去用私钥加密，以便判断对方是否真的持有私钥。但是有一个问题，“黑客”也可以发送一个字符串给“服务器”去加密并且得到加密后的内容，这样对于“服务器”来说是不安全的，因为黑客可以发送一些简单的有规律的字符串给“服务器”加密，从而寻找加密的规律，有可能威胁到私钥的安全。所以说，“服务器”随随便便用私钥去加密一个来路不明的字符串并把结果发送给对方是不安全的。&lt;/p&gt;
&lt;p&gt;〖解决方法〗&lt;/p&gt;
&lt;p&gt;每次收到“客户”发来的要加密的的字符串时，“服务器”并不是真正的加密这个字符串本身，而是把这个字符串进行一个hash计算，加密这个字符串的hash值(不加密原来的字符串)后发送给“客户”，“客户”收到后解密这个hash值并自己计算字符串的hash值然后进行对比是否一致。也就是说，“服务器”不直接加密收到的字符串，而是加密这个字符串的一个hash值，这样就避免了加密那些有规律的字符串，从而降低被破解的机率。“客户”自己发送的字符串，因此它自己可以计算字符串的hash值，然后再把“服务器”发送过来的加密的hash值和自己计算的进行对比，同样也能确定对方是否是“服务器”。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;【问题2】&lt;/p&gt;
&lt;p&gt;在双方的通信过程中，“黑客”可以截获发送的加密了的内容，虽然他无法解密这个内容，但是他可以捣乱，例如把信息原封不动的发送多次，扰乱通信过程。&lt;/p&gt;
&lt;p&gt;〖解决方法〗&lt;/p&gt;
&lt;p&gt;可以给通信的内容加上一个序号或者一个随机的值，如果“客户”或者“服务器”接收到的信息中有之前出现过的序号或者随机值，那么说明有人在通信过程中重发信息内容进行捣乱，双方会立刻停止通信。有人可能会问，如果有人一直这么捣乱怎么办？那不是无法通信了？ 答案是的确是这样的，例如有人控制了你连接互联网的路由器，他的确可以针对你。但是一些重要的应用，例如军队或者政府的内部网络，它们都不使用我们平时使用的公网，因此一般人不会破坏到他们的通信。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;【问题3】&lt;/p&gt;
&lt;p&gt;在双方的通信过程中，“黑客”除了简单的重复发送截获的消息之外，还可以修改截获后的密文修改后再发送，因为修改的是密文，虽然不能完全控制消息解密后的内容，但是仍然会破坏解密后的密文。因此发送过程如果黑客对密文进行了修改，“客户”和“服务器”是无法判断密文是否被修改的。虽然不一定能达到目的，但是“黑客”可以一直这样碰碰运气。&lt;/p&gt;
&lt;p&gt;〖解决方法〗&lt;/p&gt;
&lt;p&gt;在每次发送信息时，先对信息的内容进行一个hash计算得出一个hash值，将信息的内容和这个hash值一起加密后发送。接收方在收到后进行解密得到明文的内容和hash值，然后接收方再自己对收到信息内容做一次hash计算，与收到的hash值进行对比看是否匹配，如果匹配就说明信息在传输过程中没有被修改过。如果不匹配说明中途有人故意对加密数据进行了修改，立刻中断通话过程后做其它处理。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h5&gt;3. 证书的构成和原理&lt;/h5&gt;
&lt;h6&gt;3.1 证书的构成和原理&lt;/h6&gt;
&lt;p&gt;之前已经大概说了一个证书由什么构成，但是没有仔细进行介绍，这里对证书的内容做一个详细的介绍。先看下一个证书到底是个什么东西，在windows下查看一个证书时，界面是这样的，我们主要关注一下Details Tab页，其中的内容比较长，我滚动内容后后抓了三个图，把完整的信息显示出来：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/149c3cd31576c0abfd982423eaff8aab.png&quot; rel=&quot;lightbox[74614]&quot; title=&quot;数字证书原理&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74615&quot; alt=&quot;certificateDetails_thumb&quot; src=&quot;/images/jobbole.com/9979e5d6c6d6217908596b4e50bc790c.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;文中首先解释了加密解密的一些基础知识和概念，然后通过一个加密通信过程的例子说明了加密算法的作用，以及数字证书的出现所起的作用。接着对数字证书做一个详细的解释，并讨论一下windows中数字证书的管理，最后演示使用makecert生成数字证书。如果发现文中有错误的地方，或者有什么地方说得不够清楚，欢迎指出！&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h5&gt;1、基础知识&lt;/h5&gt;
&lt;p&gt;这部分内容主要解释一些概念和术语，最好是先理解这部分内容。&lt;/p&gt;
&lt;h6&gt;1.1、公钥密码体制(public-key cryptography)&lt;/h6&gt;
&lt;p&gt;公钥密码体制分为三个部分，公钥、私钥、加密解密算法，它的加密解密过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密：通过加密算法和公钥对内容(或者说明文)进行加密，得到密文。加密过程需要用到公钥。&lt;/li&gt;
&lt;li&gt;解密：通过解密算法和私钥对密文进行解密，得到明文。解密过程需要用到解密算法和私钥。注意，由公钥加密的内容，只能由私钥进行解密，也就是说，由公钥加密的内容，如果不知道私钥，是无法解密的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公钥密码体制的公钥和算法都是公开的(这是为什么叫公钥密码体制的原因)，私钥是保密的。大家都以使用公钥进行加密，但是只有私钥的持有者才能解密。在实际的使用中，有需要的人会生成一对公钥和私钥，把公钥发布出去给别人使用，自己保留私钥。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;1.2、对称加密算法(symmetric key algorithms)&lt;/h6&gt;
&lt;p&gt;在对称加密算法中，加密使用的密钥和解密使用的密钥是相同的。也就是说，加密和解密都是使用的同一个密钥。因此对称加密算法要保证安全性的话，密钥要做好保密，只能让使用的人知道，不能对外公开。这个和上面的公钥密码体制有所不同，公钥密码体制中加密是用公钥，解密使用私钥，而对称加密算法中，加密和解密都是使用同一个密钥，不区分公钥和私钥。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;// 密钥，一般就是一个字符串或数字，在加密或者解密时传递给加密/解密算法。前面在公钥密码体制中说到的公钥、私钥就是密钥，公钥是加密使用的密钥，私钥是解密使用的密钥。&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;h6&gt;1.3、非对称加密算法(asymmetric key algorithms)&lt;/h6&gt;
&lt;p&gt;在非对称加密算法中，加密使用的密钥和解密使用的密钥是不相同的。前面所说的公钥密码体制就是一种非对称加密算法，他的公钥和是私钥是不能相同的，也就是说加密使用的密钥和解密使用的密钥不同，因此它是一个非对称加密算法。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;1.4、RSA简介&lt;/h6&gt;
&lt;p&gt;RSA是一种公钥密码体制，现在使用得很广泛。如果对RSA本身有兴趣的，后面看我有没有时间写个RSA的具体介绍。&lt;/p&gt;
&lt;p&gt;RSA密码体制是一种公钥密码体制，公钥公开，私钥保密，它的加密解密算法是公开的。 由公钥加密的内容可以并且只能由私钥进行解密，并且由私钥加密的内容可以并且只能由公钥进行解密。也就是说，&lt;strong&gt;RSA的这一对公钥、私钥都可以用来加密和解密，并且一方加密的内容可以由并且只能由对方进行解密&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;1.5、签名和加密&lt;/h6&gt;
&lt;p&gt;我们说加密，是指对某个内容加密，加密后的内容还可以通过解密进行还原。 比如我们把一封邮件进行加密，加密后的内容在网络上进行传输，接收者在收到后，通过解密可以还原邮件的真实内容。&lt;/p&gt;
&lt;p&gt;这里主要解释一下签名，签名就是在&lt;strong&gt;信息&lt;/strong&gt;的后面再加上一段内容，可以证明&lt;strong&gt;信息&lt;/strong&gt;没有被修改过，怎么样可以达到这个效果呢？一般是对&lt;strong&gt;信息&lt;/strong&gt;做一个hash计算得到一个hash值，注意，这个过程是不可逆的，也就是说无法通过hash值得出原来的&lt;strong&gt;信息&lt;/strong&gt;内容。在把&lt;strong&gt;信息&lt;/strong&gt;发送出去时，把这个hash值加密后做为一个签名和&lt;strong&gt;信息&lt;/strong&gt;一起发出去。 接收方在收到&lt;strong&gt;信息&lt;/strong&gt;后，会重新计算&lt;strong&gt;信息&lt;/strong&gt;的hash值，并和&lt;strong&gt;信息&lt;/strong&gt;所附带的hash值(解密后)进行对比，如果一致，就说明信息的内容没有被修改过，因为这里hash计算可以保证不同的内容一定会得到不同的hash值，所以只要内容一被修改，根据&lt;strong&gt;信息&lt;/strong&gt;内容计算的hash值就会变化。当然，不怀好意的人也可以修改&lt;strong&gt;信息&lt;/strong&gt;内容的同时也修改hash值，从而让它们可以相匹配，为了防止这种情况，hash值一般都会加密后(也就是签名)再和&lt;strong&gt;信息&lt;/strong&gt;一起发送，以保证这个hash值不被修改。至于如何让别人可以解密这个签名，这个过程涉及到数字证书等概念，我们后面在说到数字证书时再详细说明，这里您先只需先理解签名的这个概念。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h5&gt;2、一个加密通信过程的演化&lt;/h5&gt;
&lt;p&gt;我们来看一个例子，现在假设“服务器”和“客户”要在网络上通信，并且他们打算使用RSA(参看前面的RSA简介)来对通信进行加密以保证谈话内容的安全。由于是使用RSA这种公钥密码体制，“服务器”需要对外发布公钥(算法不需要公布，RSA的算法大家都知道)，自己留着私钥。“客户”通过某些途径拿到了“服务器”发布的公钥，客户并不知道私钥。“客户”具体是通过什么途径获取公钥的，我们后面再来说明，下面看一下双方如何进行保密的通信：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.1 第一回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：？？？？&lt;/p&gt;
&lt;p&gt;因为消息是在网络上传输的，有人可以冒充自己是“服务器”来向客户发送信息。例如上面的消息可以被黑客截获如下：&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“客户”-&amp;gt;“黑客”：你好&lt;/strong&gt;        // 黑客在“客户”和“服务器”之间的某个路由器上截获“客户”发给服务器的信息，然后自己冒充“服务器”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此“客户”在接到消息后，并不能肯定这个消息就是由“服务器”发出的，某些“黑客”也可以冒充“服务器”发出这个消息。如何确定信息是由“服务器”发过来的呢？有一个解决方法，因为只有服务器有私钥，所以如果只要能够确认对方有私钥，那么对方就是“服务器”。因此通信过程可以改进为如下：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.2 第二回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;// &lt;strong&gt;注&lt;/strong&gt;意这里约定一下，{} 表示RSA加密后的内容，[ | ]表示用什么密钥和算法进行加密，后面的示例中都用这种表示方式，例如上面的&lt;/strong&gt; {你好，我是服务器}[私钥|RSA]&lt;strong&gt;  就表示用私钥对&lt;/strong&gt;“你好，我是服务器”&lt;strong&gt;进行加密后的结果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了向“客户”证明自己是“服务器”， “服务器”把一个字符串用自己的私钥加密，把明文和加密后的密文一起发给“客户”。对于这里的例子来说，就是把字符串 “你好，我是服务器”和这个字符串用私钥加密后的内容 {你好，我是服务器}[私钥|RSA] 发给客户。&lt;/p&gt;
&lt;p&gt;“客户”收到信息后，她用自己持有的公钥解密密文，和明文进行对比，如果一致，说明信息的确是由服务器发过来的。也就是说“客户”把 {你好，我是服务器}[私钥|RSA] 这个内容用公钥进行解密，然后和“你好，我是服务器”对比。因为由“服务器”用私钥加密后的内容，&lt;strong&gt;由并且只能由&lt;/strong&gt;公钥进行解密，私钥只有“服务器”持有，所以如果解密出来的内容是能够对得上的，那说明信息一定是从“服务器”发过来的。&lt;/p&gt;
&lt;p&gt;假设“黑客”想冒充“服务器”：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“客户”-&amp;gt;“黑客”：向我证明你就是服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[？？？|RSA]&lt;/strong&gt;    //这里黑客无法冒充，因为他不知道&lt;strong&gt;私钥&lt;/strong&gt;，无法用&lt;strong&gt;私钥&lt;/strong&gt;加密某个字符串后发送给客户去验证。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“客户”-&amp;gt;“黑客”：？？？？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于“黑客”没有“服务器”的私钥，因此它发送过去的内容，“客户”是无法通过服务器的公钥解密的，因此可以认定对方是个冒牌货！&lt;/p&gt;
&lt;p&gt;到这里为止，“客户”就可以确认“服务器”的身份了，可以放心和“服务器”进行通信，但是这里有一个问题，通信的内容在网络上还是无法保密。为什么无法保密呢？通信过程不是可以用公钥、私钥加密吗？其实用RSA的私钥和公钥是不行的，我们来具体分析下过程，看下面的演示：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.3 第三回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[公钥|RSA]&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{你的余额是100元}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;注意上面的的信息 {你的余额是100元}[私钥]，这个是“服务器”用私钥加密后的内容，但是我们之前说了，公钥是发布出去的，因此所有的人都知道公钥，所以除了“客户”，其它的人也可以用公钥对{你的余额是100元}[私钥]进行解密。所以如果“服务器”用私钥加密发给“客户”，这个信息是无法保密的，因为只要有公钥就可以解密这内容。然而“服务器”也不能用公钥对发送的内容进行加密，因为“客户”没有私钥，发送个“客户”也解密不了。&lt;/p&gt;
&lt;p&gt;这样问题就又来了，那又如何解决呢？在实际的应用过程，一般是通过引入对称加密来解决这个问题，看下面的演示：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.4 第四回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我们后面的通信过程，用对称加密来进行，这里是对称加密算法和密钥}[公钥|RSA]    //蓝色字体的部分是对称加密的算法和密钥的具体内容，客户把它们发送给服务器。&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{OK，收到！}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{你的余额是100元}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;在上面的通信过程中，“客户”在确认了“服务器”的身份后，“客户”自己选择一个对称加密算法和一个密钥，把这个对称加密算法和密钥一起用公钥加密后发送给“服务器”。注意，由于对称加密算法和密钥是用公钥加密的，就算这个加密后的内容被“黑客”截获了，由于没有私钥，“黑客”也无从知道对称加密算法和密钥的内容。&lt;/p&gt;
&lt;p&gt;由于是用公钥加密的，只有私钥能够解密，这样就可以保证只有服务器可以知道对称加密算法和密钥，而其它人不可能知道(这个对称加密算法和密钥是“客户”自己选择的，所以“客户”自己当然知道如何解密加密)。这样“服务器”和“客户”就可以用对称加密算法和密钥来加密通信的内容了。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;总结一下，RSA加密算法在这个通信过程中所起到的作用主要有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;因为私钥只有“服务器”拥有，因此“客户”可以通过判断对方是否有私钥来判断对方是否是“服务器”。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端通过RSA的掩护，安全的和服务器商量好一个对称加密算法和密钥来保证后面通信过程内容的安全。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果这里您理解了为什么不用RSA去加密通信过程，而是要再确定一个对称加密算法来保证通信过程的安全，那么就说明前面的内容您已经理解了。(如果不清楚，再看下2.3和2.4，如果还是不清楚，那应该是我们说清楚，您可以留言提问。)&lt;/p&gt;
&lt;p&gt;到这里，“客户”就可以确认“服务器”的身份，并且双方的通信内容可以进行加密，其他人就算截获了通信内容，也无法解密。的确，好像通信的过程是比较安全了。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;但是这里还留有一个问题，在最开始我们就说过，“服务器”要对外发布公钥，那“服务器”如何把公钥发送给“客户”呢？我们第一反应可能会想到以下的两个方法：&lt;/p&gt;
&lt;p&gt;a)把公钥放到互联网的某个地方的一个下载地址，事先给“客户”去下载。&lt;/p&gt;
&lt;p&gt;b)每次和“客户”开始通信时，“服务器”把公钥发给“客户”。&lt;/p&gt;
&lt;p&gt;但是这个两个方法都有一定的问题，&lt;/p&gt;
&lt;p&gt;对于a)方法，“客户”无法确定这个下载地址是不是“服务器”发布的，你凭什么就相信这个地址下载的东西就是“服务器”发布的而不是别人伪造的呢，万一下载到一个假的怎么办？另外要所有的“客户”都在通信前事先去下载公钥也很不现实。&lt;/p&gt;
&lt;p&gt;对于b)方法，也有问题，因为任何人都可以自己生成一对公钥和私钥，他只要向“客户”发送他自己的私钥就可以冒充“服务器”了。示意如下：&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“黑客”：你好           //黑客截获“客户”发给“服务器”的消息&lt;/p&gt;
&lt;p&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器，这个是我的公钥    //黑客自己生成一对公钥和私钥，把公钥发给“客户”，自己保留私钥&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“黑客”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“黑客”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[黑客自己的私钥|RSA]      //客户收到“黑客”用私钥加密的信息后，是可以用“黑客”发给自己的公钥解密的，从而会误认为“黑客”是“服务器”&lt;/p&gt;
&lt;p&gt;因此“黑客”只需要自己生成一对公钥和私钥，然后把公钥发送给“客户”，自己保留私钥，这样由于“客户”可以用黑客的公钥解密黑客的私钥加密的内容，“客户”就会相信“黑客”是“服务器”，从而导致了安全问题。&lt;strong&gt;这里问题的根源就在于，大家都可以生成公钥、私钥对，无法确认公钥对到底是谁的。 &lt;/strong&gt;如果能够确定公钥到底是谁的，就不会有这个问题了。例如，如果收到“黑客”冒充“服务器”发过来的公钥，经过某种检查，如果能够发现这个公钥不是“服务器”的就好了。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，数字证书出现了，它可以解决我们上面的问题。先大概看下什么是数字证书，一个证书包含下面的具体内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书的发布机构&lt;/li&gt;
&lt;li&gt;证书的有效期&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;证书所有者（Subject）&lt;/li&gt;
&lt;li&gt;签名所使用的算法&lt;/li&gt;
&lt;li&gt;指纹以及指纹算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证书的内容的详细解释会在后面详细解释，这里先只需要搞清楚一点，&lt;strong&gt;数字证书可以保证&lt;strong&gt;数字&lt;/strong&gt;证书里的公钥确实是这个证书的所有者(Subject)的，或者证书可以用来确认对方的身份&lt;/strong&gt;。也就是说，我们拿到一个数字证书，我们可以判断出这个数字证书到底是谁的。至于是如何判断的，后面会在详细讨论数字证书时详细解释。现在把前面的通信过程使用数字证书修改为如下：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.5 第五回合：&lt;/h6&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器，这里是我的数字证书        //这里用证书代替了公钥&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器 {你好，我是服务器}[私钥|RSA]&lt;/p&gt;
&lt;p&gt;注意，上面第二次通信，“服务器”把自己的证书发给了“客户”，而不是发送公钥。“客户”可以根据证书校验这个证书到底是不是“服务器”的，也就是能校验这个证书的所有者是不是“服务器”，从而确认这个证书中的公钥的确是“服务器”的。后面的过程和以前是一样，“客户”让“服务器”证明自己的身份，“服务器”用私钥加密一段内容连同明文一起发给“客户”，“客户”把加密内容用数字证书中的公钥解密后和明文对比，如果一致，那么对方就确实是“服务器”，然后双方协商一个对称加密来保证通信过程的安全。到这里，整个过程就完整了，我们回顾一下：&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;2.6 完整过程：&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;step1&lt;/strong&gt;： “客户”向服务端发送一个通信请求&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：你好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step2&lt;/strong&gt;： “服务器”向客户发送自己的数字证书。证书中有一个公钥用来加密信息，私钥由“服务器”持有&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：你好，我是服务器，这里是我的数字证书&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step3&lt;/strong&gt;： “客户”收到“服务器”的证书后，它会去验证这个数字证书到底是不是“服务器”的，数字证书有没有什么问题，数字证书如果检查没有问题，就说明数字证书中的公钥确实是“服务器”的。检查数字证书后，“客户”会发送一个随机的字符串给“服务器”用私钥去加密，服务器把加密的结果返回给“客户”，“客户”用公钥解密这个返回结果，如果解密结果与之前生成的随机字符串一致，那说明对方确实是私钥的持有者，或者说对方确实是“服务器”。&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：向我证明你就是服务器，这是一个随机字符串     //前面的例子中为了方便解释，用的是“你好”等内容，实际情况下一般是随机生成的一个字符串。&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{一个随机字符串}[私钥|RSA]&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;step4&lt;/strong&gt;： 验证“服务器”的身份后，“客户”生成一个对称加密算法和密钥，用于后面的通信的加密和解密。这个对称加密算法和密钥，“客户”会用公钥加密后发送给“服务器”，别人截获了也没用，因为只有“服务器”手中有可以解密的私钥。这样，后面“服务器”和“客户”就都可以用对称加密算法来加密和解密通信内容了。&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{OK，已经收到你发来的对称加密算法和密钥！有什么可以帮到你的？}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“客户”-&amp;gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;“服务器”-&amp;gt;“客户”：{你好，你的余额是100元}[密钥|对称加密算法]&lt;/p&gt;
&lt;p&gt;…… //继续其它的通信&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;2.7 其它问题：&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;上面的过程已经十分接近HTTPS的真实通信过程了，完全可以按照这个过程去理解HTTPS的工作原理。但是我为了方便解释，上面有些细节没有说到，有兴趣的人可以看下这部分的内容。可以跳过不看，无关紧要。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;【问题1】&lt;/p&gt;
&lt;p&gt;上面的通信过程中说到，在检查完证书后，“客户”发送一个随机的字符串给“服务器”去用私钥加密，以便判断对方是否真的持有私钥。但是有一个问题，“黑客”也可以发送一个字符串给“服务器”去加密并且得到加密后的内容，这样对于“服务器”来说是不安全的，因为黑客可以发送一些简单的有规律的字符串给“服务器”加密，从而寻找加密的规律，有可能威胁到私钥的安全。所以说，“服务器”随随便便用私钥去加密一个来路不明的字符串并把结果发送给对方是不安全的。&lt;/p&gt;
&lt;p&gt;〖解决方法〗&lt;/p&gt;
&lt;p&gt;每次收到“客户”发来的要加密的的字符串时，“服务器”并不是真正的加密这个字符串本身，而是把这个字符串进行一个hash计算，加密这个字符串的hash值(不加密原来的字符串)后发送给“客户”，“客户”收到后解密这个hash值并自己计算字符串的hash值然后进行对比是否一致。也就是说，“服务器”不直接加密收到的字符串，而是加密这个字符串的一个hash值，这样就避免了加密那些有规律的字符串，从而降低被破解的机率。“客户”自己发送的字符串，因此它自己可以计算字符串的hash值，然后再把“服务器”发送过来的加密的hash值和自己计算的进行对比，同样也能确定对方是否是“服务器”。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;【问题2】&lt;/p&gt;
&lt;p&gt;在双方的通信过程中，“黑客”可以截获发送的加密了的内容，虽然他无法解密这个内容，但是他可以捣乱，例如把信息原封不动的发送多次，扰乱通信过程。&lt;/p&gt;
&lt;p&gt;〖解决方法〗&lt;/p&gt;
&lt;p&gt;可以给通信的内容加上一个序号或者一个随机的值，如果“客户”或者“服务器”接收到的信息中有之前出现过的序号或者随机值，那么说明有人在通信过程中重发信息内容进行捣乱，双方会立刻停止通信。有人可能会问，如果有人一直这么捣乱怎么办？那不是无法通信了？ 答案是的确是这样的，例如有人控制了你连接互联网的路由器，他的确可以针对你。但是一些重要的应用，例如军队或者政府的内部网络，它们都不使用我们平时使用的公网，因此一般人不会破坏到他们的通信。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;【问题3】&lt;/p&gt;
&lt;p&gt;在双方的通信过程中，“黑客”除了简单的重复发送截获的消息之外，还可以修改截获后的密文修改后再发送，因为修改的是密文，虽然不能完全控制消息解密后的内容，但是仍然会破坏解密后的密文。因此发送过程如果黑客对密文进行了修改，“客户”和“服务器”是无法判断密文是否被修改的。虽然不一定能达到目的，但是“黑客”可以一直这样碰碰运气。&lt;/p&gt;
&lt;p&gt;〖解决方法〗&lt;/p&gt;
&lt;p&gt;在每次发送信息时，先对信息的内容进行一个hash计算得出一个hash值，将信息的内容和这个hash值一起加密后发送。接收方在收到后进行解密得到明文的内容和hash值，然后接收方再自己对收到信息内容做一次hash计算，与收到的hash值进行对比看是否匹配，如果匹配就说明信息在传输过程中没有被修改过。如果不匹配说明中途有人故意对加密数据进行了修改，立刻中断通话过程后做其它处理。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h5&gt;3. 证书的构成和原理&lt;/h5&gt;
&lt;h6&gt;3.1 证书的构成和原理&lt;/h6&gt;
&lt;p&gt;之前已经大概说了一个证书由什么构成，但是没有仔细进行介绍，这里对证书的内容做一个详细的介绍。先看下一个证书到底是个什么东西，在windows下查看一个证书时，界面是这样的，我们主要关注一下Details Tab页，其中的内容比较长，我滚动内容后后抓了三个图，把完整的信息显示出来：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/3b43a1fa4354156cbd2ad40b6fd1b638.png&quot; rel=&quot;lightbox[74614]&quot; title=&quot;数字证书原理&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74616&quot; alt=&quot;2009121816032340&quot; src=&quot;/images/jobbole.com/497e3ecd7ee5e85812305d5768ede5fc.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;上面的步骤结束后，会又弹出一个对话框，里面有三个单选按钮如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My user account&lt;/li&gt;
&lt;li&gt;Service account&lt;/li&gt;
&lt;li&gt;Computer account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以选择第一或者第三个选项，用来查看当前用户的证书或整个计算里面安装的证书。我们这里就默认选择第一个，平时一般安装证书的时候都会给所有用户安装，所以选择第一个和第三个选项看到的证书会差不多。我们在左边的导航树中选中受信任的证书发布机构(Trusted Root Certificate Authorities)，然后点击下面的证书(Certificates)，在右边的区域中就可以看到所有的受信任的证书发布机构的证书。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/77823c8c43e1168f66738b58f71302cb.png&quot; rel=&quot;lightbox[74614]&quot; title=&quot;数字证书原理&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74617&quot; alt=&quot;trustedcaAuth_thumb&quot; src=&quot;/images/jobbole.com/33a24871062fcc3175e7e62aa759cfa8.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;注意上面的图片中，右边我们选中的这个证书发布机构”SecureTrust CA”，我们前面在第3章3.2节中举例子的时候，就是去向这个证书发布机构申请的证书，由于我们申请的证书是这个机构发布的，所以应用程序在检查我们的证书的发布机构时(会检查我们证书的签名，确认是该机构发布的证书)，就会发现是可以信任的证书发布机构，从而就会相信我们证书的真实性。&lt;/p&gt;
&lt;p&gt;删除数字证书很简单，直接在右边的列表中右键然后删除就可以了。&lt;/p&gt;
&lt;p&gt;数字证书的安装也比较简单，直接双击数字证书文件，会打开数字证书，对话框下面会有一个Install Certificate按钮，点击后就可以根据向导进行安装，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/fb462dcb5609578b955317d5ae8772411.png&quot; rel=&quot;lightbox[74614]&quot; title=&quot;数字证书原理&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74620&quot; alt=&quot;installCertificate_thumb_1&quot; src=&quot;/images/jobbole.com/caa28b56eb5e3fd6725a50fcaa2a774b.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个证书是我自己生成的测试证书，在证书的导入向导里面，它会让你选择导入到什么位置，如果是一个我们自己信任的证书发布机构自己的证书，只要导入到Certificate Authorities就可以了。Trusted Root Certificate Authorities, Intermediate Certification Authorities, Third-Party Root Certification Authorities 都是可以的，他们只是对证书的发布机构做了一个分类，还有一些其它的证书类型，例如Personal(个人证书)等等，具体就不介绍了。安装的时候一般来说可以用默认的选择项一直”下一步”到底。&lt;/p&gt;
&lt;h6&gt;4.2 如何自己创建证书&lt;/h6&gt;
&lt;p&gt;每个证书发布机构都有自己的用来创建证书的工具，当然，具体他们怎么去创建一个证书的我也不太清楚，不同类型的证书都有一定的格式和规范，我没有仔细去研究过这部分内容。 微软为我们提供了一个用来创建证书的工具makecert.exe，在安装Visual Studio的时候会安装上。如果没有安装也无所谓，可以上网去下一个，搜索&lt;strong&gt;makecert&lt;/strong&gt;就可以了。可以直接从我的博客下载，这是&lt;a href=&quot;http://files.cnblogs.com/JefferySun/makecert.zip&quot;&gt;链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;向一些正规的证书发布机构申请证书一般是要收费的(因为别人要花时间检查你的身份，确认有没有同名的证书等等)，这里我们看下如何自己创建一个证书，为后面在IIS中配置Https做准备。&lt;/p&gt;
&lt;p&gt;我们用到的是&lt;strong&gt;makecert&lt;/strong&gt;这个工具，微软有很详细的使用帮助，我这里只做一个简单的解释，详细的各种参数和使用方法请查看&lt;a href=&quot;http://msdn.microsoft.com/zh-cn/library/bfsktky3(VS.80).aspx&quot;&gt;MSDN的makecert的帮助&lt;/a&gt;。但是里面有些参数说得不够清楚，而且还有遗漏的，可以参看我后面的解释作为一个补充。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;先看下&lt;strong&gt;makecert&lt;/strong&gt;最简单的使用方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;makecert.exe test.cer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的命令会在makecert.exe所在的目录生成一个证书文件test.cer的数字证书文件。可以双击证书打开，看看证书的内容如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/b9d5f834ceb3db959cee0a69c7e3de97.png&quot; rel=&quot;lightbox[74614]&quot; title=&quot;数字证书原理&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74624&quot; alt=&quot;testCertificate1_thumb (1)&quot; src=&quot;/images/jobbole.com/d829e3d1305aa7ac585811e1ff446b20.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;证书的发布机构是”Root Agency”，证书的主题(证书发布给谁)是”Joe’s-Software-Emporium”，因为我们没有指定把证书发布给谁，makecert自己给我们随便生成了一个公司的名字。另外还指定了公钥、签名算法(用来解密签名)、指纹和指纹算法等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，因为这个证书是由微软的工具生成的，严格来说它没什么发布机构，所以微软虚拟了一个叫做”Root Agency”的发布机构，默认情况下，windows里面安装了这个所谓的证书发布机构的证书，但是这证书默认情况下不是受信任的，原因很简单，这样做大家都可以用makecert来制作合法的数字证书了。如果我们自己硬是要，也可以把它设置为受信任的。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;下面我们看下其它的参数，比如我们要给网站 www.jefferysun.com 生成一个证书MyCA.cer，假设我们把makecert.exe放在C：盘下，命令行如下：&lt;/p&gt;
&lt;div id=&quot;_mcePaste&quot;&gt;makecert -r -pe -n “CN=10.30.146.206″ -b 01/01/2000 -e 01/01/2036 -eku 1.3.6.1.5.5.7.3.1 -ss my -sr localMachine -sky exchange -sp “Microsoft RSA SChannel Cryptographic Provider” -sy 12&lt;/div&gt;
&lt;p&gt;C:\&amp;gt; makecert.exe –pe -r  –n  “CN=www.jefferysun.com” -ss my -sr LocalMachine -a sha1 -len 2048  MyCA.cer&lt;/p&gt;
&lt;p&gt;解释一下makecert的常用参数的意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;-n&lt;/strong&gt; 指定主题的名字，这个是有固定的格式的， CN=主题名字 ，CN应该是Certificate Name的缩写。我这里的主题的名字就是我们的IIS所在机器的IP。这里可以指定一些主题的其它附加信息，例如 O= *** 表示组织信息等等。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-r&lt;/strong&gt; 创建自签署证书，意思就是说在生成证书时，将证书的发布机构设置为自己。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-pe&lt;/strong&gt; 将所生成的私钥标记为可导出。注意，服务器发送证书给客户端的时候，客户端只能从证书里面获取公钥，私钥是无法获取的。如果我们指定了这个参数，证书在安装在机器上后，我们还可以从证书中导出私钥，默认情况下是不能导出私钥的。正规的途径发布的证书，是不可能让你导出私钥的。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-b –e&lt;/strong&gt; 证书的有效期&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-ss&lt;/strong&gt; 证书的存储名称，就是windows证书存储区的目录名，如果不存在在的话就创建一个。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-sr&lt;/strong&gt; 证书的存储位置，只有currentuser（默认值）或 localmachine两个值。&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-sv&lt;/strong&gt; 指定保存私钥的文件，文件里面除了包含私钥外，其实也包含了证书。这个文件是需要保密的，这个文件在服务端配置时是需要用到的。&lt;/li&gt;
&lt;li&gt;这个CN=10.30.146.206要与自己的服务器相对应，要不然在配置HTTPS的时候会出现错误&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-a&lt;/strong&gt; 指定签名算法，必须是md5或rsa1。(还记得签名算法的作用不？可以看一下3章的第1节中关于签名算法的介绍)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-in&lt;/strong&gt; 指定证书发布机构的名称&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-len&lt;/strong&gt; 这个参数在中文的帮助文档中好像没有提到，但是这个其实很重要，用于指定公钥的位数，越大越安全，默认值是1024，推荐2048。我试了下，这个不为1024的倍数也是可以的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成证书后可以进行安装，安装过程可以参看4.1节。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://www.jobdeer.com/?fr=jobbole&quot;&gt;&lt;/a&gt;&lt;/p&gt;
	


	

</description>
        <pubDate>Thu, 31 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-31-74614-e5103064d.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-31-74614-e5103064d.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>优化你的css</title>
        <description>

		&lt;blockquote&gt;&lt;p&gt;
  优化你的css，是优化你的xxx系列的第一篇，后续会推出多篇，欢迎大家来关注&lt;a href=&quot;http://weibo.com/mbuweb&quot;&gt;移动云前端小组&lt;/a&gt;获取最新文章。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;系列概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
  在移动web兴起的年代，速度优化重新被大家重视起来，因为手机的网络环境和性能比PC端差了很多，估计大家也能感觉到用手机打开网页的时候，能明显感觉到页面蜗牛般的速度。&lt;/p&gt;
&lt;p&gt;  这个系列的优化会以移动环境为基础，当然绝大多数规则也同样适合PC端。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;优化的基本原则&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;
  速度优化有一些基本思路，提前总结一下
&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;按需加载(只加载你需要的)&lt;/li&gt;
&lt;li&gt;并行(让串行的事情并行起来)&lt;/li&gt;
&lt;li&gt;压缩(通过压缩减少体积)&lt;/li&gt;
&lt;li&gt;缓存(利用缓存，减少请求等待)&lt;/li&gt;
&lt;li&gt;预测(预测用户行为，提前发出请求)&lt;/li&gt;
&lt;li&gt;合并(把多个零散文件合并起来，减少请求)&lt;/li&gt;
&lt;li&gt;自动化(让速度优化变成一种常规，和自动化工具(例如gulp,grunt,fis)结合，减少成本)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;进入正题，优化你的css&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;
  为什么第一篇讲css，因为css是最难优化的，图片和js你都可以延迟加载，而css不可以，你必须在dom前面加载css，你必须接受css阻塞dom渲染的现实。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;css优化之压缩(cssshrink)&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;
  我们一般都会对css进行常规压缩，主要做去空格和换行的工作。这里推荐的cssshrink会做更精细的工作，cssshrink会首先通过css parser对css进行解析，然后有针对性的进行优化。例如会吧0px和0%转换成0，bold转换成700，字符级别的极致压缩，为作者点个赞。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cssshrink具体的优化策略，&lt;a href=&quot;http://cssshrink.com/velocity&quot;&gt;点此查看&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;cssshrink &lt;a href=&quot;https://github.com/stoyan/cssshrink&quot;&gt;GitHub地址&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;css优化之合并&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用gulp-concat将多个css合并在一起&lt;/li&gt;
&lt;li&gt;不要使用@import 减少阻塞和请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;css拆分&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;
  看起来和上面有些冲突，这也是css和其它部分优化不同的地方。 一般我们大家都习惯把css放在最上面，js放在最下面。这是一个好习惯，但是对于css来说并不是最好的选择。&lt;/p&gt;
&lt;p&gt;  在移动端，大家非常重视首屏时间，也就是用户看到页面的时间。把整个页面的css都放在最上面，大量首屏用不到的css会阻塞首屏的展现。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;head只放首屏能用到的css，首屏外的css下移&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;css使用率&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;
  一般页面经过多人维护后，会产生大量用不到css，大家也不敢随意删除，这就需要一些检测工具
&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/demohi/unu&quot;&gt;unu&lt;/a&gt;&lt;br&gt;
1.1 unu是一个用来检测页面哪些css没有用到的Node.js模块&lt;br&gt;
1.2 优点：提供&lt;a href=&quot;https://github.com/demohi/unu-web&quot;&gt;可视化界面&lt;/a&gt;,使用非常简单，输入url，即可查看页面css的使用情况&lt;br&gt;
1.3 缺点：目前只支持style标签式的css，另外没有执行页面的js&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/giakki/uncss&quot;&gt;uncss&lt;/a&gt;&lt;br&gt;
2.1 uncss是可以把页面css没有用到去除的模块&lt;br&gt;
2.2 优点：支持命令行和gulp、grunt插件，支持link方式，基于phantomjs，模拟浏览器执行，支持js执行&lt;br&gt;
2.3 缺点：仅凭一个url导出的css，不具有实际价值，另外不支持style标签&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/addyosmani/critical&quot;&gt;critical&lt;/a&gt;&lt;br&gt;
3.1 critical是一个用来检测首屏css有哪些没用到的模块&lt;br&gt;
3.2优点：可以输入首屏宽高来检测、有gulp、grunt插件&lt;br&gt;
3.3 缺点：不支持url，只支持本地html，不支持style标签&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;
  速度优化对于开发人员来说是件降低生产力的事情，所以需要尽可能的自动化，设置好规则，无痛优化，同时避免后续恶化。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;有任何问题，欢迎&lt;/p&gt;
			&lt;!-- .entry-content --&gt;

</description>
        <pubDate>Thu, 31 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-31-%25e4%25bc%2598%25e5%258c%2596%25e4%25bd%25a0%25e7%259a%2584css.html-2280d8aae.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-31-%25e4%25bc%2598%25e5%258c%2596%25e4%25bd%25a0%25e7%259a%2584css.html-2280d8aae.html</guid>
        
        
        <category>baidu_mweb</category>
        
      </item>
    
      <item>
        <title>SQL/NoSQL两大阵营激辩：谁更适合大数据</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/0ac9bfe413ce35ed7450ca428b4aba5c.jpg&quot; rel=&quot;lightbox[74548]&quot; title=&quot;SQL/NoSQL两大阵营激辩：谁更适合大数据&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74549&quot; alt=&quot;291727418377831&quot; src=&quot;/images/jobbole.com/2b867e6c170274b71c49657cf4a7288d.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;企业在着手推动大数据项目的过程中，经常会遇到这样一个关键性的决策难题——到底该使用哪种数据库方案?经过综合考量，最终的选项往往只剩下 SQL 与 NoSQL 两种。SQL 具有骄人的业绩以及庞大的安装基础，但 NoSQL 却能够带来可观的收益并同样拥有不少支持者。在今天的辩论当中，我们将一同听听两大阵营中各位专家的意见。&lt;/p&gt;
&lt;p&gt;Network World 网站主编 John Dix 专门组织了此次辩论并邀请到多位专家。其中两位参与专家分别是 VoltDB 公司 CTO Ryan Betts 和 Couchbase 公司 CEO Bob Wiederhold。Ryan Betts 认为 SQL 已经在大型企业当中赢得了稳定的生存空间，而大数据只不过是 SQL 需要支撑的另一项工作内容。Bob Wiederhold 则认为 NoSQL 是一套极具可行性的备选方案，事实上它也在多个领域中成为大数据的卓越配合手段——特别是在可扩展性方面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;观点一：SQL 已经通过时间考验，且仍蓬勃发展——&lt;/strong&gt;VoltDB 公司 CTO Ryan Betts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结构化查询语言(简称 SQL)几十年来已经用累累战果以及赫赫声名证明了自身实力，而且目前仍在继续投身于多家大数据厂商及相关企业当中，其中包括谷歌、Facebook、Cloudera 以及 Apache。&lt;/p&gt;
&lt;p&gt;虽然后起之秀 NoSQL 确实引起了一定反响，但 SQL 仍然在市场上保持着显著的份额优势并继续在大数据领域不断赢得投入与采纳。&lt;/p&gt;
&lt;p&gt;一旦某种技术像 SQL 这样取得了主导地位，人们往往会忘记其最为核心的竞争优势。SQL 之所以能够胜出，主要在于它拥有以下一系列独特的优势组合：&lt;/p&gt;
&lt;p&gt;1. SQL 能够加强与数据之间的互动，允许用户针对单一数据库设计提出内容广泛的问题。这正是 SQL 成功的关键所在——如果数据不具备互动性、则基本上将失去实用性。而持续增长的互动性又能为数据库的未来发展带来新的审视角度、相关问题以及实际意义。&lt;/p&gt;
&lt;p&gt;2. SQL 具备标准化特性，允许用户自由运用源自各类系统的专业知识、同时支持第三方插件及工具。&lt;/p&gt;
&lt;p&gt;3. SQL 具备扩展性、功能丰富且经过实际验证，能够解决各类难题——包括以写入为主导的快速事务处理以及涉及频繁扫描的深层分析。&lt;/p&gt;
&lt;p&gt;4. SQL 能够与数据表现及存储机制顺畅对接。某些 SQL 系统还支持 JSON 以及其它结构化对象格式，从而带来优于 NoSQL 方案的性能表现及更多功能特性。&lt;/p&gt;
&lt;p&gt;“NoSQL”这一表述其实并不准确，但在本次讨论中，我采用了 Rick Cattell 博士为 NoSQL 总结出的定义，即“指那些能够提供键/值存储或者简单记录与索引等操作的系统，旨在为这些简单操作提供垂直可扩展性。”&lt;/p&gt;
&lt;p&gt;很明显，目前市面上的很多新型数据库彼此之间存在较大差异——准确掌握它们各自特性与深层机制给用户来的便利与局限是获得项目部署成功的关键所在。NoSQL 的核心特性使其更适合于解决特定问题。举例来说，图形数据库更适合处理那些将数据根据关系而非传统行或者文档形式加以组织的实例，而特定文本搜索系统则比较擅长处理以实时方式查询用户输入内容的情况。&lt;/p&gt;
&lt;p&gt;在这里，我打算概括性阐述 SQL 系统与简单键/值乃至仅仅在存储格式及可扩展性方面有所创新的 JSON 对象存储系统相比，到底存在哪些差异与主要优势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* SQL 带来交互特性。&lt;/strong&gt;SQL 是一种声明性查询语言。用户说出自己想要的内容(例如显示出过去五年来，每年三月份购买量最大的客户分别来自哪些地区)，数据库则在内部组建出相关算法并根据要求提取对应结果。相比之下，NoSQL 孕育出的编码创新成果 MapReduce 则是一种规程化查询技术。MapReduce 要求用户不仅了解自己想要的结果，同时也需要提供获取结果的具体执行方式。&lt;/p&gt;
&lt;p&gt;虽然听起来只是一种颇为枯燥的技术性差异，但这种特性仍然极为关键，原因有以下两点：首先，声明性 SQL 查询能够更为轻松地通过图形化工具以及对报告生成器的简单点击来创建。这种相对较低的使用门槛能够帮助分析师、运营者、管理者以及其他不了解软件编程知识的用户享受其核心功能及成效。第二，对数据库引擎使用内部信息并选择高效算法的方式进行抽象化处理。即使物理层或者数据库索引出现变动，优化算法仍然能够确切完成任务。相比之下，在过去的程序化系统当中、程序员需要重新审视现有处理方式并进行二次编程。这样既带来高昂成本，又很有可能导致意外错误。&lt;/p&gt;
&lt;p&gt;市场对于这种本质差异倒是非常了然。早在 2010 年，谷歌就宣布引入一套 SQL 方案以强化 MapReduce，从而满足内部用户的实际需求。最近，Facebook 则发布了自己的 SQL 方案 Presto，意在对其 PB 级别 HDFS 集群数据进行查询。根据 Facebook 方面的说法：“由于我们的数据仓库规模已经增长至 PB 级别、业务需求也逐步发展，我们显然需要一套经过优化的交互式系统以实现更低的查询延迟。”除此之外，Cloudera 正在 HDFS 以上建立自己的 SQL 方案 Impala。前面提到的这一系列发展都立足于 Hive——一套面向 Hadoop、长期存在且得到广泛采用的 SQL 外壳。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* SQL 具备标准化特性。&lt;/strong&gt;虽然供应商有时候会对自己的 SQL 接口进行特殊调整与定制，但从本质上讲 SQL 内核仍然是一套标准化程度很高的方案，以 ODBC 以及 JDBC 为代表的其它规范同样提供广泛可用的、面向 SQL 系统的稳定接口。由此衍生出的管理及操作工具生态系统能够帮助大家以 SQL 系统为基础，实现应用程序的设计、监控、检查、探索以及开发。&lt;/p&gt;
&lt;p&gt;SQL 用户及程序员也因此得以重新使用自己积累自多种后端系统的 API 以及用户界面知识，从而缩减应用程序开发时间。标准化特性还允许拥有声明许可的第三方打造提取、转换以及加载(简称 ETL)工具，旨在帮助企业以流程化方式处理不同数据库及系统之间的数据流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* SQL 具备可扩展性。&lt;/strong&gt;有些朋友可能误以为 SQL 必须通过牺牲性能的方式来获得可扩展性，这其实是完全错误的。如上所述，Facebook 打造了一款 SQL 接口对 PB 级别的数据加以查询。SQL 在运行 ACID 事务处理任务时同样具备极快的速度表现。SQL 为数据存储及检索机制提供的抽象化手段允许用户以统一化方式完成处理工作，而且无需考虑具体任务类型以及数据规模;这使得 SQL 能够高效运行在各类集群化副本数据存储体系之间。将 SQL 作为接口的作法不涉及云创建、具体规模或者 HA 系统，而且 SQL 当中也没有任何固有因素会对容错性、高可用性以及复制能力产生限制。事实上，目前所有现代化 SQL 系统都能够很好地支持云体系中的横向可扩展性、复制能力以及容错性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* SQL 支持 JSON。&lt;/strong&gt;几年之前，很多 SQL 系统开始将 XML 文档支持能力纳入自身设计思路。时至今日，随着 JSON 逐步成为主流数据交换格式之一，各 SQL 厂商也在积极为 JSON 提供支持。鉴于当下敏捷化编程流程以及对互联网接入基础设施正常运行时间的要求，结构化数据类型的支持能力已经成为不可或缺的重要一环。Oracle 12c、PostgreSQL 9.2、VoltDB 以及其它各类数据库方案都开始支持 JSON——其性能基准水平普遍优于“原生”JSON NoSQL 方案。&lt;/p&gt;
&lt;p&gt;SQL 将继续在市场份额的争夺战中占据主动，也将继续吸引到更多投资方与采纳者的支持。NoSQL 数据库在提供专有查询语言或者简单键-值语义的同时，却无法从深入的技术层面带来差异性，这无疑严重影响了其挑战市场统治者的能力。现代 SQL 系统能够在保持甚至超越原有可扩展性的同时，支持丰富的查询语义、建立并培养用户基础、拓展生态系统集成效果并在企业环境内深化采纳程度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;观点二：NoSQL 更适合大数据应用程序&lt;/strong&gt;——Couchbase 公司 CEO Bob Wiederhold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前已经有越来越多的企业开始将 NoSQL 视为关系型数据库的一种可行性替代方案;特别是在大数据应用程序领域，很多企业用户意识到规模化操作的实际表现要优于标准化集群与商用服务器所带来的效果。除此之外，采用无模式化数据模型往往更适合当下各类不同数据的捕捉与处理工作。&lt;/p&gt;
&lt;p&gt;在 NoSQL 领域讨论大数据话题时，我们主要针对的是操作型数据库当中的读取与写入流程——也就是指人们在日常在线事务处理过程中所涉及的交互任务(例如利用大数据指导在线航班预定)。操作型数据库与分析型数据库有所不同，前者一般需要打理大量数据并收集数据当中所蕴含的分析结论(例如利用大数据分析特定某一天会有多少乘客预定某次航班)。&lt;/p&gt;
&lt;p&gt;不过对于操作型数据库中的大数据而言，其设计主旨并非围绕分析性工作所展开;操作型数据库通常需要为无数用户提供庞大的数据集，帮助他们进行持续性数据访问并进行实时事务处理。用于操作并管理大数据内容的此类数据库都具备庞大的规模，这也解释了 NoSQL 特性的重要意义及其在大数据应用程序中扮演核心角色的原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* NoSQL 是实现可扩展性的关键所在&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;技术行业在每一次迎来硬件发展的根本性转变时，都必然经历过渡拐点。在数据库领域，这种由向上扩展转为向外扩展架构的转变也成为推动 NoSQL 快速成长的主要因素。关系型数据库，其中包括由甲骨文及 IBM 等巨头所打造的具体方案，专注于解决向上扩展难题。也就是说，它们采取集中式、全局共享技术，只能通过添加价格更为昂贵的硬件设备满足扩展需求。&lt;/p&gt;
&lt;p&gt;与之相反，NoSQL 数据库从设计思路上就考虑到了分布式特性，属于彻头彻尾声的向外扩展技术。它们利用一系列分布式节点(构成一套整体集群)来提供具备卓越弹性的扩展能力，从而帮助用户随意添加更多节点以应对持续增加的工作负载。&lt;/p&gt;
&lt;p&gt;分布式向外扩展方案往往还会带来低于向上扩展机制的使用成本。后者属于一整套庞大、复杂、具备容错性机制的服务器体系，因此无论是设计、建造还是后期支持都会带来高昂的成本支出。商用关系型数据库的许可成本同样不容忽视，因为其计费策略以单一服务器为基本单位。在另一方面，NoSQL 数据库则通常属于开源项目，以服务器集群为整体计费单位、价格也相比较低。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* NoSQL 是实现灵活性的关键所在&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关系型与 NoSQL 数据模型可谓完全不同。关系型模型需要将数据拆分成包含行与列的多个关联性表，这些表通过同样保存在列中的外键实现相互引用。&lt;/p&gt;
&lt;p&gt;当用户需要对一组数据进行查询时，所需信息必须由多个表中收集获得——通常涉及数百种当下常用的企业应用程序——并将其加以整合，而后才能交付终端应用。与之相似，在写入数据时、写入流程需要加以协调并在执行过程中面向多个表。当数据量相对较小、向数据库内导入的速度并不太快的情况下，关系型数据库通常具备捕捉并存储信息的能力。不过目前的应用程序通常需要处理海量数据的读取与写入操作、且要求以近实时方式完成，这就超出了操作型数据库的能力范围。&lt;/p&gt;
&lt;p&gt;NoSQL 数据库采取的模式则完全不同。从核心角度看，NoSQL 数据库真正实现了“NoREL”、也就是非关系型，也就是说此类方案在保存并整理信息的过程中并不依赖于表以及各个表之间的关系。举例来说，一套面向文档的 NoSQL 数据库会首先获取到我们需要的数据，而后将其整合成采用 JSON 格式的文档。每个 JSON 文档都可以被视为能供应用程序使用的对象。JSON 文档可以把原本需要 25 个关系型数据库表才能存放的数据保存在同一行当中，并将其整理为单一文档/对象。&lt;/p&gt;
&lt;p&gt;信息汇总工作可能导致信息内容出现重复，不过由于目前存储资源已经不再属于主要成本来源，因此这类数据模型能够带来更出色的灵活性、便于高效分配由此产生的文档并改进读取与写入操作的性能表现、从而提升 Web 应用程序的替代性效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* NoSQL 是支撑大数据应用的关键所在&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时至今日，我们已经能够愈发便捷地通过第三方环境、包括社交媒体网站对数据进行捕捉与访问。个人用户信息、地理位置数据、用户产生的内容、设备登录数据以及传感器数据等只是这股风潮当中的少数典型代表，数据来源清单正在不断拓展。同时，企业也越来越依赖大数据技术的力量、旨在驱动其关键性业务应用。总体而言，各企业已经开始向 NoSQL 伸出橄榄枝，因为这类方案是惟一能够适应当前新兴数据类型的处理手段。&lt;/p&gt;
&lt;p&gt;开发人员需要一套更为灵活、能够轻松适应最新数据类型的数据库方案，从而避免破坏第三方数据供应商所提供的内容结构调整。大部分新型数据属于非结构化或者半结构化类型，因此开发人员还需要自己的数据库有能力高效对其加以保存。遗憾的是，关系型数据库所采取的严格定义、以模式为基础的设计思路令我们无法快速接纳全新数据类型，自然也难以适应非结构化及半结构化数据。NoSQL 带来的数据模型则能够更好地与其实际需求加以映射。&lt;/p&gt;
&lt;p&gt;总体来说，随着 Web 与移动应用程序的不断普及、新兴趋势的推波助澜外加面向在线消费者行为与新型数据类别的转变，业界中的各类流程方案都渴望着一种能够为数据的管理及访问带来可扩展性与灵活性的数据库技术。在这样的背景下，NoSQL 技术正是能够有效满足上述需求的惟一解决方案。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://www.jobdeer.com/?fr=jobbole&quot;&gt;&lt;/a&gt;&lt;/p&gt;
	


	

</description>
        <pubDate>Wed, 30 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-30-74548-27ff28e56.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-30-74548-27ff28e56.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>算法系列：煎饼排序</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;我对算法很感兴趣，这次介绍的煎饼排序问题是在很多算法课程上都介绍过的经典例子。如果这是你第一次接触这个问题，我非常建议你在阅读时先独立思考解决方法。下面我们开始，希望大家喜欢咯。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;煎饼排序： 维基百科给出的释义煎饼排序是数学上的一个问题的一种通俗叫法：对一堆无序的煎饼以大小排序，铲子可以在任意位置伸进去并且把上面的煎饼都翻转过来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通俗点说，我们有一个锅铲和一堆煎饼，我们的目标是将煎饼按照大小排序，大的在下面。我们唯一的办法是让锅铲从一个地方伸进去，并且把上面所有的煎饼翻下来。举个栗子，一开始的煎饼是这样子的：&lt;/p&gt;
&lt;p&gt;&lt;img id=&quot;pic&quot; alt=&quot;&quot; src=&quot;/images/jobbole.com/006bcdc17b71a5bf164842458058f98b.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们决定在这里铲入：&lt;img id=&quot;pic&quot; alt=&quot;&quot; src=&quot;/images/jobbole.com/2532f583f72787eedf4ca721c520309c.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;红色箭头代表插入位置，蓝色的表示新的煎饼堆底。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;/images/jobbole.com/1c8217ab14bcd5a5d98745c555aa7b59.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;就是这样！&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;line-height: 15px;&quot;&gt;煎饼排序算法&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（在你往下看之前，我建议你先自己想想解决办法。）&lt;/p&gt;
&lt;p&gt;我现在讲的不是最好的办法，但是却是最直观最容易解释的。我选这种方法是为了向人们展示有些算法是非常容易并且直观的。我希望大家看了以后都能来尝试一下算法。通常，计算机专业会把普通人都吓跑，因为它一开始看上去太令人紧张。在这篇文章最后我将贴上更快的算法的链接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 将问题分解开来：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;我们需要将煎饼排序，初始的形状可能是任意的。&lt;/li&gt;
&lt;li&gt;我们只能对一部分煎饼进行翻转。&lt;/li&gt;
&lt;li&gt;如果想让某一块特定的煎饼在最下面，需要先把它翻到最上面。&lt;/li&gt;
&lt;li&gt;因此想要排好一块煎饼就需要先翻一下把它翻到顶上再把它翻到下面才行。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;凭直觉想出来的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 15px;&quot;&gt;把未排序的煎饼中最大（或者顺序在最后）的煎饼翻下去（需要两步）。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;重复第一步。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然我们有了算法，那么我们就来思考一下看它正确与否吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有一个煎饼的时候正确吗？——正确。&lt;/li&gt;
&lt;li&gt;两个煎饼，大的在上，正确吗？——正确，我们翻一下就行了。&lt;/li&gt;
&lt;li&gt;如果有三个煎饼，顺序从上到下依次是：中、大、小，正确吗？正确，我们先把大的翻上去，现在从上到下依次是大、中、小；然后我们再整个翻一下，顺序就变成了小、中、大。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然在这几种简单情况下都是正确的，那么我们不妨用Python写出来吧~（欢迎在Github上Fork我的&lt;a href=&quot;https://github.com/lettergram/pancakesort&quot;&gt;代码&lt;/a&gt;。）&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true&quot;&gt;# Sorts Pancakes                                                                                    
def sortPancakes(stack):

    sorted_index = 10
    for i in reversed(range(len(stack))):
        stack = flip(stack, findLargestPancake(stack, i))
        print(&quot;Flip Up&quot;, stack)
        stack = flip(stack, i)
        print(&quot;Flip Down&quot;, stack)
    return stack

# All of the pancakes are sorted after index                                                        
# Returns the index of largest unsorted pancake                                                     
def findLargestPancake(stack, index):

    largest_pancake = stack[index]
    largest_index = index;

    for i in range(index):
        if stack[i] &amp;gt; largest_pancake:
            largest_pancake = stack[i]
            largest_index = i

    print &quot;&quot;
    print(&quot;Insert Spatula in index&quot;, largest_index, &quot;Size&quot;, largest_pancake)
    return largest_index

# Slide spatula under pancake at index and flip to top                                              
def flip(stack, index):
    newStack = stack[:(index + 1)]
    newStack.reverse()
    newStack += stack[(index + 1):]
    return newStack

stack = [1, 4, 5, 2, 3, 8, 6, 7, 9, 0]

print&quot;\nUnsorted:&quot;
print stack

print &quot;\nIterating:&quot;
stack = sortPancakes(stack)

print &quot;\nSorted:&quot;
print stack
print &quot;&quot;&lt;/pre&gt;
&lt;p&gt;我们运行一下程序：&lt;/p&gt;
&lt;pre class=&quot;brush: text; gutter: true&quot;&gt;Unsorted: [1, 4, 5, 2, 3, 8, 6, 7, 9, 0]

Iterating:

(‘Insert Spatula in index’, 8, ‘Size’, 9)
 (‘Flip Up’, [9, 7, 6, 8, 3, 2, 5, 4, 1, 0])
 (‘Flip Down’, [0, 1, 4, 5, 2, 3, 8, 6, 7, 9])

(‘Insert Spatula in index’, 6, ‘Size’, 8)
 (‘Flip Up’, [8, 3, 2, 5, 4, 1, 0, 6, 7, 9])
 (‘Flip Down’, [7, 6, 0, 1, 4, 5, 2, 3, 8, 9])

(‘Insert Spatula in index’, 0, ‘Size’, 7)
 (‘Flip Up’, [7, 6, 0, 1, 4, 5, 2, 3, 8, 9])
 (‘Flip Down’, [3, 2, 5, 4, 1, 0, 6, 7, 8, 9])

(‘Insert Spatula in index’, 6, ‘Size’, 6)
 (‘Flip Up’, [6, 0, 1, 4, 5, 2, 3, 7, 8, 9])
 (‘Flip Down’, [3, 2, 5, 4, 1, 0, 6, 7, 8, 9])

(‘Insert Spatula in index’, 2, ‘Size’, 5)
 (‘Flip Up’, [5, 2, 3, 4, 1, 0, 6, 7, 8, 9])
 (‘Flip Down’, [0, 1, 4, 3, 2, 5, 6, 7, 8, 9])

(‘Insert Spatula in index’, 2, ‘Size’, 4)
 (‘Flip Up’, [4, 1, 0, 3, 2, 5, 6, 7, 8, 9])
 (‘Flip Down’, [2, 3, 0, 1, 4, 5, 6, 7, 8, 9])

(‘Insert Spatula in index’, 1, ‘Size’, 3)
 (‘Flip Up’, [3, 2, 0, 1, 4, 5, 6, 7, 8, 9])
 (‘Flip Down’, [1, 0, 2, 3, 4, 5, 6, 7, 8, 9])

(‘Insert Spatula in index’, 2, ‘Size’, 2)
 (‘Flip Up’, [2, 0, 1, 3, 4, 5, 6, 7, 8, 9])
 (‘Flip Down’, [1, 0, 2, 3, 4, 5, 6, 7, 8, 9])

(‘Insert Spatula in index’, 0, ‘Size’, 1)
 (‘Flip Up’, [1, 0, 2, 3, 4, 5, 6, 7, 8, 9])
 (‘Flip Down’, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

(‘Insert Spatula in index’, 0, ‘Size’, 0)
 (‘Flip Up’, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
 (‘Flip Down’, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

Pancake Sort Completed!

Sorted:&amp;lt;em&amp;gt; &amp;lt;/em&amp;gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/pre&gt;
&lt;p&gt;成功了！就是这么简单！&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;计算运行时间 &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算一个算法的运行时间是非常重要的。这可以让你知道问题的复杂程度和规模。在计算机领域我们经常用&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;大O表示法&lt;/a&gt;（Big-O Notation)，它保证了程序的运行时间一定在这之内。（如果你想不起来或者根本没听说过这个名称，建议你移步&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;维基。&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;分析这个算法的运行时间还是比较直观的。可以想象，最差的情况是，这堆煎饼是交替的最小和最大。比如[0, 9, 1, 8, 2, 7, 3, 6, 5, 4]。我们需要先把9翻上去，再翻到底下。然后是8、7、6等等。每一个都需要两步，所以总的步数最大是2n-3。n是总的煎饼个数，“-3”是因为当倒数第二个归位了之后倒数第一个的位置自然也就正确了，并且倒数第二个只需要一下。有些Reddit的&lt;a href=&quot;http://www.reddit.com/r/compsci/comments/29a5jd/everyday_algorithms_pancake_sort/&quot;&gt;评论&lt;/a&gt;给我提了建议：为了避免混淆，我们在这里要说清楚我们忽略了”搜索时间“，现在计算的都是翻转所需要的时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 15px;&quot;&gt;运行时间（翻转所需要的）：O(n)。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;内存大小：O(n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，我们还没考虑每次搜索最大的煎饼所需要的时间。在我上面的代码中，如果要在翻转之前先找到最大的煎饼，我们必须搜索整个（还未排好序的）煎饼堆。这就使得我们最差的搜索时间成为了n乘以n。因为我们必须把每个都找一遍才能确定哪个是最大的，并且一共有n轮搜索。因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;line-height: 15px;&quot;&gt;运行时间：O(n*n)。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;内存大小：O(n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还需要说明的一点是，我的程序使用了不多余n的内存：&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true&quot;&gt;# Slide spatula under pancake at index and flip to top                                              
def flip(stack, index):
    newStack = stack[:(index + 1)]
    newStack.reverse()
    newStack += stack[(index + 1):]
    return newStack&lt;/pre&gt;
&lt;p&gt;我的解法需要O(n+k)的内存，k表示第一次翻转的大小，最大不多余n-1。因此我们的解答需要2n-1或者O(n)的内存。如果我们想避免这些开销我们可以原地翻转，在数组中挨个交换，但是这样代码就不好懂了。&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上介绍的算法不是最快的。如果你还想进一步了解这个问题，我建议你读一下这篇Bill Gates和Christos Papadimitriou写的&lt;a href=&quot;http://www.cs.berkeley.edu/~christos/papers/Bounds%20For%20Sorting%20By%20Prefix%20Reversal.pdf&quot;&gt;论文&lt;/a&gt;，以及Chitturi，Fahle，Meng以及一些其他人写的这篇&lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S0304397508003575&quot;&gt;论文&lt;/a&gt;。如果你喜欢这篇文章的话，可以来读一下我写的关于计数排序的&lt;a href=&quot;http://austingwalters.com/counting-sort-in-c/&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;之后我还会推出一个更难的”烧焦的煎饼问题“：&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;每块被翻到过最底下的煎饼被烧焦了，这个排序必须使得每个煎饼的烧焦的那一面在下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个解法将会在我的邮件列表中发给大家，或者你可以看这个&lt;a href=&quot;http://us8.campaign-archive2.com/?u=cb393d7130736f1fef1e65dbf&amp;amp;id=17c1e959eb&quot;&gt;更新&lt;/a&gt;。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://www.jobdeer.com/?fr=jobbole&quot;&gt;&lt;/a&gt;&lt;/p&gt;
	


	

</description>
        <pubDate>Wed, 30 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-30-74263-3d62c6736.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-30-74263-3d62c6736.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>一种开源的部署解决方案-fleet</title>
        <description>

                &lt;p&gt;fleet是coreos的子项目之一， 是一个分布式的container发布工具，用于进行cluster中任务的提交和管理；&lt;/p&gt;
&lt;p&gt;那通过fleet来进行部署发布有何优势？ 需要具备什么样的条件？ 有什么需要考虑的问题 ？&lt;/p&gt;
&lt;p&gt;一、fleet的整体架构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://noops.me/wp-content/uploads/2014/07/Schedule-Diagram.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-1546&quot; alt=&quot;Schedule-Diagram&quot; src=&quot;/images/noops.me/279bfd214f6f59396958cb01f2ef6e5e.jpg&quot; width=&quot;300&quot; height=&quot;202&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;二、fleet的运行机制&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;1、定义systemd的unit描述文件， 描述文件中指定要执行的命令（如启动的docker image或其它命令等），运行该job需要满足的一些依赖条件等;&lt;/div&gt;
&lt;div&gt;2、将该描述文件commit到registry中， Engine检测到新任务创建一个joboffer；&lt;/div&gt;
&lt;div&gt;3、所有线上机器通过fleet agent watch joboffer, 发现自身满足require描述， 则要求执行该任务；&lt;/div&gt;
&lt;div&gt;4、engine将该任务分配给某一agent;&lt;/div&gt;
&lt;div&gt;5、agent启动任务，并把JOB状态反馈到registry中；&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div&gt;三、fleet的特色&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;从fleet的架构中可以看出，它采用了一个与中心化发布完全相反的思路，采用这种方法有什么优势或者哪些值得借鉴呢？&lt;/div&gt;
&lt;div&gt;1、agent主动请求任务，而非控制端发布任务， 弱化了部署前对主机和任务的对应关系的依赖，比较容易就可以进行job copies的控制；&lt;/div&gt;
&lt;div&gt;2、天生具备针对任务的调度功能，在Engine上可以设置各种条件来进行任务的分配；&lt;/div&gt;
&lt;div&gt;2、通过实现中心化的控制端进程远程管理（虽然暂时也用的ssh+信任关系）， 但这个功能对动态调度系统来讲可以说是非常必要的一个功能，即便不能提前知道任务实际会运行在哪里仍然要以轻松进行访问和管理；&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div&gt;四、使用fleet所需要的必要条件&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;1、systemd ——  fleet使用systemd来作为JOB启停管理、状态查询；&lt;/div&gt;
&lt;div&gt;2、docker —— systemd描述文件只描述JOB的启动命令，不包含实际文件，对复杂应用来说，只有封装到docker image中一种方式；&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div&gt;五、fleet在工业应用中还可能的不足&lt;/div&gt;
&lt;div&gt;1、如果想要使fleet作为任务的分发部署管理系统，那么必然要依赖docker, 而 docker应用到工业化中仍然还有很多工作要开展， 如果仅作为任务管理系统，那需要以fleet管理的思路构建一套部署分发系统，比如支持systemd的管理方式；&lt;/div&gt;
&lt;div&gt;2、Engine似乎把任务分发之后MS就没有再管了，后续的事情都通过集中管理工具fleetctl来进行， 也就是说这每一次动作的触发都是主动的。 缺少一个自循环的状态感知机制，比如start了job, 主动停止，它会反馈回状态，但并不会再起一个新任务；如果异常中止，则没有状态反馈；&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            

</description>
        <pubDate>Wed, 30 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-30--p=1545-737411cc8.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-30--p=1545-737411cc8.html</guid>
        
        
        <category>noops</category>
        
      </item>
    
      <item>
        <title>取代cookie的网站追踪技术：”帆布指纹识别”初探</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/7d81d15d0370bd873bcaefb210ee0ab1.jpg&quot; rel=&quot;lightbox[74461]&quot; title=&quot;取代cookie的网站追踪技术：”帆布指纹识别”初探&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74462&quot; alt=&quot;4b611878ac58d8705d4bad6874bd2a2a&quot; src=&quot;/images/jobbole.com/2e26c1070d5dab4b2b90d63b546c8437.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，网站或者广告联盟都会非常想要一种技术方式可以在网络上精确定位到每一个个体，这样可以通过收集这些个体的数据，通过分析后更加精准的去推送广告（精准化营销）或其他有针对性的一些活动。Cookie技术是非常受欢迎的一种。当用户访问一个网站时，网站可以在用户当前的浏览器Cookie中永久植入一个含有唯一标示符（UUID）的信息，并通过这个信息将用户所有行为（浏览了哪些页面？搜索了哪些关键字？对什么感兴趣？点了哪些按钮？用了哪些功能？看了哪些商品？把哪些放入了购物车等等）关联起来。&lt;/p&gt;
&lt;p&gt;而随着网民对个人隐私的重视，Cookie越来越不受待见。不少安全工具甚至是浏览器都开始允许或引导用户关闭Cookie功能，比如很多主流浏览器都有一个“隐私模式浏览”功能。这样以来，网站就很难追踪用户行为了。但仍然有一些方法可以让网站去追踪每一个访问者的行为，比如通过flash cookie的方式也可以达到唯一标识和追踪的目的。&lt;/p&gt;
&lt;p&gt;笔者近期注意到，国外媒体报道了一种非常难以摆脱的新型在线追踪工具被用来尾随从白宫官网到色情网站YouPorn.com的热门网站的访问者。经过分析，这个就是另一种比较新的访客追踪技术：“帆布指纹识别”技术，具体代码见附录6。这个技术的独特之处是：它不像通过Cookie或者Flash Cookie等之类的方式，你基本是无法屏蔽它的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【原理分析】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔者收集整理了很多知名站点上的类似代码，详见附录4，从这些“帆布指纹识别”代码可以看出，均使用到了HTML5专属标签&amp;lt;canvas&amp;gt;的一个现状：在绘制canvas图片时，同样的canvas绘制代码，不同机器和浏览器绘制的图片特征是相同并且独一无二的，这样以来，提取最简单的md5值便可以唯一标识和跟踪这个用户。&lt;/p&gt;
&lt;p&gt;一段产生canvas元素的javascript代码：&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;var canvas = document.createElement(&#39;canvas&#39;);
var ctx = canvas.getContext(&#39;2d&#39;);
var txt = &#39;http://security.tencent.com/&#39;;
ctx.textBaseline = &quot;top&quot;;
ctx.font = &quot;14px &#39;Arial&#39;&quot;;
ctx.textBaseline = &quot;tencent&quot;;
ctx.fillStyle = &quot;#f60&quot;;
ctx.fillRect(125,1,62,20);
ctx.fillStyle = &quot;#069&quot;;
ctx.fillText(txt, 2, 15);
ctx.fillStyle = &quot;rgba(102, 204, 0, 0.7)&quot;;
ctx.fillText(txt, 4, 17);&lt;/pre&gt;
&lt;p&gt;获取绘画的内容，需要使用到canvas.toDataURL()方法，该方法返回的是图片内容的base64编码字符串。对于PNG文件格式，以块(chunk)划分，最后一块是一段32位的CRC校验，提取这段CRC校验码便可以用于用户的唯一标识：&lt;/p&gt;
&lt;pre class=&quot;brush: javascript; gutter: true&quot;&gt;var b64 = canvas.toDataURL().replace(&quot;data:image/png;base64,&quot;,&quot;&quot;);
var bin = atob(b64);
var crc = bin2hex(bin.slice(-16,-12));
console.log(crc);&lt;/pre&gt;
&lt;p&gt;chrome隐身模式测试：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/e0e6635e1c4f2a9253c50f4863fc87f3.jpg&quot; rel=&quot;lightbox[74461]&quot; title=&quot;取代cookie的网站追踪技术：”帆布指纹识别”初探&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-74463&quot; alt=&quot;614042dc4c769520310cea5a7fe024ba&quot; src=&quot;/images/jobbole.com/e29560b7e829e202e4795e607070bd6f.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;同一机器的chrome浏览器，无论正常模式还是隐身模式，得到的crc值始终一致。而对于不同机器得到的值是不同的，追踪效果显而易见。&lt;/p&gt;
&lt;p&gt;看到这里，相信很多人想问，Why？为什么会出现这样的情况？同样的js代码，在不同设备的浏览器上，结果是唯一并且各不相同的。这到底是为什么？其实原因很简单，同样的HTML5 Canvas元素绘制操作，在不同的操作系统不同的浏览器上，产生的图片内容其实是不完全相同的。出现这种情况可能是有几个原因：&lt;/p&gt;
&lt;p&gt;1、在图片格式上，不同web浏览器使用了不同的图形处理引擎、不同的图片导出选项、不同的默认压缩级别等。&lt;/p&gt;
&lt;p&gt;2、在像素级别来看，操作系统各自使用了不同的设置和算法来进行抗锯齿和子像素渲染操作。&lt;/p&gt;
&lt;p&gt;因此，即使是相同的绘图操作，最终产生的图片数据在hash层面上依然是不同的。这个具体代码层面，恐怕要去搞懂各个主流浏览器的实现和以及操作系统的渲染。笔者精力所限，短期很难给出。大家可以自行摸索下，欢迎交流J&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【后话】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML5千变万化，利用canvas 这一特性来实现用户追踪，目前并没有好的对抗方案，未来也只能依靠广大浏览器厂商自行了断，实现canvas绘图机制的随机化或许可以很好的保护用户隐私，防止被追踪。&lt;/p&gt;
&lt;p&gt;文中涉及到的代码和技术细节，只限用于技术交流，切勿用于非法用途。另外，如果想要研究更多的用户追踪技术，推荐去研究下大名鼎鼎的专注于访客追踪的开源项目：evercookie【附录5】，这个猥琐的小工具，通过几乎所有你想到和想不到的方式（Cookie、Flash、Silverlight、Web History、HTTP ETags、Web cache、window.name caching、userData storage、HTML5、甚至是java的漏洞等）来跟踪访问网站的用户行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【附录】&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://cseweb.ucsd.edu/~hovav/dist/canvas.pdf&quot;&gt;http://cseweb.ucsd.edu/~hovav/dist/canvas.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https://securehomes.esat.kuleuven.be/~gacar/sticky/index.html&quot;&gt;https://securehomes.esat.kuleuven.be/~gacar/sticky/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&quot;https://panopticlick.eff.org/browser-uniqueness.pdf&quot;&gt;https://panopticlick.eff.org/browser-uniqueness.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] 部分“帆布指纹鉴别代码”地址列表：&lt;/p&gt;
&lt;p&gt;http://ct1.addthis.com/static/r07/core130.js&lt;/p&gt;
&lt;p&gt;http://i.ligatus.com/script/fingerprint.min.js&lt;/p&gt;
&lt;p&gt;http://src.kitcode.net/fp2.js&lt;/p&gt;
&lt;p&gt;http://admicro1.vcmedia.vn/fingerprint/figp.js&lt;/p&gt;
&lt;p&gt;http://shorte.st/js/packed/smeadvert-intermediate-ad.js&lt;/p&gt;
&lt;p&gt;http://stat.ringier.cz/js/fingerprint.min.js&lt;/p&gt;
&lt;p&gt;http://cya2.net/js/STAT/89946.js&lt;/p&gt;
&lt;p&gt;http://images.revtrax.com/RevTrax/js/fp/fp.min.jsp&lt;/p&gt;
&lt;p&gt;http://rackcdn.com/mongoose.fp.js&lt;/p&gt;
&lt;p&gt;[5]  evercookie官网 &lt;a href=&quot;http://samy.pl/evercookie/&quot;&gt;http://samy.pl/evercookie/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6]  使用帆布指纹识别技术的库fingerprintjs 官网 &lt;a href=&quot;https://github.com/Valve/fingerprintjs&quot;&gt;https://github.com/Valve/fingerprintjs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7]  &lt;a href=&quot;https://www.browserleaks.com/canvas#how-does-it-work&quot;&gt;https://www.browserleaks.com/canvas#how-does-it-work&lt;/a&gt;&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://www.jobdeer.com/?fr=jobbole&quot;&gt;&lt;/a&gt;&lt;/p&gt;
	


	

</description>
        <pubDate>Tue, 29 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-29-74461-75168aebf.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-29-74461-75168aebf.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>Kibana 动态仪表板的使用 </title>
        <description>

  
  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;半年前，Kibana3.4 版刚出来的时候，曾经在官方博客上描述了一个新功能，当时我的翻译见：&lt;a href=&quot;/2014/01/15/kibana3-milestone4-20131105/&quot;&gt;【翻译】Kibana3 里程碑 4&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;今天我实际使用了一下这个新功能，感觉还是蛮有用的，单独拿出来记录一下用法和一些没在之前文章里提到的细节。&lt;/p&gt;
&lt;h2 id=&quot;section&quot;&gt;使用方法&lt;/h2&gt;
&lt;p&gt;使用方法其实在官方描述里已经比较清楚了。就是在原本的 &lt;code&gt;http://127.0.0.1:9292/#/dashboard/file/logstash.json&lt;/code&gt; 地址后面，再加上请求参数 &lt;code&gt;?query=***&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2 id=&quot;section-1&quot;&gt;注意事项&lt;/h2&gt;
&lt;p&gt;看起来好像太过简单，不过用起来其实还是有点注意事项的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kibana 目前不支持对保存在 Elasticsearch 中的 dashboard 做这个事情。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以一定得保存成 &lt;code&gt;yourname.json&lt;/code&gt; 文件放入 &lt;code&gt;app/dashboards/&lt;/code&gt; 目录里才行。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;静态的 JSON 文件其实是利用模板技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以直接导出得到的 JSON 文件还不能直接起作用。需要稍微做一点修改。&lt;/p&gt;
&lt;p&gt;你可以打开默认可用的 &lt;code&gt;logstash.json&lt;/code&gt; 文件，看看有什么奇特的地方，没错，就是下面这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot;query&quot;: &quot;\{\{ARGS.query || &#39;*&#39;\}\}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而你自己保存下来的 JSON，这里都会是具体的数据。所以，要让自己的 JSON 布局也支持动态仪表板的话，按照这个写法也都加上 &lt;code&gt;ARGS.query&lt;/code&gt; 就好了！&lt;/p&gt;
&lt;p&gt;从 logstash.json 里还可以看到，除了 &lt;code&gt;?query=&lt;/code&gt; 以外，其实还支持 &lt;code&gt;from=&lt;/code&gt; 参数，默认是 &lt;code&gt;24h&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;query 参数的特殊字符问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如我之前在搜索框里输入的 querystring 是这样的：&lt;code&gt;type:mweibo_action AND urlpath:&quot;/2/statuses/friends_timeline.json&quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;那么实际用的时候，如果写成这样一个 url：&lt;code&gt;http://127.0.0.1:9292/#/dashboard/file/logstash.json?query=type:mweibo_action AND urlpath:&quot;/2/statuses/friends_timeline.json&quot;&lt;/code&gt;，实际是不对的。我一度怀疑是不是 urlpath 里的 &lt;code&gt;/&lt;/code&gt; 导致的问题，后来发现，其实是 &lt;code&gt;&quot;&lt;/code&gt; 在进 JSON 文件模板变量替换的时候给当做只是字符串赋值引号的作用，就不再作为字符串本身传递给 Elasticsearch 作为请求内容本身了。&lt;strong&gt;所以需要用 &lt;code&gt;\&lt;/code&gt; 给 &lt;code&gt;&quot;&lt;/code&gt; 做转义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(这里一定要有 &lt;code&gt;&quot;&lt;/code&gt; 的原因是，ES 的 querystring 里，&lt;code&gt;field:/regex/&lt;/code&gt; 是正则匹配搜索的语法，刚好 url 也是以 &lt;code&gt;/&lt;/code&gt; 开头的)&lt;/p&gt;
&lt;p&gt;所以可用的 url 应该是：&lt;code&gt;http://127.0.0.1:9292/#/dashboard/file/logstash.json?query=type:mweibo_action AND urlpath:\&quot;/2/statuses/friends_timeline.json\&quot;&lt;/code&gt;！&lt;/p&gt;
&lt;p&gt;经过 url_encode 之后就变成了：&lt;code&gt;http://127.0.0.1:9292/#/dashboard/file/logstash.json?query=type:mweibo_action%20AND%20urlpath:%5C%22%2F2%2Fstatuses%2Ffriends_timeline.json%5C%22&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就可以了！&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;用 JSON 的局限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态仪表板其实有两种用法，这里只用到了 &lt;code&gt;file/logstash.json&lt;/code&gt; 静态文件方式，这种方式只支持一个 query 条件，也没有太多的附加参数支持。而 &lt;code&gt;script/logstash.js&lt;/code&gt; 方式，支持多个 query 条件，以及 index、pattern、interval、timefield 等更多的参数选项。&lt;/p&gt;
&lt;p&gt;当然，研究一下 angularjs 的用法，给 JSON 文件里也加上 &lt;code&gt;ARGS.query&lt;/code&gt; 的 &lt;code&gt;split&lt;/code&gt; 方法，也不算太难。&lt;/p&gt;
    &lt;hr&gt;
    
    &lt;hr&gt;
  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;
  &lt;/div&gt;

</description>
        <pubDate>Mon, 28 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-28-dynamic-dashboard-for-kibana-91a5db924.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-28-dynamic-dashboard-for-kibana-91a5db924.html</guid>
        
        
        <category>chenlinux</category>
        
      </item>
    
      <item>
        <title>小米企业安全建设</title>
        <description>

                &lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;345&quot; id=&quot;talk_frame_111442&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/bf433880f86101315a2d6ebe547ea833&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;500&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
            

</description>
        <pubDate>Mon, 28 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-28--p=1541-4dd2e1df9.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-28--p=1541-4dd2e1df9.html</guid>
        
        
        <category>noops</category>
        
      </item>
    
      <item>
        <title>小米运维自动化 WOT 2014</title>
        <description>

                &lt;p&gt;本次分享中对小米目前的自动运维体系结构，设计思路和理念，各系统间的整合方式和核心架构进行了详细阐述；&lt;/p&gt;
&lt;p&gt;同时也介绍了整个自动运维体系的构建过程和解决方案方法， 以及基础该套体系如何来解决困扰运维的若干问题&lt;/p&gt;
&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;438&quot; id=&quot;talk_frame_111443&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/8c391c80f86201315a2f6ebe547ea833&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;500&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
            

</description>
        <pubDate>Mon, 28 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-28--p=1536-67fe755a4.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-28--p=1536-67fe755a4.html</guid>
        
        
        <category>noops</category>
        
      </item>
    
      <item>
        <title>Interacting with C Pointers</title>
        <description>
&lt;p&gt;Objective-C and C APIs often require the use of pointers. Data types in Swift are designed to feel natural when working with pointer-based Cocoa APIs, and Swift automatically handles several of the most common use cases for pointers as arguments. In this post we’ll look at how pointer parameters in C can be used with the variables, arrays, and strings in Swift.&lt;/p&gt; &lt;h3&gt;Pointers as In/Out Parameters&lt;/h3&gt; &lt;p&gt;C and Objective-C don’t support multiple return values, so Cocoa APIs frequently use pointers as a way of passing additional data in and out of functions. Swift allows pointer parameters to be treated like &lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; parameters, so you can pass a reference to a &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; as a pointer argument by using the same &lt;span class=&quot;keyword&quot;&gt;&amp;amp;&lt;/span&gt; syntax. For instance, &lt;span class=&quot;keyword&quot;&gt;UIColor&lt;/span&gt;’s &lt;span class=&quot;keyword&quot;&gt;getRed(_:green:blue:alpha:)&lt;/span&gt; method takes four &lt;span class=&quot;keyword&quot;&gt;CGFloat*&lt;/span&gt; pointers to receive the components of the color. We can use &lt;span class=&quot;keyword&quot;&gt;&amp;amp;&lt;/span&gt; to collect these components into local variables:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; r: &lt;span class=&quot;title&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, g: &lt;span class=&quot;title&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;numner&quot;&gt;0&lt;/span&gt;, b: &lt;span class=&quot;title&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, a: &lt;span class=&quot;title&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
color.getRed(&amp;amp;&lt;span class=&quot;pointer&quot;&gt;r&lt;/span&gt;, green: &amp;amp;&lt;span class=&quot;pointer&quot;&gt;g&lt;/span&gt;, blue: &amp;amp;&lt;span class=&quot;pointer&quot;&gt;b&lt;/span&gt;, alpha: &amp;amp;&lt;span class=&quot;pointer&quot;&gt;a&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another common case is the Cocoa &lt;span class=&quot;keyword&quot;&gt;NSError&lt;/span&gt; idiom. Many methods take an &lt;span class=&quot;keyword&quot;&gt;NSError**&lt;/span&gt; parameter to save an error in case of failure. For instance, we can list the contents of a directory using &lt;span class=&quot;keyword&quot;&gt;NSFileManager&lt;/span&gt;’s &lt;span class=&quot;keyword&quot;&gt;contentsOfDirectoryAtPath(_:error:)&lt;/span&gt; method, saving the potential error directly to an &lt;span class=&quot;keyword&quot;&gt;NSError?&lt;/span&gt; variable:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; maybeError: &lt;span class=&quot;title&quot;&gt;NSError&lt;/span&gt;?
&lt;span class=&quot;key&quot;&gt;if let&lt;/span&gt; contents = &lt;span class=&quot;title&quot;&gt;NSFileManager&lt;/span&gt;.&lt;span class=&quot;method&quot;&gt;defaultManager&lt;/span&gt;()
	.&lt;span class=&quot;method&quot;&gt;contentsOfDirectoryAtPath&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/usr/bin&quot;&lt;/span&gt;, error: &amp;amp;&lt;span class=&quot;pointer&quot;&gt;maybeError&lt;/span&gt;) {
	&lt;span class=&quot;comment&quot;&gt;// Work with the directory contents&lt;/span&gt;
} &lt;span class=&quot;key&quot;&gt;else if let&lt;/span&gt; error = &lt;span class=&quot;pointer&quot;&gt;maybeError&lt;/span&gt; {
	&lt;span class=&quot;comment&quot;&gt;// Handle the error&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For safety, Swift requires the variables to be initialized before being passed with &lt;span class=&quot;keyword&quot;&gt;&amp;amp;&lt;/span&gt;. This is because it cannot know whether the method being called tries to read from a pointer before writing to it.&lt;/p&gt; &lt;h3&gt;Pointers as Array Parameters&lt;/h3&gt; &lt;p&gt;Pointers are deeply intertwined with arrays in C, and Swift facilitates working with array-based C APIs by allowing &lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt; to be used as a pointer argument. An immutable array value can be passed directly as a &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; pointer, and a mutable array can be passed as a non-&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; pointer argument using the &lt;span class=&quot;keyword&quot;&gt;&amp;amp;&lt;/span&gt; operator, just like an &lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; parameter. For instance, we can add two arrays &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; and &lt;span class=&quot;keyword&quot;&gt;b&lt;/span&gt; using the &lt;span class=&quot;keyword&quot;&gt;vDSP_vadd&lt;/span&gt; function from the Accelerate framework, writing the result to a third &lt;span class=&quot;keyword&quot;&gt;result&lt;/span&gt; array:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;key&quot;&gt;import&lt;/span&gt; Accelerate

&lt;span class=&quot;key&quot;&gt;let&lt;/span&gt; a: [&lt;span class=&quot;title&quot;&gt;Float&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;key&quot;&gt;let&lt;/span&gt; b: [&lt;span class=&quot;title&quot;&gt;Float&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.125&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0625&lt;/span&gt;]
&lt;span class=&quot;key&quot;&gt;var&lt;/span&gt; result: [&lt;span class=&quot;title&quot;&gt;Float&lt;/span&gt;] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]

&lt;span class=&quot;method&quot;&gt;vDSP_vadd&lt;/span&gt;(a, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;&lt;span class=&quot;pointer&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;// result now contains [1.5, 2.25, 3.125, 4.0625]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Pointers as String Parameters&lt;/h3&gt; &lt;p&gt;C uses &lt;span class=&quot;keyword&quot;&gt;const char*&lt;/span&gt; pointers as the primary way to pass around strings. A Swift &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; can be used as a &lt;span class=&quot;keyword&quot;&gt;const char*&lt;/span&gt; pointer, which will pass the function a pointer to a null-terminated, UTF–8-encoded representation of the string. For instance, we can pass strings directly to standard C and POSIX library functions:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;method&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello from libc&quot;&lt;/span&gt;)
&lt;span class=&quot;key&quot;&gt;let&lt;/span&gt; fd = &lt;span class=&quot;method&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/tmp/scratch.txt&quot;&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;O_WRONLY&lt;/span&gt;|&lt;span class=&quot;title&quot;&gt;O_CREAT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0o666&lt;/span&gt;)

&lt;span class=&quot;key&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pointer&quot;&gt;fd&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; {
	&lt;span class=&quot;method&quot;&gt;perror&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;could not open /tmp/scratch.txt&quot;&lt;/span&gt;)
} &lt;span class=&quot;key&quot;&gt;else&lt;/span&gt; {
	&lt;span class=&quot;key&quot;&gt;let&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
	&lt;span class=&quot;method&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;pointer&quot;&gt;fd&lt;/span&gt;, text, &lt;span class=&quot;method&quot;&gt;strlen&lt;/span&gt;(text))
	&lt;span class=&quot;method&quot;&gt;close&lt;/span&gt;(&lt;span class=&quot;pointer&quot;&gt;fd&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Safety with Pointer Argument Conversions&lt;/h3&gt; &lt;p&gt;Swift works hard to make interaction with C pointers convenient, because of their pervasiveness within Cocoa, while providing some level of safety. However, interaction with C pointers is inherently unsafe compared to your other Swift code, so care must be taken. In particular:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;These conversions cannot safely be used if the callee saves the pointer value for use after it returns. The pointer that results from these conversions is only guaranteed to be valid for the duration of a call. Even if you pass the same variable, array, or string as multiple pointer arguments, you could receive a different pointer each time. An exception to this is global or static stored variables. You can safely use the address of a global variable as a persistent unique pointer value, e.g.: as a KVO context parameter.&lt;/li&gt; &lt;li&gt;Bounds checking is not enforced when a pointer to an &lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt; or &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; is passed. A C-based API can’t grow the array or string, so you must ensure that the array or string is of the correct size before passing it over to the C-based API.&lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;If you need to work with pointer-based APIs that don’t follow these guidelines, or you need to override Cocoa methods that accept pointer parameters, then you can work directly with raw memory in Swift using unsafe pointers. We’ll look at a more advanced case in a future post.&lt;/p&gt;

</description>
        <pubDate>Mon, 28 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-28--id=6-ea85867c5.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-28--id=6-ea85867c5.html</guid>
        
        
        <category>apple_swift</category>
        
      </item>
    
      <item>
        <title>在 MacBook 上使用 PDL 绘图 </title>
        <description>

  
  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;之前在 Linux 服务器上使用 PDL，主要是一些矩阵函数，这次准备在个人电脑上使用 PDL，尤其是本身的绘图功能，其一目的就是导出 zabbix 中存储的监控数据，通过 PDL 绘图观察其季节性分布情况。&lt;/p&gt;

&lt;p&gt;不过在使用的时候，发现在 MacBook 上跑 PDL 还是有点上手难度的。和 pylab 不同，PDL 是使用了 X11 的，而 MacBook 最新的版本里，X11 已经不再是自带的了。所以需要单独去下载 &lt;a href=&quot;https://www.macupdate.com/app/mac/26593/xquartz&quot;&gt;XQuartz&lt;/a&gt; 安装包来提供 X11 支持。&lt;/p&gt;

&lt;p&gt;安装好了 XQuartz 以后，再安装 PDL::Graphics:: 名字空间下的几个模块就好办了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PDL::Graphics::Simple&lt;/li&gt;
  &lt;li&gt;PDL::Graphics::Gnuplot&lt;/li&gt;
  &lt;li&gt;PDL::Graphics::PGPLOT&lt;/li&gt;
  &lt;li&gt;PDL::Graphics::Prima&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外还有 PDL::Graphics::PLplot 等，不过通过 &lt;code&gt;port install plplot&lt;/code&gt; 安装的 plplot 没有 header 文件，所以 PDL::Graphics::PLplot 是安装不上的，既然前面已经有了不少，这里也就不再追求自己下载 plplot 源代码来安装了。&lt;/p&gt;

&lt;p&gt;PDL::Graphics::Simple 是 《PDL Book》开篇第一个示例就使用的模块，其实际就是按顺序尝试加载 &lt;code&gt;::Gnuplot&lt;/code&gt;、&lt;code&gt;::PGPLOT&lt;/code&gt;、&lt;code&gt;::PLplot&lt;/code&gt; 和 &lt;code&gt;::Prima&lt;/code&gt;。所以，保证有一个可用就好了。&lt;/p&gt;

&lt;p&gt;不过在我的 air 上实际的效果来看，perldl 命令在使用 子进程跟 gnuplot 交互的时候&lt;strong&gt;非常非常非常的慢！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好了，现在就可以运行程序了：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;:5.16&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Path::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tiny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PDL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PDL::Graphics::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGPLOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Zabbix2::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;config.yml&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slurp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$zbconf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;zabbix&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$zabbix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Zabbix2::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://$zbconf-&amp;gt;{&#39;addr&#39;}/zabbix/api_jsonrpc.php&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$zabbix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$zbconf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$zbconf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;pass&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;could not authenticate&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$zabbix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;Item&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;groupids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hostids&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11036&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;graphids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1824829&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@$items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$itemid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;itemid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$itemid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sitems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$zabbix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch_single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;Item&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;itemids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$itemid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pdl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sitems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pdl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里使用了 &lt;a href=&quot;https://metacpan.org/pod/Zabbix2::API&quot;&gt;Zabbix2::API&lt;/a&gt; 模块，相对比 &lt;a href=&quot;http://blog.zabbix.com/getting-started-with-zabbix-api/1381/&quot;&gt;zabbix 官方博客示例&lt;/a&gt;直接使用 &lt;a href=&quot;https://metacpan.org/pod/JSON::RPC&quot;&gt;JSON::RPC&lt;/a&gt; 模块，以及 python 的 pyzabbix 模块来说，Zabbix2::API 模块封装的非常好，history 是作为 item 对象的属性出现，而不是单独再请求一次 &lt;code&gt;history.get&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;另外，不知道为什么，使用 pyzabbix 模块就一直无法正常使用，而自己写 requests 和 json 却没问题。上面的 perl 脚本用 python 改写就是下面这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Read item history from zabbix, and plot as histogram&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.mlab&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mlab&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ZABBIX_URI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;http://test.zabbix.com/zabbix/api_jsonrpc.php&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ZABBIX_USR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;user&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ZABBIX_PWD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;pass&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HOURS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zabbixLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zabbixCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;user.login&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zabbixCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;jsonrpc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;2.0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;method&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;params&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;auth&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZABBIX_URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content-type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;application/json-rpc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;result&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;authId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zabbixLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZABBIX_USR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZABBIX_PWD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Get Auth ID: &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&#39;groupids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&#39;hostids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11036&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&#39;graphids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1824829&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zabbixCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;item.get&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mktime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timetuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOURS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Begin loop for history...&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;output&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;extend&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;history&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;itemids&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;itemid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;time_from&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zabbixCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;history.get&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;item: &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;itemid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#  lline = numpy.percentile(v, 25)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  uline = numpy.percentile(v, 75)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  low = 2 * lline - uline&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  up = 2 * uline - lline&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;item: &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;itemid&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;

</description>
        <pubDate>Sun, 27 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-27-using-pdl-on-macbook-0a2e8590f.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-27-using-pdl-on-macbook-0a2e8590f.html</guid>
        
        
        <category>chenlinux</category>
        
      </item>
    
      <item>
        <title>Promise 初探</title>
        <description>

		&lt;p&gt;其实 Promise 这个东西提出来也挺久时间了，它是一种解决复杂异步回调逻辑的方法。大部分人类的正常思维方式都是线性连贯的，但是在 JavaScript 中，异步却是主流。所以，在遇到复杂逻辑时，我们往往会&lt;a href=&quot;http://tritarget.org/blog/2012/11/28/the-pyramid-of-doom-a-javascript-style-trap/&quot;&gt;写成这样&lt;/a&gt;：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
// Code uses jQuery to illustrate the Pyramid of Doom
(function($) {
  $(function(){
    $(&quot;button&quot;).click(function(e) {
      $.get(&quot;/test.json&quot;, function(data, textStatus, jqXHR) {
        $(&quot;.list&quot;).each(function() {
          $(this).click(function(e) {
            setTimeout(function() {
              alert(&quot;Hello World!&quot;);
            }, 1000);
          });
        });
      });
    });
  });
})(jQuery);
&lt;/pre&gt;
&lt;p&gt;这就是所谓的「回调金字塔」，每当看到这样的代码，我就会不由自主地唱起一首歌：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  如果你愿意一层一层一层地剥开我的心……
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;解决这个方法最简单的方法，就是把匿名函数取个名字，单独提取出来定义。但是当遇到多变的业务场景时，具名函数的方法也不太管用，于是便有了各种高级的碾平异步回调的解决方案，Promise 就是其中一种。&lt;/p&gt;
&lt;p&gt;在 ECMAScript 6 中，Promise 模式得到了原生的支持。我们就从原生模型说起。&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-497&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;ECMAScript 6 Promise&lt;/h2&gt;
&lt;p&gt;为了简化各种各样的异步逻辑，我们先假设有一个会花一些时间来完成的 JS 函数。它的功能很简单，就是过一段时间以后调用传入的回调函数。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
var wait = function(callback, param) {
  setTimeout(function() {
    callback(param)
  }, 2000 + (Math.random() - 0.5) * 1000);
}
wait(console.log.bind(console), &#39;test&#39;);
&lt;/pre&gt;
&lt;p&gt;你可以想象多层嵌套的时候大概是什么样子：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
wait(function() {
  console.log(&#39;如果你愿意&#39;);
  wait(function() {
    console.log(&#39;一层&#39;);
    wait(function() {
      console.log(&#39;一层&#39;);
      wait(function() {
        console.log(&#39;一层地&#39;);
        wait(console.log.bind(console), &#39;剥开我的心&#39;);
      });
    });
  });
});
&lt;/pre&gt;
&lt;p&gt;那么，在 Promise 的世界里是什么样的呢？这就不得不先枯燥地解释一些东西了。首先，什么叫做一个「promise」？一个 promise 可以是一个对象或者函数，它包含一个 &lt;code&gt;then&lt;/code&gt; 接口并且符合相应的规范。使用一个 promise 的方法就是这样：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
promise.then(function(response) {
    // onFulfilled 时执行
}, function(error) {
    // onRejected 时执行
});
&lt;/pre&gt;
&lt;p&gt;于是问题又来了，什么叫做 fulfilled 和 rejected 呢？一个 promise 会有三种状态，大致可以理解为执行成功（fulfilled）、执行失败（rejected）和正在执行中（pending）。Promise 包含一个状态机，它内部的状态转换，只允许从 pending 到 fulfilled 或者 rejected 一次，不允许更多了。如果用大家喜闻乐见的薛定谔的猫来解释，就是打开盒子的时候，我们的猫要么死了，要么没死，要么不确定死没死，死的的猫无法复活，活猫也一定不会死:D&lt;/p&gt;
&lt;p&gt;新建一个 promise 的时候，我们需要在代码中定义什么时候算成功了，什么时候算失败了。于是上面 wait 的例子便可以改写这样了：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
function waitPromise(param) {
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
      resolve(param);
    }, 2000 + (Math.random() - 0.5) * 1000);
  });
}

waitPromise(&#39;如果你愿意&#39;).then(function(response) {
  console.log(response);
  return waitPromise(&#39;一层&#39;);
}).then(function(response) {
  console.log(response);
  return waitPromise(&#39;一层&#39;);
}).then(function(response) {
  console.log(response);
  return waitPromise(&#39;一层地&#39;);
}).then(function(response) {
  console.log(response);
  return waitPromise(&#39;剥开我的心&#39;);
}).then(console.log.bind(console));
&lt;/pre&gt;
&lt;p&gt;从上面的例子中，我们可以看出几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个 promise 它 resolve（或者 reject）的东西就是 &lt;code&gt;then&lt;/code&gt; 的两个回调接受的参数。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;then&lt;/code&gt; 可以链式调用，调用的顺序就是你定义的顺序。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;onFulfilled&lt;/code&gt;（或者 &lt;code&gt;onRejected&lt;/code&gt;）中，你可以返回一个 promise，此时 &lt;code&gt;then&lt;/code&gt; 会返回这个 promise 的一个代理，并响应它的状态变化（即给下一个 &lt;code&gt;then&lt;/code&gt; 使用）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;onFulfilled&lt;/code&gt; 和 &lt;code&gt;onRejected&lt;/code&gt; 中，除了可以返回一个 promise 以外，还可以返回一个对象，其中包含一个 &lt;code&gt;then&lt;/code&gt; 方法——这样的对象称作 &lt;em&gt;thenable&lt;/em&gt;。当 thenable 被返回时，代理的 promise 就会去调用该方法，并传入 &lt;code&gt;resolvePromise&lt;/code&gt; 和 &lt;code&gt;rejectPromise&lt;/code&gt; 两个参数，于是这个 promise 也就链式地传递下去了。除此之外，返回一个不是 thenable 的值也是可以的，这相当于一个简化，该返回值会被链式的 promise 立即 fulfill。&lt;/p&gt;
&lt;p&gt;上面的例子比较一根筋，所有的 &lt;code&gt;then&lt;/code&gt; 只定义了第一个参数（即成功的回调），其实我们还可以通过调用 &lt;code&gt;onRejected&lt;/code&gt; 或者抛出一个异常来表示 Promise 执行失败，从而进入 &lt;code&gt;then&lt;/code&gt; 的第二个函数中（&lt;code&gt;then(func1, func2)&lt;/code&gt; 必定会调用且仅调用其中一个）。听上去是不是有点 try/catch 的味道，事实上，Promise 还真提供了一个语法糖，就是 &lt;code&gt;catch(func)&lt;/code&gt;，它其实相当于 &lt;code&gt;then(undefined, func)&lt;/code&gt;。链条中加入的 &lt;code&gt;catch&lt;/code&gt; 可以管上它之前所有的 promise 中的失败情况。&lt;/p&gt;
&lt;p&gt;听上去好像很绕口的样子，而且这个 Promise 也不过是把回调拉平了而已嘛，至于这么复杂么？其实，依赖这些，我们可以方便地实现更多异步逻辑。在 ECMAScript 6中，Promise 还定义了两个接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Promise.all&lt;/code&gt;：接受一堆 promise 的数组（任何可迭代的对象都可以），只有当他们都解决了以后，才会解决&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Promise.race&lt;/code&gt;：也是接受一堆 promise，但是只要有一个成功或者失败了，就会立即解决或驳回它本身&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎么样，是不是突显出 JavaScript 的函数式风格了。就&lt;a href=&quot;http://kangax.github.io/compat-table/es6/#Promise&quot;&gt;目前的形势&lt;/a&gt;而言，Chrome 33 和 Firefox 30 以上的浏览器都已经实现了原生 Promise。&lt;/p&gt;
&lt;h2&gt;Promises/A+&lt;/h2&gt;
&lt;p&gt;之前说了那么多关于 Promise 的这个规定，那个规定，其实它是有一个统一的名称的，就叫做 Promises/A+。在&lt;a href=&quot;http://promisesaplus.com/&quot;&gt;它的网站&lt;/a&gt;上，你可以阅读到完整的规范文档。&lt;/p&gt;
&lt;p&gt;基于这个标准，除了 ECMAScript 6 中比较简易的 Promise 以外，还有很多实现各不相同，功能各有千秋的实现，比较有名的有（按现有 Github Star 数排列）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot;&gt;Bluebird&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cujojs/when&quot;&gt;when&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tildeio/rsvp.js/&quot;&gt;rsvp.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，Q 支持进度查询功能，执行时间较长的异步操作（例如文件上传）可以即时获取进度信息：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
return uploadFile()
.then(function () {
    // Success uploading the file
}, function (err) {
    // There was an error, and we get the reason for error
}, function (progress) {
    // We get notified of the upload&#39;s progress as it is executed
});
&lt;/pre&gt;
&lt;h2&gt;重新发明轮子&lt;/h2&gt;
&lt;p&gt;尽管 Promise 的实现有很多，但是它们的核心都是一样的，就是围绕着 &lt;code&gt;then&lt;/code&gt; 方法展开。既然有了标准规范，其实我们可以自己实现一个简单的 Promise。&lt;/p&gt;
&lt;p&gt;首先当然要创建一个 Promise 对象的构造函数，它接受一个函数作为参数，调用这个函数的时候，会传入 &lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt; 方法。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
function MyPromise(resolver) {
    // 简单起见就不做类型检查了，假定 resolver 一定为函数

    this.status = 0;  // 0: pending, 1: fulfilled, 2: rejected
    this.value = null;
    this.handlers = [];

    doResolve.call(this, resolver);
}

function doResolve(resolver) {
    var called = false;
    function resolvePromise(value) {
        if (called) {
            return;
        } else {
            called = true;
            resolve.call(this, value);
        }
    }

    function rejectPromise(reason) {
        if (called) {
            return;
        } else {
            called = true;
            reject.call(this, reason);
        }
    }

    try {
        resolver(resolvePromise.bind(this), rejectPromise.bind(this));
    } catch(e) {
        rejectPromise(e);
    }
}
&lt;/pre&gt;
&lt;p&gt;这样，当使用 &lt;code&gt;new Promise(function(resolve, reject) {...});&lt;/code&gt; 构造时，就会进入 &lt;code&gt;doResolve&lt;/code&gt;，这时会执行传入给 &lt;code&gt;new Promise&lt;/code&gt; 的参数，并给出 &lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt; 的实现。可以看到为了保证 &lt;code&gt;resolve&lt;/code&gt; 或 &lt;code&gt;reject&lt;/code&gt; 总共只能被调用一次，这里用到了一个闭包。接下来来看具体的 &lt;code&gt;resolve&lt;/code&gt; 和 &lt;code&gt;reject&lt;/code&gt; 是怎么实现的。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
function resolve(value) {
    try {
        if (this === value) {
            throw new TypeError(&#39;A promise cannot be resolved with itself.&#39;);
        }
        if (value &amp;amp;&amp;amp; (typeof value === &#39;object&#39; || typeof value === &#39;function&#39;)) {
            var then = value.then;
            if (typeof then === &#39;function&#39;) {
                doResolve.call(this, then.bind(value));
                return;
            }
        }
        this.status = 1;
        this.value = value;
        dequeue.call(this);
    } catch(e) {
        reject(e);
    }
}

function reject(reason) {
    this.status = 2;
    this.value = reason;
    dequeue.call(this);
}
&lt;/pre&gt;
&lt;p&gt;具体的 &lt;code&gt;resolve&lt;/code&gt; 实现中，我们会判断解决的值是否是一个 thenable，如果是的话，就会去执行这个 &lt;code&gt;then&lt;/code&gt; 函数，并且接受它的状态和返回值。如果不是，就直接使用该值解决这个 promise。&lt;/p&gt;
&lt;p&gt;可以想象，当我们执行 promise 的 &lt;code&gt;then&lt;/code&gt; 方法时，其实是完成了一个类似&lt;a href=&quot;http://zh.wikipedia.org/zh/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F&quot;&gt;观察者模式&lt;/a&gt;的注册过程。当 promise 还处于 pending 状态时，回调函数会被暂时存储起来，待到解决或失败时再执行，但是当 &lt;code&gt;then&lt;/code&gt; 发现这个 promise 已经完成了状态转换，便可以根据状态立即执行回调了。&lt;/p&gt;
&lt;p&gt;在这里，我们使用了 &lt;code&gt;this.handlers&lt;/code&gt; 数组来暂存 &lt;code&gt;then&lt;/code&gt; 的回调函数，当状态改变时，会调用 &lt;code&gt;dequeue&lt;/code&gt; 方法来处理队列。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
function dequeue() {
    var handler;
    while (this.handlers.length) {
        handler = this.handlers.shift();
        handle.call(this, handler.thenPromise, handler.onFulfilled, handler.onRejected);
    }
}
&lt;/pre&gt;
&lt;p&gt;最后便是核心方法 &lt;code&gt;then&lt;/code&gt; 的实现了。根据规范，它必须返回一个 promise，并根据 &lt;code&gt;onFulfilled&lt;/code&gt; 或 &lt;code&gt;onRejected&lt;/code&gt; 回调的返回值来决定是将它标记为完成还是失败。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
MyPromise.prototype.then = function(onFulfilled, onRejected) {
    var self = this;
    var thenPromise = new MyPromise(function() {});

    if (!self.status) {
        self.handlers.push({
            thenPromise: thenPromise,
            onFulfilled: onFulfilled,
            onRejected: onRejected
        });
    } else {
        handle.call(self, thenPromise, onFulfilled, onRejected);
    }

    return thenPromise;
};

function handle(thenPromise, onFulfilled, onRejected) {
    var self = this;

    setTimeout(function() {
        var callback, ret;
        if (self.status == 1) {
            callback = onFulfilled;
        } else {
            callback = onRejected;
        }
        if (typeof callback === &#39;function&#39;) {
            try {
                ret = callback(self.value);
                resolve.call(thenPromise, ret);
            } catch(e) {
                reject.call(thenPromise, e);
            }
            return;
        }
        if (self.status == 1) {
            resolve.call(thenPromise, self.value);
        } else {
            reject.call(thenPromise, self.value);
        }
    }, 1);
}
&lt;/pre&gt;
&lt;p&gt;在上面的 &lt;code&gt;handle&lt;/code&gt; 函数中，我们立即调用回调函数，并且根据回调函数的类型来改变 &lt;code&gt;then&lt;/code&gt; 方法返回的 promise 的状态，这样就形成了一个 promise 链条。&lt;/p&gt;
&lt;p&gt;大约 100 多行代码，我们就实现了一个粗糙的 Promise 库。当然，上面的代码可能还有很多 Bug，并且也不是严格符合 Promises/A+ 的。如果读者发现问题，请不吝指出。&lt;/p&gt;
&lt;p&gt;有了这个核心的基础，实现外围的 API 例如 &lt;code&gt;Promise.all&lt;/code&gt;、&lt;code&gt;Promise.race&lt;/code&gt; 就比较简单了，这里就不给出了。其实，Promise 看似用起来很简单，想要自己严格实现一个，还是有不少难点的，其中最容易被绕晕的就是对 &lt;code&gt;then&lt;/code&gt;&lt;br&gt;
的实现，以及如何处理 &lt;code&gt;then&lt;/code&gt; 的回调中又返回新的 promise 的逻辑。&lt;/p&gt;
&lt;p&gt;我们回到文章开头的例子，使用我们自己的 MyPromise 试验一下。简单起见，就不写那么多层了。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
function waitPromise(param) {
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
      resolve(param);
    }, 2000 + (Math.random() - 0.5) * 1000);
  });
}

waitPromise(&#39;如果你愿意&#39;).then(function(response) {
  console.log(response);
  return waitPromise(&#39;一层&#39;);
}).then(console.log.bind(console));
&lt;/pre&gt;
&lt;p&gt;可以看到我们可以成功输出两行文字。你能根据上面的实现，看出这次调用事实上一共产生了多少个 promise 对象吗？&lt;/p&gt;
&lt;p&gt;答案是五个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P0：第一次 &lt;code&gt;waitPromise(&#39;如果你愿意&#39;)&lt;/code&gt; 返回的&lt;/li&gt;
&lt;li&gt;P1：第一个 &lt;code&gt;then&lt;/code&gt; 返回的&lt;/li&gt;
&lt;li&gt;P2：第二个 &lt;code&gt;then&lt;/code&gt; 返回的&lt;/li&gt;
&lt;li&gt;P3：第一个 &lt;code&gt;then&lt;/code&gt; 里，通过 &lt;code&gt;return waitPromise(&#39;一层&#39;)&lt;/code&gt; 返回的&lt;/li&gt;
&lt;li&gt;P4：在处理 P1 时，会调用 P3 的 &lt;code&gt;then&lt;/code&gt; 方法，这时候又会返回一个 promise&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/es6/promises/&quot;&gt;JavaScript Promises – There and back again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://promisesaplus.com/&quot;&gt;Promises/A+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;/ul&gt;
			&lt;!-- .entry-content --&gt;

</description>
        <pubDate>Sun, 27 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-27-promise-introduction.html-f65f9ebff.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-27-promise-introduction.html-f65f9ebff.html</guid>
        
        
        <category>baidu_mweb</category>
        
      </item>
    
      <item>
        <title>iOS开发如何提高</title>
        <description>
&lt;p&gt;&lt;img src=&quot;/images/devtang.com/79692bab05e21d2e6ef22c2bdacb7f5d.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;许多人在博客和微信上咨询我iOS开发如何提高，经过一番思考之后，我能想到如下一些提高的办法，我个人也是通过这些方法来提高的。&lt;/p&gt;

&lt;h2&gt;阅读博客&lt;/h2&gt;

&lt;p&gt;在现在这个碎片化阅读流行的年代，博客的风头早已被微博盖过。而我却坚持写作博客，并且大量地阅读同行的iOS开发博客。博客的文章长度通常在3000字左右，许多iOS开发知识都至少需要这样的篇幅才能完整地讲解清楚。并且博客相对于书籍来说，并没有较长的出版发行时间，所以阅读博客对于获取最新的iOS开发知识有着非常良好的效果。&lt;/p&gt;

&lt;p&gt;我自己精心整理了国内40多位iOS开发博主的博客地址列表：&lt;a href=&quot;https://github.com/tangqiaoboy/iOSBlogCN&quot;&gt;https://github.com/tangqiaoboy/iOSBlogCN&lt;/a&gt;，希望大家都能培养起阅读博客的习惯。&lt;/p&gt;

&lt;p&gt;国外也有很多优秀的iOS开发博客，他们整体质量比中文的博客更高，以下是一些推荐的博客地址列表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;博客名 &lt;/th&gt;
&lt;th&gt; 博客地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;objc.io &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://www.objc.io/&quot;&gt;http://www.objc.io/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ray Wenderlich&lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://www.raywenderlich.com&quot;&gt;http://www.raywenderlich.com&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iOS Developer Tips &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://iosdevelopertips.com/&quot;&gt;http://iosdevelopertips.com/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iOS Dev Weekly &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://iosdevweekly.com/&quot;&gt;http://iosdevweekly.com/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NSHipster &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://nshipster.com/&quot;&gt;http://nshipster.com/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bartosz Ciechanowski &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://ciechanowski.me&quot;&gt;http://ciechanowski.me&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Big Nerd Ranch Blog &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://blog.bignerdranch.com&quot;&gt;http://blog.bignerdranch.com&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nils Hayat &lt;/td&gt;
&lt;td&gt; &lt;a href=&quot;http://nilsou.com/&quot;&gt;http://nilsou.com/&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;另外，使用博客RSS聚合工具（例如Feedly：&lt;a href=&quot;http://www.feedly.com/&quot;&gt;http://www.feedly.com/&lt;/a&gt;）可以获得更好的博客阅读体验。手机上也有很多优秀的博客阅读工具（我使用的是&lt;a href=&quot;http://newsify.co/&quot;&gt;Newsify&lt;/a&gt;）。合理地使用这些工具也可以将你在地铁上、睡觉前等碎片时间充分利用上。&lt;/p&gt;

&lt;h2&gt;读书&lt;/h2&gt;

&lt;p&gt;博客的内容通常只能详细讲解一个知识点，而书籍则能成体系地介绍整个知识树。相比国外，中国的书籍售价相当便宜，所以这其实是一个非常划算的提高的方式。建议大家每年至少坚持读完1本高质量的iOS开发书籍。&lt;/p&gt;

&lt;p&gt;去年出版的&lt;a href=&quot;http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html&quot;&gt;《iOS 7 Programming Pushing the Limits》&lt;/a&gt; 以及  &lt;a href=&quot;http://item.jd.com/11258970.html&quot;&gt;《Objective-C高级编程：iOS与OS X多线程和内存管理》&lt;/a&gt; 都算是不错的进阶方面的读物。顺便打个广告，我自己也在写一本iOS进阶方面的图书，年底前应该能上市。&lt;/p&gt;

&lt;h2&gt;看WWDC视频&lt;/h2&gt;

&lt;p&gt;由于iOS开发在快速发展，每年苹果都会给我们带来很多新的知识。而对于这些知识，第一手的资料就是WWDC的视频。&lt;/p&gt;

&lt;p&gt;通常情况下，一个iOS开发的新知识首先会在WWDC上被苹果公开，然后3个月左右，会有国内外的博客介绍这些知识，再过半年左右，会有国外的图书介绍这些知识。所以如果想尽早地了解这些知识，那么只有通过WWDC的视频。&lt;/p&gt;

&lt;p&gt;现在每年的WWDC视频都会在会议过程中逐步放出，重要的视频会带有英文字幕。坚持阅读这些视频不但可以获得最新的iOS开发知识，还可以提高英文听力水平。&lt;/p&gt;

&lt;h2&gt;看苹果的官方文档&lt;/h2&gt;

&lt;p&gt;苹果的官方文档相当详尽，对于不熟悉的API，阅读官方文档也是最直接有效地方式。&lt;/p&gt;

&lt;p&gt;苹果的文档比较海量，适合选一些重点来阅读，比如人机交互指南就是必读的，而其它的内容可以遇到的时候作为重点资源来查阅。&lt;/p&gt;

&lt;h2&gt;看开源项目的代码&lt;/h2&gt;

&lt;p&gt;大家一定有这样的感受，很多时候用文字讲解半天，还不如写几行代码来得直观。阅读优秀的开源项目代码，不但可以学习到iOS开发本身的基本知识，还能学习到设计模式等软件架构上的知识。&lt;/p&gt;

&lt;p&gt;如果读者能够参与到开源项目的开发中，则能进一步提高自己的能力。&lt;/p&gt;

&lt;h2&gt;多写代码，多思考&lt;/h2&gt;

&lt;p&gt;知识的积累离不开实践和总结，我认为iOS代码量如果没有超过10万行，是不能称得上熟悉iOS开发的。某些在校的学生，仅仅做了几个C++的大作业，就在求职简历里面写上“精通C++”，则真是让人哭笑不得。&lt;/p&gt;

&lt;p&gt;在多写代码的同时，我们也要注意不要”重复造轮子”，尽量保证每次写的代码都能具有复用性。在代码结构因为业务需求需要变更时，及时重构，在不要留下技术债的同时，我们也要多思考如何设计应用架构，能够保证满足灵活多变的产品需求。&lt;/p&gt;

&lt;p&gt;在多次重构和思考的过程中，我们就会慢慢积累出一类问题的“最佳实践”方式，成为自己宝贵的经验。&lt;/p&gt;

&lt;h2&gt;多和同行交流&lt;/h2&gt;

&lt;p&gt;有些时候遇到一些难解的技术问题，和同行的几句交流就可能让你茅塞顿开。。另外常见的技术问题通常都有人以前遇到过，简单指导几句就能让你一下子找到正确的解决方向。&lt;/p&gt;

&lt;p&gt;国内开发者之间的交流，可以通过论坛，微博，QQ群等方式来进行。另外各大公司有时候会办技术沙龙，这也是一个认识同行的好机会。&lt;/p&gt;

&lt;p&gt;需要特别提醒的是，和国内开发者之前交流要注意讨论质量，有一些论坛和QQ群讨论质量相当低下，提的问题都是能通过简单Google获得的，这种社区一定要远离，以提高自己的沟通效率。&lt;/p&gt;

&lt;p&gt;除了在国内的技术社区交流，建议读者可以去国外的stackoverflow：&lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;http://www.stackoverflow.com&lt;/a&gt;上提问或回答问题。&lt;/p&gt;

&lt;h2&gt;分享&lt;/h2&gt;

&lt;p&gt;值得尝试的分享方式有：发起一个开源项目、写技术博客、在技术会议上做报告。这几种方式都比较有挑战，但是如果能大胆尝试，肯定会有巨大的收获。&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-27-ios-levelup-tips-44de87aac.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-27-ios-levelup-tips-44de87aac.html</guid>
        
        
        <category>devtang</category>
        
      </item>
    
      <item>
        <title>Web Components 初探</title>
        <description>

		&lt;p&gt;众所周知，Web 页面是由 HTML+CSS+JavaScript 三板斧配合而成的，这体现了一种结构、表现、交互分离的思想。但是随着 Web 应用不断丰富，过度分离的设计也会带来可重用性上的问题。于是各家显神通，各种 UI 组件工具库层出不穷，煞有八仙过海之势。于是 W3C 坐不住了，大手一挥，说道：不如让我们统一一个 Web Components 的标准吧怎么样。&lt;/p&gt;
&lt;p&gt;Web Components 的核心思想就是把 UI 元素组件化，即将 HTML、CSS、JS 封装起来，使用的时候就不需要这里贴一段 HTML，那里贴一段样式，最后再贴一段 JS 了。一般来说，它其实是由四个部分的功能组成的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模板，&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 标签&lt;/li&gt;
&lt;li&gt;自定义元素&lt;/li&gt;
&lt;li&gt;Shadow DOM（隐匿 DOM）&lt;/li&gt;
&lt;li&gt;Imports（导入）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们还是通过一个简单的例子看看这些新玩意儿都是些什么吧。&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-489&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;一段简单的 HTML&lt;/h2&gt;
&lt;p&gt;假设我们有一个提供 App 介绍的代码片段，为了不让事情变得更复杂，这里只有 HTML 和 CSS，不关 JS 什么事。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
&amp;lt;div class=&quot;app-info&quot;&amp;gt;
  &amp;lt;div class=&quot;app-bar&quot;&amp;gt;
    &amp;lt;img class=&quot;app-icon&quot; src=&quot;http://img.dayanjia.com/di/TOY7/6c2442a7d933c8950f39059ed31373f083020094.png&quot; width=&quot;36&quot; height=&quot;36&quot;/&amp;gt;
    &amp;lt;div class=&quot;app-name&quot;&amp;gt;百度手机助手&amp;lt;/div&amp;gt;
    &amp;lt;a class=&quot;app-downbtn&quot; href=&quot;http://gdown.baidu.com/data/wisegame/de5074e4e28aecec/baidushoujizhushou_16783385.apk&quot;&amp;gt;下载&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;app-description&quot;&amp;gt;
    百度手机助手是Android手机的权威资源平台，拥有最全最好的应用、游戏、壁纸资源，帮助您在海量资源中精准搜索、高速下载、轻松管理，万千汇聚，一触即得。海量资源：免费获取数十万款应用和游戏，更有海量独家正版壁纸，任你挑选。
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
.app-info {
  padding: 0.2em;
  border-bottom: 1px dotted #ddd;
}
.app-bar {
  display: flex;
  align-items: center;
  font-size: 14px;
}
.app-name {
  flex-grow: 2;
  margin-left: 1em;
}
.app-downbtn {
  text-decoration: none;
  padding: 0.2em 1.1em;
  margin-right: 1em;
  color: #fff;
  background: #5573eb;
}
.app-description {
  font-size: 12px;
}
&lt;/pre&gt;
&lt;p&gt;看上去就是这样的：&lt;/p&gt;
&lt;p data-height=&quot;170&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;kKvif&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/clippit/pen/kKvif/&quot;&gt;kKvif&lt;/a&gt; by Letian Zhang (&lt;a href=&quot;http://codepen.io/clippit&quot;&gt;@clippit&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;模板&lt;/h2&gt;
&lt;p&gt;HTML 模板这个东西已经存在很久了，模板的实现无非是这么几种。一种是直接写在 DOM 里，但是给它一个 &lt;code&gt;display: none&lt;/code&gt; 的样式。使用这种模板，我们可以很方便地用 JavaScript 来操作 DOM 结构，但是如果你在模板里写了一个 &lt;code&gt;img&lt;/code&gt; 元素之类，不好意思，即使你看不到，这个图片的网络请求还是要发一下的。此外，与模板相对应的 CSS 也是和页面其他部分平行的关系，你需要给模板加一个 ID 之类的选择器前缀来指定样式，以保证不和页面中的其他元素冲突。&lt;/p&gt;
&lt;p&gt;第二种是使用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，但是给它指定一个非脚本的 &lt;code&gt;type&lt;/code&gt; 属性，这样浏览器就不会把它当做 JS 来执行了：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
&amp;lt;script id=&quot;template&quot; type=&quot;x-tmpl-mustache&quot;&amp;gt;
Hello {{ name }}!
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;这种方法的好处在于，DOM 元素是不会预先渲染的，因为在被 JS 取得模板数据并插入 DOM 之前，它都是一堆死气沉沉的纯文本。同时这也是它的弊端，因为是纯文本，所以你要手动处理这些复杂的标签，需要格外小心 XSS 之类的问题。&lt;/p&gt;
&lt;p&gt;于是新的 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 标签就被提出了，它可以看做是结合了上面两种方法的优势。我们将上面的 HTML 模版化后：&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
&amp;lt;template id=&quot;appTmpl&quot;&amp;gt;
... 和之前一样的内容 ...
&amp;lt;/template&amp;gt;
&lt;/pre&gt;
&lt;p&gt;使用下面的 JS 就可以访问到模板，并将其插入 DOM 中。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
var tmpl = document.querySelector(&#39;#appTmpl&#39;);
// 取到 t 以后，可以像操作 DOM 一样随意修改其中的内容
// 然后需要从模板创建一个深拷贝（Deep Copy），将其插入 DOM
var clone = document.importNode(tmpl.content, true);
// 创建深拷贝还可以使用下面的方法：
// var clone = tmpl.content.cloneNode(true);
document.body.appendChild(clone);
&lt;/pre&gt;
&lt;p&gt;最后的效果和之前看到的其实是一样的。&lt;/p&gt;
&lt;p data-height=&quot;170&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;wglFf&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/clippit/pen/wglFf/&quot;&gt;wglFf&lt;/a&gt; by Letian Zhang (&lt;a href=&quot;http://codepen.io/clippit&quot;&gt;@clippit&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;当然了，这个模板的实现其实还是很原始的，并没有像 Mustache、Handlebars 等模板库的占位符替换的功能。&lt;/p&gt;
&lt;h2&gt;Shadow DOM&lt;/h2&gt;
&lt;p&gt;这个 Shadow 不太好翻译，反正理解成「隐藏在黑暗中的 DOM」就差不多了。所以说，Shadow DOM 其实是在文档的主 DOM 中生成了一块子 DOM，这个子 DOM 的 CSS 环境是和主文档隔离的。可以说，使用 Shadow DOM，我们就拥有了一个组件封装的原始模型。从外面看，它只是一个 DOM 节点，但是这其实是一个黑盒，里面还可以包含复杂的结构。这种抽象其实在大自然中随处可见，例如当我们谈论太阳系的时候，我们会把地球作为一个节点，但是当我们深入地球这个节点时，会发现还存在地月系这个结构。&lt;/p&gt;
&lt;p&gt;使用 Shadow DOM，我们需要在一个元素上创建一个根（Root），然后将模板内文档添加到这个根上即可。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
&amp;lt;template id=&quot;appTmpl&quot;&amp;gt;
  &amp;lt;style&amp;gt;
  /* ... 将 CSS 移动到模板内 ... */
  &amp;lt;/style&amp;gt;
  ... 原来的模板内容 ...
&amp;lt;/template&amp;gt;

&amp;lt;div class=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
var tmpl = document.querySelector(&#39;#appTmpl&#39;);
var host = document.querySelector(&#39;.app&#39;);
var root = host.createShadowRoot();
root.appendChild(document.importNode(tmpl.content, true));
&lt;/pre&gt;
&lt;p&gt;最终的效果看上去是一样的，但是我们已经将这个 App 信息组件封装了一层 DOM。&lt;/p&gt;
&lt;p data-height=&quot;202&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;xBpqn&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/clippit/pen/xBpqn/&quot;&gt;xBpqn&lt;/a&gt; by Letian Zhang (&lt;a href=&quot;http://codepen.io/clippit&quot;&gt;@clippit&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;自定义元素&lt;/h2&gt;
&lt;p&gt;现在我们已经能够使用一句 &lt;code&gt;&amp;lt;div class=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 外加一些 JS 来显示这个 App 信息的组件了（如果它够的上被称作是一个「组件」的话）。但是，我们能不能再给力一点，使用一个自己命名的元素呢？答案当然是肯定的。通过自定义元素的功能，就可以实现通过 &lt;code&gt;&amp;lt;app-info&amp;gt;&amp;lt;/app-info&amp;gt;&lt;/code&gt; 这样的方式来调用它了。&lt;/p&gt;
&lt;p&gt;HTML 除了上文的那些模板以外，只需要一个简单的容器。同时，接下来的例子中，我们还可以看到如何使用属性来替换模版中的变量，因此模板中也要做出一些修改。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
&amp;lt;template id=&quot;appTmpl&quot;&amp;gt;
  &amp;lt;style&amp;gt;
    /* ... CSS 省略 ... */
  &amp;lt;/style&amp;gt;
  &amp;lt;div class=&quot;app-info&quot;&amp;gt;
    &amp;lt;div class=&quot;app-bar&quot;&amp;gt;
      &amp;lt;img class=&quot;app-icon&quot; src=&quot;&quot; width=&quot;36&quot; height=&quot;36&quot;/&amp;gt;
      &amp;lt;div class=&quot;app-name&quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;a class=&quot;app-downbtn&quot; href=&quot;&quot;&amp;gt;下载&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;app-description&quot;&amp;gt;
      &amp;lt;content selector=&quot;.description&quot;&amp;gt;&amp;lt;/content&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;app-info name=&quot;百度手机助手&quot; downurl=&quot;http://gdown.baidu.com/data/wisegame/de5074e4e28aecec/baidushoujizhushou_16783385.apk&quot; iconurl=&quot;http://img.dayanjia.com/di/TOY7/6c2442a7d933c8950f39059ed31373f083020094.png&quot;&amp;gt;
   &amp;lt;p class=&quot;description&quot;&amp;gt;百度手机助手是Android手机的权威资源平台，拥有最全最好的应用、游戏、壁纸资源，帮助您在海量资源中精准搜索、高速下载、轻松管理，万千汇聚，一触即得。海量资源：免费获取数十万款应用和游戏，更有海量独家正版壁纸，任你挑选。&amp;lt;/p&amp;gt;
&amp;lt;/app-info&amp;gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，Shadow DOM 也可以拥有子元素，而这些子元素在模板中将会使用 &lt;code&gt;&amp;lt;content&amp;gt;&lt;/code&gt; 标签进行定位并替换。接下来，我们使用 JavaScript 创建这个名叫 app-info 的自定义元素。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
var tmpl = document.querySelector(&#39;#appTmpl&#39;);

// 创建新元素的 Prototype
var appInfoProto = Object.create(HTMLElement.prototype);

// 自定义元素在不同的生命周期有不同的 Callback 可以使用。
// createdCallback 是在创建时调用的，此外还有
// attachedCallback（插入 DOM 时的回调）、
// detachedCallback（从 DOM 中移除时的回调）、
// attributeChangedCallback（属性改变时的回调）
appInfoProto.createdCallback = function() {
  var root = this.createShadowRoot();
  var name = this.getAttribute(&#39;name&#39;) || &#39;&#39;;
  var downUrl = this.getAttribute(&#39;downurl&#39;) || &#39;&#39;;
  var iconurl = this.getAttribute(&#39;iconurl&#39;) || &#39;&#39;;
  tmpl.content.querySelector(&#39;.app-name&#39;).textContent = name;
  tmpl.content.querySelector(&#39;.app-downbtn&#39;).href = downUrl;
  tmpl.content.querySelector(&#39;.app-icon&#39;).src = iconurl;
  // 将模板插入 Shadow DOM
  root.appendChild(document.importNode(tmpl.content, true));
};

// 注册自定义元素
var appInfo = document.registerElement(&#39;app-info&#39;, {
    prototype: appInfoProto
});
&lt;/pre&gt;
&lt;p&gt;最后看到的效果，其实和之前的没什么不同，但是我们很清楚，一个简单的 Web Component 雏形已经诞生了。&lt;/p&gt;
&lt;p data-height=&quot;170&quot; data-theme-id=&quot;6588&quot; data-slug-hash=&quot;wdkgo&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/clippit/pen/wdkgo/&quot;&gt;wdkgo&lt;/a&gt; by Letian Zhang (&lt;a href=&quot;http://codepen.io/clippit&quot;&gt;@clippit&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;通过 Chrome 的开发工具我们可以很清楚地看到 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 中的文档片段和我们自定义的 &lt;code&gt;&amp;lt;app-info&amp;gt;&lt;/code&gt; 元素中存在的 Shadow DOM。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bcs.duapp.com/mbuweb/shadow-dom.png&quot;&gt;&lt;img src=&quot;/images/mweb.baidu.com/64041d6ba7256ad606202108d9e21c6d.jpg&quot; alt=&quot;shadow-dom&quot; class=&quot;alignnone size-medium wp-image-494&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;导入&lt;/h2&gt;
&lt;p&gt;Web Components 的最后一部分是导入，这就比较容易理解了，就是提供了一个可复用的途径。我们可以像导入 CSS 一样，导入外部文件中的 HTML 代码。&lt;/p&gt;
&lt;pre class=&quot;wp-code-highlight prettyprint&quot;&gt;
&amp;lt;link rel=&quot;import&quot; href=&quot;app-info.html&quot;&amp;gt;
&lt;/pre&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;Web Components 这个东西还非常新，但是它代表了 Web 前端今后的一个发展方向。包括比较火的  AngularJS 等框架，其中的一些功能也或多或少地在使用 Web Components 的思想，并且推动其标准化（见 &lt;a href=&quot;https://docs.google.com/presentation/d/1Gv-dvU-yy6WY7SiNJ9QRo9XayPS6N2jtgWezdRpoI04/present&quot;&gt;the future of AngularJS&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;同时，也是因为它太新了，所以可能还会有非常大的改变，也许过几个月再来看这篇文章，部分内容就已经过时了:D 此外，当前浏览器对 Web Components 的支持也很有限，在 Chrome 35+ 中，本文中的全部例子都可以正常展现，其他浏览器就基本上悲剧了。对于这样一个新生状态，还处于快速变化期的事物，我也仅仅是浅尝辄止，本文更多在于抛砖引玉，若有疏漏还请读者多多指正。&lt;/p&gt;
&lt;p&gt;针对 Web Components 的功能，Google 出了一个叫做 &lt;a href=&quot;http://www.polymer-project.org/&quot;&gt;polymer&lt;/a&gt; 的项目，用于填补目前浏览器尚不能实现的部分，此外还内建了许多做好的组件。其实这个项目也推出挺久的了，但是一直不温不火，风头赶不上同是出自 Google 的 AngularJS。但是今年 Google IO 大会中，它却被作为 Material Design 的一部分拿出来介绍了，可见其还是很受重视的。下次如果有机会，可以介绍一下它。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://w3c.github.io/webcomponents/explainer&quot;&gt;Introduction to Web Components – W3C Editor’s Draft 9 June 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-tricks.com/modular-future-web-components/&quot;&gt;A Guide to Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/template/&quot;&gt;HTML’s New Template Tag – standardizing client-side templating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/&quot;&gt;Shadow DOM 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

			&lt;!-- .entry-content --&gt;

</description>
        <pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-26-web-components-introduction.html-e996e644c.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-26-web-components-introduction.html-e996e644c.html</guid>
        
        
        <category>baidu_mweb</category>
        
      </item>
    
      <item>
        <title>Chef入门（二）</title>
        <description>

	
	

	&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/a21eddb15b6ddbe9e395938fd299dee1.jpg&quot; title=&quot;Chef&quot; alt=&quot;Chef&quot;&gt;&lt;/p&gt;

&lt;p&gt;上一篇文章&lt;a href=&quot;/learn-chef-01.html&quot;&gt;Chef入门（一）&lt;/a&gt;我们介绍了Chef是什么、以及如何搭建Chef环境。这篇文章，我们介绍一下Chef中的一些概念以及如何编写&lt;a href=&quot;http://docs.getchef.com/chef_overview_cookbooks.html&quot;&gt;cookbook&lt;/a&gt;，并在此过程中部署一个Apache环境，通过本文你可以学到：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建一个cookbook，并在其中添加recipe&lt;/li&gt;
&lt;li&gt;上传你的cookbook到Chef server&lt;/li&gt;
&lt;li&gt;配置node的run list&lt;/li&gt;
&lt;li&gt;在你的目标node上运行chef-client，执行cookbook中定义的操作。&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;一些概念&lt;/h1&gt;

&lt;h2&gt;cookbook&lt;/h2&gt;

&lt;p&gt;cookbook是配置和策略的集合单元，它定义了一个场景，比如部署Apache环境。一个cookbook包含了很多组件来支持实现这个场景，以下是一个cookbook的目录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-rw-r--r--  1 weizhifeng  staff   495 Jul 21 11:01 CHANGELOG.md
-rw-r--r--@ 1 weizhifeng  staff  1536 Jul 21 11:01 README.md
drwxr-xr-x  2 weizhifeng  staff    68 Jul 21 11:01 attributes
drwxr-xr-x  2 weizhifeng  staff    68 Jul 21 11:01 definitions
drwxr-xr-x  3 weizhifeng  staff   102 Jul 21 11:01 files
drwxr-xr-x  2 weizhifeng  staff    68 Jul 21 11:01 libraries
-rw-r--r--@ 1 weizhifeng  staff   298 Jul 21 11:01 metadata.rb
drwxr-xr-x  2 weizhifeng  staff    68 Jul 21 11:01 providers
drwxr-xr-x  3 weizhifeng  staff   102 Jul 26 11:05 recipes
drwxr-xr-x  2 weizhifeng  staff    68 Jul 21 11:01 resources
drwxr-xr-x  3 weizhifeng  staff   102 Jul 21 11:01 templates
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;attributes：用来设置node的属性&lt;/li&gt;
&lt;li&gt;definitions：用来创建可以重用的resource集合&lt;/li&gt;
&lt;li&gt;files：一些需要的文件&lt;/li&gt;
&lt;li&gt;libraries：用来扩展chef-client或者添加一些helper到Ruby中&lt;/li&gt;
&lt;li&gt;metadata.rb：包含一些元数据，比如cookbook的名字、版本、支持的平台等等&lt;/li&gt;
&lt;li&gt;recipes：存储recipe，每个recipe指定了需要的resource以及这些resource执行的顺序&lt;/li&gt;
&lt;li&gt;resources：存储自定义的resource&lt;/li&gt;
&lt;li&gt;providers：存储自定义的provider&lt;/li&gt;
&lt;li&gt;templates：存储ruby模板语言描述的文件，用来解决复杂的配置场景&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;recipe&lt;/h2&gt;

&lt;p&gt;每个cookbook都会包含一到多个recipe（默认是default.rb）。一个recipe就是实现cookbook所描述场景的步骤。看以下这个简单的recipe：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package &#39;apache2&#39; do
  action :install
end

service &#39;apache2&#39; do
  action [ :enable, :start ]
end

cookbook_file &#39;/var/www/index.html&#39; do
  source &#39;index.html&#39;
  mode &#39;0644&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出这个recipe分为三个步骤，分别是安装apache2、启动apache2、拷贝文件。&lt;/p&gt;

&lt;h2&gt;resource和provider&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.getchef.com/chef/resources.html&quot;&gt;resource&lt;/a&gt;就是recipe中的配置项，可以是package、service、bash等等。provider就是为这些resource提供实现的程序。以编程语言来描述的话，resource定义了接口，provider提供了不同平台的实现。&lt;/p&gt;

&lt;h1&gt;实战&lt;/h1&gt;

&lt;p&gt;说了那么多概念，我们接下来在ubuntu上安装并配置Apache。&lt;/p&gt;

&lt;h2&gt;第一步：创建cookbook&lt;/h2&gt;

&lt;p&gt;在workstation中，我们通过&lt;a href=&quot;http://docs.opscode.com/knife.html&quot;&gt;knife&lt;/a&gt;来和Chef server进行交互。执行以下命令来创建一个cookbook。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/chef-repo
$ knife cookbook create apache-tutorial-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行完成之后，在&lt;code&gt;~/chef-repo/cookbooks&lt;/code&gt;目录下会生成名为&lt;code&gt;apache-tutorial-1&lt;/code&gt;的cookbook。不过cookbook都是在本地的，还没有上传到Chef server。&lt;/p&gt;

&lt;h2&gt;第二步：编写recipe&lt;/h2&gt;

&lt;p&gt;当你创建了一个cookbook，Chef会帮你创建一个默认的recipe。用你的编辑器打开&lt;code&gt;~/chef-repo/cookbooks/apache-tutorial-1/recipes/default.rb&lt;/code&gt;。现在让我们来写一些ruby代码来执行以下的动作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装Apache&lt;/li&gt;
&lt;li&gt;启动Apache并且添加到开机启动&lt;/li&gt;
&lt;li&gt;配置home page&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;把以下代码添加到recipe中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package &#39;apache2&#39; do
  action :install
end

service &#39;apache2&#39; do
  action [ :enable, :start ]
end

cookbook_file &#39;/var/www/index.html&#39; do
  source &#39;index.html&#39;
  mode &#39;0644&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;第三步：添加文件资源&lt;/h2&gt;

&lt;p&gt;recipe的最后一步我们使用了&lt;a href=&quot;http://docs.opscode.com/resource_cookbook_file.html&quot;&gt;cookbook_file&lt;/a&gt;来拷贝home page。把以下内容添加到文件&lt;code&gt;~/chef-repo/cookbooks/apache-tutorial-1/files/default/index.html&lt;/code&gt;中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;第四步：上传cookbook&lt;/h2&gt;

&lt;p&gt;在你的chef-repo目录中执行以下命令来上传cookbook。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife cookbook upload apache-tutorial-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;第五步：创建run list&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://learn.getchef.com/concepts/run-lists/&quot;&gt;run list&lt;/a&gt;定义了recipe的执行顺序，当前的例子中我们的run list中只有一个recipe。打开&lt;a href=&quot;http://manage.opscode.com&quot;&gt;manage.opscode.com&lt;/a&gt;，我们来配置run list。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/96c74b6968085a0b965e264aa5580207.jpg&quot; title=&quot;Chef&quot; alt=&quot;Chef&quot;&gt;&lt;/p&gt;

&lt;p&gt;然后从&lt;code&gt;Available Recipes&lt;/code&gt;中拖拽recipe到&lt;code&gt;Current Run List&lt;/code&gt;之中。然后点击&lt;code&gt;Save Run List&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/weizhifeng.net/102b02c4239de93eb603a4c0cedeacba.jpg&quot; title=&quot;Chef&quot; alt=&quot;Chef&quot;&gt;&lt;/p&gt;

&lt;h2&gt;第六步：运行chef-client&lt;/h2&gt;

&lt;p&gt;接下来你需要执行&lt;a href=&quot;http://docs.opscode.com/essentials_chef_client.html&quot;&gt;chef-client&lt;/a&gt;来从Chef server获取最新的cookbook，并且在目标node上执行。你可以自己登录到node上，然后手动执行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh chef@your.host
$ ssh sudo chef-client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者使用knife。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife ssh your.host &#39;sudo chef-client&#39; -m -x chef -P chef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt;表示username，&lt;code&gt;-P&lt;/code&gt;表示password。&lt;/p&gt;

&lt;p&gt;如果你使用的是vagrant，则执行如下命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife ssh localhost &#39;sudo chef-client&#39; -m -x vagrant -P vagrant --ssh-port 2200
Starting Chef Client, version 11.12.8
resolving cookbooks for run list: [&quot;apache-tutorial-1&quot;]
Synchronizing Cookbooks:
  - apache-tutorial-1
Compiling Cookbooks...
Converging 3 resources
Recipe: apache-tutorial-1::default
  * package[apache2] action install (up to date)
  * service[apache2] action enable (up to date)
  * service[apache2] action start (up to date)
  * cookbook_file[/var/www/index.html] action create (up to date)

Running handlers:
Running handlers complete

Chef Client finished, 0/4 resources updated in 19.554803129 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等chef-client执行完成之后，你会发现Apache已经配置好并且运行了，并且把home page拷贝到了&lt;code&gt;/var/www/index.html&lt;/code&gt;，访问80端口应该可以看到home page的输出。&lt;/p&gt;

&lt;p&gt;至此我们已经创建了自己的cookbook，并在目标node上执行，更多的内容可以查看&lt;a href=&quot;http://docs.opscode.com/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h1&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.getchef.com/chef_overview_cookbooks.html&quot;&gt;http://docs.getchef.com/chef_overview_cookbooks.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learn.getchef.com/legacy/tutorials/create-your-first-cookbook/&quot;&gt;http://learn.getchef.com/legacy/tutorials/create-your-first-cookbook/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.getchef.com/chef/resources.html&quot;&gt;http://docs.getchef.com/chef/resources.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


	(完)

	&lt;div class=&quot;post-info&quot;&gt;
		26 Jul 2014  
	
		
	
		
	&lt;/div&gt;
	
	&lt;!-- disqus start --&gt;
	
	
	&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;
&lt;/noscript&gt;
	
	&lt;!-- disqus end --&gt;

	&lt;!-- related start --&gt;
	
	&lt;!-- related end --&gt;

</description>
        <pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-26-learn-chef-02.html-182938c79.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-26-learn-chef-02.html-182938c79.html</guid>
        
        
        <category>weizhifeng</category>
        
      </item>
    
      <item>
        <title>整形数据转换为字符串的研究</title>
        <description>

					
		
&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
google_ad_client = &quot;ca-pub-7056282119617872&quot;;
google_ad_slot = &quot;6645040531&quot;;
google_ad_width = 300;
google_ad_height = 250;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;
&lt;/div&gt;
&lt;br/ --&gt;

&lt;p&gt;目前已经有多种将整形数据转换为字符串表达式的方法。虽然这些转换方法很少会遇到什么瓶颈，但是在分析特定应用的时候就有可能了。比如，在&lt;a title=&quot;Lawn&quot; href=&quot;http://lwan.ws/&quot; target=&quot;_blank&quot;&gt;Lwan&lt;/a&gt;里面构建响应头部的时候就经常会出现。&lt;/p&gt;
&lt;p&gt;就拿Lwan来说吧，最初是用snprintf()函数来转换数字。虽然在表面上这确实能起作用，但是却太没劲了。&lt;/p&gt;
&lt;p&gt;第二种方法是使用朴素算法：将原数连续与10相除，每次都把模转换成一个字符加在字符串后，当除到最后的余数为0时就停止并将字符串倒序得到最后的字符串。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;// Code based on https://code.google.com/p/stringencoders/
size_t naive_uint32_to_str(uint32_t value, char *str) {
    char *wstr = str;
    // Conversion. Number is reversed.
    do
       *wstr++ = (char) decimal_digits[uvalue % 10];
    while (uvalue /= 10);
    *wstr = &#39;&#39;;
    // Reverse string
    strreverse(str, wstr - 1);
    return wstr - str;
}&lt;/pre&gt;
&lt;p&gt;这在一般情况下还是可以的，但倒转字符串的那一步总是令我困扰，为什么不直接向后写字符串呢?&lt;/p&gt;
&lt;p&gt;之后我就把Lawn的代码改写成了如下代码段。需要注意的是，无论sizeof(int32_t)是多少，我都把数字的最大的字节大小(包括终止符)设置成了MAX_INT的3倍。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;#define INT_TO_STR_BUFFER_SIZE (3 * sizeof(int32_t))

char *lwan_uint32_to_str(uint32_t value,
            char buffer[static INT_TO_STR_BUFFER_SIZE],
            size_t *len) {
    char *p = buffer + INT_TO_STR_BUFFER_SIZE - 1;

    *p = &#39;&#39;;
    do {
        *--p = &quot;0123456789&quot;[value % 10];
    } while (value /= 10);

    size_t difference = (size_t)(p - buffer);
    *len = (size_t)(INT_TO_STR_BUFFER_SIZE - difference - 1;

    return p;
}&lt;/pre&gt;
&lt;p&gt;减少数组的写入操作使得算法速度明显加快。然而，在我修补刚才那个算法的时候我却犯了一个很多人都会尽量避免的错误：我让数组进行了额外的查询工作，在没有测试它的表现是否会更好的情况下就不管三七二十一提交了代码。如果使用查表法会比这快9%，噢！&lt;/p&gt;
&lt;p&gt;就在去年，Facebook的工程团队发布了一个更快的将整数转换成字符串的&lt;a title=&quot;函数&quot; href=&quot;https://www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920&quot; target=&quot;_blank&quot;&gt;函数&lt;/a&gt;。他们同样避免了将各个数字转换后形成的字符串转置的操作，并且他们把查表法运用得很好。&lt;/p&gt;
&lt;p&gt;这里的技巧就是，他们把这张表做成了从00到99的数值对，而不是简单的10个数字。这样就把除法运算的数量减少了一半，算法的性能得到很大的提升：比上面的代码段快了大概31%：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: false&quot;&gt;size_t facebook_uint32_to_str(uint32_t value, char *dst)
{
    static const char digits[201] =
        &quot;0001020304050607080910111213141516171819&quot;
        &quot;2021222324252627282930313233343536373839&quot;
        &quot;4041424344454647484950515253545556575859&quot;
        &quot;6061626364656667686970717273747576777879&quot;
        &quot;8081828384858687888990919293949596979899&quot;;
    size_t const length = digits10(value);
    size_t next = length - 1;
    while (value &amp;gt;= 100) {
        auto const i = (value % 100) * 2;
        value /= 100;
        dst[next] = digits[i + 1];
        dst[next - 1] = digits[i];
        next -= 2;
    }
    // Handle last 1-2 digits
    if (value &amp;lt; 10) {
        dst[next] = &#39;0&#39; + uint32_t(value);
    } else {
        auto i = uint32_t(value) * 2;
        dst[next] = digits[i + 1];
        dst[next - 1] = digits[i];
    }
    return length;
}&lt;/pre&gt;
&lt;p&gt;digits10()函数是另外一个使用特殊方式计算数字里面数字个数的函数。即使是高性能，我们也得想法防止一起调用这些东西：使用一个像numeric_limits&amp;lt;uint32_t&amp;gt;::digits10的常量来保持接口的一致性。这是可以实现的，因为dst缓存应该有足够的大小去容纳最大32位的无符号整型数据。&lt;/p&gt;
&lt;p&gt;这个函数基本上都是在把数字和10的次方相比较，并且当数字的位数超过了他们要比较的数的最大次方时就递归。由于这种实现细节，对于一个很小的数使用一个不变的长度并不会使速度得到显著的提升(比如一位或两位数字)；但如果你是出于优化的角度讲，那么使用一个常量并无大碍。如此，在我的机器上(一款搭载酷睿i7 2640M装有最新64位Arch Linux系统的笔记本)，它始终都会执行得更快：&lt;/p&gt;
&lt;div id=&quot;attachment_73982&quot; class=&quot;wp-caption alignnone&quot; style=&quot;width: 610px&quot;&gt;
&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/518b3804e42dfec09dc928ef21a38739.png&quot; rel=&quot;lightbox[73979]&quot; title=&quot;facebook_unit32_to_str()函数使用digits10()和常量值的相对速度&quot;&gt;&lt;img class=&quot;size-full wp-image-73982&quot; title=&quot;facebook_unit32_to_str()函数使用digits10()和常量值的相对速度&quot; alt=&quot;9V0PsPK&quot; src=&quot;/images/jobbole.com/ecbb24c54a151c9301fb6ad3fbeab730.jpg&quot; width=&quot;600&quot; height=&quot;371&quot;&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;facebook_unit32_to_str()函数使用digits10()和常量值的相对速度&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;上面这张图来源于我自己写的一个能够测试上面所有的整型转字符串方法的一个标准的程序。下面是一更完整的表，里面还和其它的一些方法进行了对比。&lt;/p&gt;
&lt;div id=&quot;attachment_73985&quot; class=&quot;wp-caption alignnone&quot; style=&quot;width: 610px&quot;&gt;
&lt;a href=&quot;http://jbcdn2.b0.upaiyun.com/2014/07/531f1ea7fff6273f70d391ccff0af298.png&quot; rel=&quot;lightbox[73979]&quot; title=&quot;整形数据转换为字符串的研究&quot;&gt;&lt;img class=&quot;size-full wp-image-73985&quot; alt=&quot;b2enLNt&quot; src=&quot;/images/jobbole.com/f87cb7aa8b121de8ca5b0c94ae8ef0cd.jpg&quot; width=&quot;600&quot; height=&quot;371&quot;&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;省去了较大偏差的snprintf()函数，PS：它太慢了&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;不幸的是，本文存在这一个许可问题，它并不允许我使用Lawn的代码。这篇博客文章并没有提到这个许可。我是在《&lt;a title=&quot;https://mail-archives.apache.org/mod_mbox/apr-dev/200704.mbox/%3C344-65769@sneakemail.com%3E&quot; href=&quot;https://mail-archives.apache.org/mod_mbox/apr-dev/200704.mbox/%3C344-65769@sneakemail.com%3E&quot; target=&quot;_blank&quot;&gt;two-digit lookup table in places unrelated to Facebook&lt;/a&gt;》发现这个算法的，所以我并不确定到底是谁最先提出的。上面这些问题的很大的一个来源是&lt;a href=&quot;http://www.hackersdelight.org/&quot; target=&quot;_blank&quot;&gt;Hacker’s Delight&lt;/a&gt;网站，但是现在在那里却找不到了。&lt;/p&gt;


&lt;!-- div id=&quot;ad1&quot;&gt;
&lt;/div --&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://www.jobdeer.com/?fr=jobbole&quot;&gt;&lt;/a&gt;&lt;/p&gt;
	


	

</description>
        <pubDate>Sat, 26 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-26-73979-ecbf32eac.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-26-73979-ecbf32eac.html</guid>
        
        
        <category>jobbole</category>
        
      </item>
    
      <item>
        <title>Python 网页爬虫 &amp; 文本处理 &amp; 科学计算 &amp; 机器学习 &amp; 数据挖掘兵器谱</title>
        <description>

						&lt;p&gt;曾经因为&lt;a href=&quot;http://www.52nlp.cn/%E6%8E%A8%E8%8D%90%EF%BC%8D%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%EF%BC%8D%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91-nltk%E9%85%8D%E5%A5%97%E4%B9%A6&quot;&gt;NLTK&lt;/a&gt;的缘故开始学习Python，之后渐渐成为我工作中的第一辅助脚本语言，虽然开发语言是C/C++，但平时的很多文本数据处理任务都交给了Python。离开腾讯创业后，第一个作品&lt;a href=&quot;http://coursegraph.com/&quot;&gt;课程图谱&lt;/a&gt;也是选择了Python系的Flask框架，渐渐的将自己的绝大部分工作交给了Python。这些年来，接触和使用了很多Python工具包，特别是在文本处理，科学计算，机器学习和数据挖掘领域，有很多很多优秀的Python工具包可供使用，所以作为Pythoner，也是相当幸福的。其实如果仔细留意微博，你会发现很多这方面的分享，自己也Google了一下，发现也有同学总结了“&lt;a href=&quot;http://qxde01.blog.163.com/blog/static/67335744201368101922991/&quot;&gt;Python机器学习库&lt;/a&gt;”，不过总感觉缺少点什么。最近流行一个词，全栈工程师（full stack engineer），作为一个苦逼的创业者，天然的要把自己打造成一个full stack engineer，而这个过程中，这些Python工具包给自己提供了足够的火力，所以想起了这个系列。当然，这也仅仅是抛砖引玉，希望大家能提供更多的线索，来汇总整理一套Python网页爬虫，文本处理，科学计算，机器学习和数据挖掘的兵器谱。&lt;/p&gt;
&lt;p&gt;一、Python网页爬虫工具集&lt;/p&gt;
&lt;p&gt;一个真实的项目，一定是从获取数据开始的。无论文本处理，机器学习和数据挖掘，都需要数据，除了通过一些渠道购买或者下载的专业数据外，常常需要大家自己动手爬数据，这个时候，爬虫就显得格外重要了，幸好，Python提供了一批很不错的网页爬虫工具框架，既能爬取数据，也能获取和清洗数据，我们也就从这里开始了：&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://scrapy.org/&quot;&gt;Scrapy&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Scrapy, a fast high-level screen scraping and web crawling framework for Python.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;鼎鼎大名的Scrapy，相信不少同学都有耳闻，&lt;a href=&quot;http://coursegraph.com&quot;&gt;课程图谱&lt;/a&gt;中的很多课程都是依靠Scrapy抓去的，这方面的介绍文章有很多，推荐大牛pluskid早年的一篇文章：《&lt;a href=&quot;http://blog.pluskid.org/?p=366&quot;&gt;Scrapy 轻松定制网络爬虫&lt;/a&gt;》，历久弥新。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://scrapy.org/&quot;&gt;http://scrapy.org/&lt;/a&gt;&lt;br&gt;
Github代码页: &lt;a href=&quot;https://github.com/scrapy/scrapy&quot;&gt;https://github.com/scrapy/scrapy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;Beautiful Soup&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You didn’t write that awful page. You’re just trying to get some data out of it. Beautiful Soup is here to help. Since 2004, it’s been saving programmers hours or days of work on quick-turnaround screen scraping projects.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;读书的时候通过《集体智慧编程》这本书知道Beautiful Soup的，后来也偶尔会用用，非常棒的一套工具。客观的说，Beautifu Soup不完全是一套爬虫工具，需要配合urllib使用，而是一套HTML/XML数据分析，清洗和获取工具。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;http://www.crummy.com/software/BeautifulSoup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;https://github.com/grangier/python-goose&quot;&gt;Python-Goose&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Html Content / Article Extractor, web scrapping lib in Python&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GravityLabs/goose&quot;&gt;Goose&lt;/a&gt;最早是用Java写得，后来用Scala重写，是一个Scala项目。Python-Goose用Python重写，依赖了Beautiful Soup。前段时间用过，感觉很不错，给定一个文章的URL, 获取文章的标题和内容很方便。&lt;/p&gt;
&lt;p&gt;Github主页：&lt;a href=&quot;https://github.com/grangier/python-goose&quot;&gt;https://github.com/grangier/python-goose&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、Python文本处理工具集&lt;/p&gt;
&lt;p&gt;从网页上获取文本数据之后，依据任务的不同，就需要进行基本的文本处理了，譬如对于英文来说，需要基本的tokenize，对于中文，则需要常见的中文分词，进一步的话，无论英文中文，还可以词性标注，句法分析，关键词提取，文本分类，情感分析等等。这个方面，特别是面向英文领域，有很多优秀的工具包，我们一一道来。&lt;br&gt;
&lt;span id=&quot;more-6666&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://www.nltk.org/&quot;&gt;NLTK&lt;/a&gt; — Natural Language Toolkit&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NLTK is a leading platform for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources such as WordNet, along with a suite of text processing libraries for classification, tokenization, stemming, tagging, parsing, and semantic reasoning, and an active discussion forum.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;搞自然语言处理的同学应该没有人不知道NLTK吧，这里也就不多说了。不过推荐两本书籍给刚刚接触NLTK或者需要详细了解NLTK的同学: 一个是官方的《Natural Language Processing with Python》，以介绍NLTK里的功能用法为主，同时附带一些Python知识，同时国内陈涛同学友情翻译了一个中文版，这里可以看到：&lt;a href=&quot;http://www.52nlp.cn/%E6%8E%A8%E8%8D%90%EF%BC%8D%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%EF%BC%8D%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91-nltk%E9%85%8D%E5%A5%97%E4%B9%A6&quot;&gt;推荐《用Python进行自然语言处理》中文翻译-NLTK配套书&lt;/a&gt;；另外一本是《Python Text Processing with NLTK 2.0 Cookbook》，这本书要深入一些，会涉及到NLTK的代码结构，同时会介绍如何定制自己的语料和模型等，相当不错。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.nltk.org/&quot;&gt;http://www.nltk.org/&lt;/a&gt;&lt;br&gt;
Github代码页：&lt;a href=&quot;https://github.com/nltk/nltk&quot;&gt;https://github.com/nltk/nltk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://www.clips.ua.ac.be/pattern&quot;&gt;Pattern&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pattern is a web mining module for the Python programming language.&lt;/p&gt;
&lt;p&gt;It has tools for data mining (Google, Twitter and Wikipedia API, a web crawler, a HTML DOM parser), natural language processing (part-of-speech taggers, n-gram search, sentiment analysis, WordNet), machine learning (vector space model, clustering, SVM), network analysis and canvas visualization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pattern由比利时安特卫普大学CLiPS实验室出品，客观的说，Pattern不仅仅是一套文本处理工具，它更是一套web数据挖掘工具，囊括了数据抓取模块（包括Google, Twitter, 维基百科的API，以及爬虫和HTML分析器），文本处理模块（词性标注，情感分析等），机器学习模块(VSM, 聚类，SVM）以及可视化模块等，可以说，Pattern的这一整套逻辑也是这篇文章的组织逻辑，不过这里我们暂且把Pattern放到文本处理部分。我个人主要使用的是它的英文处理模块&lt;a href=&quot;http://www.clips.ua.ac.be/pages/pattern-en&quot;&gt;Pattern.en&lt;/a&gt;, 有很多很不错的文本处理功能，包括基础的tokenize, 词性标注，句子切分，语法检查，拼写纠错，情感分析，句法分析等，相当不错。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.clips.ua.ac.be/pattern&quot;&gt;http://www.clips.ua.ac.be/pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;http://textblob.readthedocs.org/en/dev/&quot;&gt;TextBlob&lt;/a&gt;: Simplified Text Processing&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;TextBlob is a Python (2 and 3) library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;TextBlob是一个很有意思的Python文本处理工具包，它其实是基于上面两个Python工具包NLKT和Pattern做了封装（TextBlob stands on the giant shoulders of NLTK and pattern, and plays nicely with both），同时提供了很多文本处理功能的接口，包括词性标注，名词短语提取，情感分析，文本分类，拼写检查等，甚至包括翻译和语言检测，不过这个是基于Google的API的，有调用次数限制。TextBlob相对比较年轻，有兴趣的同学可以关注。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://textblob.readthedocs.org/en/dev/&quot;&gt;http://textblob.readthedocs.org/en/dev/&lt;/a&gt;&lt;br&gt;
Github代码页：&lt;a href=&quot;https://github.com/sloria/textblob&quot;&gt;https://github.com/sloria/textblob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;a href=&quot;http://www.clips.ua.ac.be/pages/MBSP&quot;&gt;MBSP&lt;/a&gt; for Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;MBSP is a text analysis system based on the TiMBL and MBT memory based learning applications developed at CLiPS and ILK. It provides tools for Tokenization and Sentence Splitting, Part of Speech Tagging, Chunking, Lemmatization, Relation Finding and Prepositional Phrase Attachment.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MBSP与Pattern同源，同出自比利时安特卫普大学CLiPS实验室，提供了Word Tokenization, 句子切分，词性标注，Chunking, Lemmatization，句法分析等基本的文本处理功能，感兴趣的同学可以关注。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.clips.ua.ac.be/pages/MBSP&quot;&gt;http://www.clips.ua.ac.be/pages/MBSP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5. &lt;a href=&quot;http://radimrehurek.com/gensim/index.html&quot;&gt;Gensim&lt;/a&gt;: Topic modeling for humans&lt;/p&gt;
&lt;p&gt;Gensim是一个相当专业的主题模型Python工具包，无论是代码还是文档，我们曾经用《&lt;a href=&quot;http://www.52nlp.cn/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%87%E6%A1%A3%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%80&quot;&gt;如何计算两个文档的相似度&lt;/a&gt;》介绍过Gensim的安装和使用过程，这里就不多说了。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://radimrehurek.com/gensim/index.html&quot;&gt;http://radimrehurek.com/gensim/index.html&lt;/a&gt;&lt;br&gt;
github代码页：&lt;a href=&quot;https://github.com/piskvorky/gensim&quot;&gt;https://github.com/piskvorky/gensim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6. &lt;a href=&quot;https://github.com/saffsd/langid.py&quot;&gt;langid.py&lt;/a&gt;: Stand-alone language identification system&lt;/p&gt;
&lt;p&gt;语言检测是一个很有意思的话题，不过相对比较成熟，这方面的解决方案很多，也有很多不错的开源工具包，不过对于Python来说，我使用过langid这个工具包，也非常愿意推荐它。langid目前支持97种语言的检测，提供了很多易用的功能，包括可以启动一个建议的server，通过json调用其API，可定制训练自己的语言检测模型等，可以说是“麻雀虽小，五脏俱全”。&lt;/p&gt;
&lt;p&gt;Github主页：&lt;a href=&quot;https://github.com/saffsd/langid.py&quot;&gt;https://github.com/saffsd/langid.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7. &lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;Jieba&lt;/a&gt;: 结巴中文分词&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“结巴”中文分词：做最好的Python中文分词组件 “Jieba” (Chinese for “to stutter”) Chinese text segmentation: built to be the best Python Chinese word segmentation module.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;好了，终于可以说一个国内的Python文本处理工具包了：结巴分词，其功能包括支持三种分词模式（精确模式、全模式、搜索引擎模式），支持繁体分词，支持自定义词典等，是目前一个非常不错的Python中文分词解决方案。&lt;/p&gt;
&lt;p&gt;Github主页：&lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;https://github.com/fxsjy/jieba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;8. &lt;a href=&quot;https://github.com/NLeSC/xtas&quot;&gt;xTAS&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;xtas, the eXtensible Text Analysis Suite, a distributed text analysis package based on Celery and Elasticsearch.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;感谢微博朋友 &lt;a href=&quot;http://weibo.com/sinorichard&quot;&gt;@大山坡的春&lt;/a&gt; 提供的线索：我们组同事之前发布了xTAS，也是基于python的text mining工具包，欢迎使用，链接：http://t.cn/RPbEZOW。看起来很不错的样子，回头试用一下。&lt;/p&gt;
&lt;p&gt;Github代码页：&lt;a href=&quot;https://github.com/NLeSC/xtas&quot;&gt;https://github.com/NLeSC/xtas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、Python科学计算工具包&lt;/p&gt;
&lt;p&gt;说起科学计算，大家首先想起的是Matlab，集数值计算，可视化工具及交互于一身，不过可惜是一个商业产品。开源方面除了&lt;a href=&quot;http://www.gnu.org/software/octave/&quot;&gt;GNU Octave&lt;/a&gt;在尝试做一个类似Matlab的工具包外，Python的这几个工具包集合到一起也可以替代Matlab的相应功能：NumPy+SciPy+Matplotlib+iPython。同时，这几个工具包，特别是NumPy和SciPy，也是很多Python文本处理 &amp;amp; 机器学习 &amp;amp; 数据挖掘工具包的基础，非常重要。最后再推荐一个系列《&lt;a href=&quot;http://sebug.net/paper/books/scipydoc/index.html&quot;&gt;用Python做科学计算&lt;/a&gt;》，将会涉及到NumPy, SciPy, Matplotlib，可以做参考。&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://www.numpy.org/&quot;&gt;NumPy&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NumPy is the fundamental package for scientific computing with Python. It contains among other things:&lt;br&gt;
1）a powerful N-dimensional array object&lt;br&gt;
2）sophisticated (broadcasting) functions&lt;br&gt;
3）tools for integrating C/C++ and Fortran code&lt;br&gt;
4） useful linear algebra, Fourier transform, and random number capabilities&lt;/p&gt;
&lt;p&gt;Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NumPy几乎是一个无法回避的科学计算工具包，最常用的也许是它的N维数组对象，其他还包括一些成熟的函数库，用于整合C/C++和Fortran代码的工具包，线性代数、傅里叶变换和随机数生成函数等。NumPy提供了两种基本的对象：ndarray（N-dimensional array object）和 ufunc（universal function object）。ndarray是存储单一数据类型的多维数组，而ufunc则是能够对数组进行处理的函数。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.numpy.org/&quot;&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt;：Scientific Computing Tools for Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SciPy refers to several related but distinct entities:&lt;/p&gt;
&lt;p&gt;1）The SciPy Stack, a collection of open source software for scientific computing in Python, and particularly a specified set of core packages.&lt;br&gt;
2）The community of people who use and develop this stack.&lt;br&gt;
3）Several conferences dedicated to scientific computing in Python – SciPy, EuroSciPy and SciPy.in.&lt;br&gt;
4）The SciPy library, one component of the SciPy stack, providing many numerical routines.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“SciPy是一个开源的Python算法库和数学工具包，SciPy包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。其功能与软件MATLAB、Scilab和GNU Octave类似。 Numpy和Scipy常常结合着使用，Python大多数机器学习库都依赖于这两个模块。”—-引用自“&lt;a href=&quot;http://qxde01.blog.163.com/blog/static/67335744201368101922991/&quot;&gt;Python机器学习库&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.scipy.org/&quot;&gt;http://www.scipy.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;http://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. matplotlib can be used in python scripts, the python and ipython shell (ala MATLAB®* or Mathematica®†), web application servers, and six graphical user interface toolkits.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;matplotlib 是python最著名的绘图库，它提供了一整套和matlab相似的命令API，十分适合交互式地进行制图。而且也可以方便地将它作为绘图控件，嵌入GUI应用程序中。Matplotlib可以配合ipython shell使用，提供不亚于Matlab的绘图体验，总之用过了都说好。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://matplotlib.org/&quot;&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;a href=&quot;http://ipython.org/&quot;&gt;iPython&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IPython provides a rich architecture for interactive computing with:&lt;/p&gt;
&lt;p&gt;1）Powerful interactive shells (terminal and Qt-based).&lt;br&gt;
2）A browser-based notebook with support for code, text, mathematical expressions, inline plots and other rich media.&lt;br&gt;
3）Support for interactive data visualization and use of GUI toolkits.&lt;br&gt;
4）Flexible, embeddable interpreters to load into your own projects.&lt;br&gt;
5）Easy to use, high performance tools for parallel computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“iPython 是一个Python 的交互式Shell，比默认的Python Shell 好用得多，功能也更强大。 她支持语法高亮、自动完成、代码调试、对象自省，支持 Bash Shell 命令，内置了许多很有用的功能和函式等，非常容易使用。 ” 启动iPython的时候用这个命令“ipython –pylab”，默认开启了matploblib的绘图交互，用起来很方便。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://ipython.org/&quot;&gt;http://ipython.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;四、Python 机器学习 &amp;amp; 数据挖掘 工具包&lt;/p&gt;
&lt;p&gt;机器学习和数据挖掘这两个概念不太好区分，这里就放到一起了。这方面的开源Python工具包有很多，这里先从熟悉的讲起，再补充其他来源的资料，也欢迎大家补充。&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://scikit-learn.org/&quot;&gt;scikit-learn&lt;/a&gt;: Machine Learning in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;scikit-learn (formerly scikits.learn) is an open source machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, logistic regression, naive Bayes, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;首先推荐大名鼎鼎的scikit-learn，scikit-learn是一个基于NumPy, SciPy, Matplotlib的开源机器学习工具包，主要涵盖分类，回归和聚类算法，例如SVM， 逻辑回归，朴素贝叶斯，随机森林，k-means等算法，代码和文档都非常不错，在许多Python项目中都有应用。例如在我们熟悉的NLTK中，分类器方面就有专门针对scikit-learn的接口，可以调用scikit-learn的分类算法以及训练数据来训练分类器模型。这里推荐一个视频，也是我早期遇到scikit-learn的时候推荐过的：&lt;a href=&quot;http://52opencourse.com/552/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AApython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%8C%85scikit-learn%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%A7%86%E9%A2%91-tutorial-scikit-learn-machine-learning-in-python&quot;&gt;推荐一个Python机器学习工具包Scikit-learn以及相关视频–Tutorial: scikit-learn – Machine Learning in Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://scikit-learn.org/&quot;&gt;http://scikit-learn.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;Pandas&lt;/a&gt;: Python Data Analysis Library&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;第一次接触Pandas是由于Udacity上的一门数据分析课程“&lt;a href=&quot;http://coursegraph.com/introduction-to-data-science-udacity-ud359-%E5%85%B6%E4%BB%96%E5%A4%A7%E5%AD%A6%E6%88%96%E6%9C%BA%E6%9E%84&quot;&gt;Introduction to Data Science&lt;/a&gt;” 的Project需要用Pandas库，所以学习了一下Pandas。Pandas也是基于NumPy和Matplotlib开发的，主要用于数据分析和数据可视化，它的数据结构DataFrame和R语言里的data.frame很像，特别是对于时间序列数据有自己的一套分析机制，非常不错。这里推荐一本书《&lt;a href=&quot;http://bin.sc/Readings/Programming/Python/Python%20for%20Data%20Analysis/Python_for_Data_Analysis.pdf&quot;&gt;Python for Data Analysis&lt;/a&gt;》，作者是Pandas的主力开发，依次介绍了iPython, NumPy, Pandas里的相关功能，数据可视化，数据清洗和加工，时间数据处理等，案例包括金融股票数据挖掘等，相当不错。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;=====================================================================&lt;br&gt;
分割线，以上工具包基本上都是自己用过的，以下来源于其他同学的线索，特别是《&lt;a href=&quot;http://qxde01.blog.163.com/blog/static/67335744201368101922991/&quot;&gt;Python机器学习库&lt;/a&gt;》，《&lt;a href=&quot;http://52opencourse.com/1125/23%E4%B8%AApython%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8C%85&quot;&gt;23个python的机器学习包&lt;/a&gt;》，做了一点增删修改，欢迎大家补充&lt;br&gt;
=====================================================================&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;http://mlpy.sourceforge.net/&quot;&gt;mlpy – Machine Learning Python&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mlpy is a Python module for Machine Learning built on top of NumPy/SciPy and the GNU Scientific Libraries.&lt;/p&gt;
&lt;p&gt;mlpy provides a wide range of state-of-the-art machine learning methods for supervised and unsupervised problems and it is aimed at finding a reasonable compromise among modularity, maintainability, reproducibility, usability and efficiency. mlpy is multiplatform, it works with Python 2 and 3 and it is Open Source, distributed under the GNU General Public License version 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://mlpy.sourceforge.net/&quot;&gt;http://mlpy.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;a href=&quot;http://mdp-toolkit.sourceforge.net/&quot;&gt;MDP&lt;/a&gt;：The Modular toolkit for Data Processing&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Modular toolkit for Data Processing (MDP) is a Python data processing framework.&lt;br&gt;
From the user’s perspective, MDP is a collection of supervised and unsupervised learning algorithms and other data processing units that can be combined into data processing sequences and more complex feed-forward network architectures.&lt;br&gt;
From the scientific developer’s perspective, MDP is a modular framework, which can easily be expanded. The implementation of new algorithms is easy and intuitive. The new implemented units are then automatically integrated with the rest of the library.&lt;br&gt;
The base of available algorithms is steadily increasing and includes signal processing methods (Principal Component Analysis, Independent Component Analysis, Slow Feature Analysis), manifold learning methods ([Hessian] Locally Linear Embedding), several classifiers, probabilistic methods (Factor Analysis, RBM), data pre-processing methods, and many others.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“MDP用于数据处理的模块化工具包，一个Python数据处理框架。 从用户的观点，MDP是能够被整合到数据处理序列和更复杂的前馈网络结构的一批监督学习和非监督学习算法和其他数据处理单元。计算依照速度和内存需求而高效的执行。从科学开发者的观点，MDP是一个模块框架，它能够被容易地扩展。新算法的实现是容易且直观的。新实现的单元然后被自动地与程序库的其余部件进行整合。MDP在神经科学的理论研究背景下被编写，但是它已经被设计为在使用可训练数据处理算法的任何情况中都是有用的。其站在用户一边的简单性，各种不同的随时可用的算法，及应用单元的可重用性，使得它也是一个有用的教学工具。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://mdp-toolkit.sourceforge.net/&quot;&gt;http://mdp-toolkit.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5. &lt;a href=&quot;http://www.pybrain.org/&quot;&gt;PyBrain&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PyBrain is a modular Machine Learning Library for Python. Its goal is to offer flexible, easy-to-use yet still powerful algorithms for Machine Learning Tasks and a variety of predefined environments to test and compare your algorithms.&lt;/p&gt;
&lt;p&gt;PyBrain is short for Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network Library. In fact, we came up with the name first and later reverse-engineered this quite descriptive “Backronym”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“PyBrain(Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network)是Python的一个机器学习模块，它的目标是为机器学习任务提供灵活、易应、强大的机器学习算法。（这名字很霸气）&lt;/p&gt;
&lt;p&gt;PyBrain正如其名，包括神经网络、强化学习(及二者结合)、无监督学习、进化算法。因为目前的许多问题需要处理连续态和行为空间，必须使用函数逼近(如神经网络)以应对高维数据。PyBrain以神经网络为核心，所有的训练方法都以神经网络为一个实例。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.pybrain.org/&quot;&gt;http://www.pybrain.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6. &lt;a href=&quot;http://pyml.sourceforge.net/&quot;&gt;PyML&lt;/a&gt; – machine learning in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PyML is an interactive object oriented framework for machine learning written in Python. PyML focuses on SVMs and other kernel methods. It is supported on Linux and Mac OS X.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“PyML是一个Python机器学习工具包，为各分类和回归方法提供灵活的架构。它主要提供特征选择、模型选择、组合分类器、分类评估等功能。”&lt;/p&gt;
&lt;p&gt;项目主页：&lt;a href=&quot;http://pyml.sourceforge.net/&quot;&gt;http://pyml.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7. &lt;a href=&quot;https://pypi.python.org/pypi/milk/&quot;&gt;Milk&lt;/a&gt;：Machine learning toolkit in Python.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Its focus is on supervised classification with several classifiers available:&lt;br&gt;
SVMs (based on libsvm), k-NN, random forests, decision trees. It also performs&lt;br&gt;
feature selection. These classifiers can be combined in many ways to form&lt;br&gt;
different classification systems.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Milk是Python的一个机器学习工具箱，其重点是提供监督分类法与几种有效的分类分析：SVMs(基于libsvm)，K-NN，随机森林经济和决策树。它还可以进行特征选择。这些分类可以在许多方面相结合，形成不同的分类系统。对于无监督学习，它提供K-means和affinity propagation聚类算法。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://luispedro.org/software/milk&quot;&gt;http://luispedro.org/software/milk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http://luispedro.org/software/milk&lt;/p&gt;
&lt;p&gt;8. &lt;a href=&quot;http://www.pymvpa.org/&quot;&gt;PyMVPA&lt;/a&gt;: MultiVariate Pattern Analysis (MVPA) in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PyMVPA is a Python package intended to ease statistical learning analyses of large datasets. It offers an extensible framework with a high-level interface to a broad range of algorithms for classification, regression, feature selection, data import and export. It is designed to integrate well with related software packages, such as scikit-learn, and MDP. While it is not limited to the neuroimaging domain, it is eminently suited for such datasets. PyMVPA is free software and requires nothing but free-software to run.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“PyMVPA(Multivariate Pattern Analysis in Python)是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.pymvpa.org/&quot;&gt;http://www.pymvpa.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9. &lt;a href=&quot;https://github.com/pydata/pyrallel&quot;&gt;Pyrallel&lt;/a&gt; – Parallel Data Analytics in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Experimental project to investigate distributed computation patterns for machine learning and other semi-interactive data analytics tasks.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Pyrallel(Parallel Data Analytics in Python)基于分布式计算模式的机器学习和半交互式的试验项目，可在小型集群上运行”&lt;/p&gt;
&lt;p&gt;Github代码页：&lt;a href=&quot;https://github.com/pydata/pyrallel&quot;&gt;http://github.com/pydata/pyrallel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10. &lt;a href=&quot;http://montepython.sourceforge.net/&quot;&gt;Monte&lt;/a&gt; – gradient based learning in Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Monte (python) is a Python framework for building gradient based learning machines, like neural networks, conditional random fields, logistic regression, etc. Monte contains modules (that hold parameters, a cost-function and a gradient-function) and trainers (that can adapt a module’s parameters by minimizing its cost-function on training data). &lt;/p&gt;
&lt;p&gt;Modules are usually composed of other modules, which can in turn contain other modules, etc. Gradients of decomposable systems like these can be computed with back-propagation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Monte (machine learning in pure Python)是一个纯Python机器学习库。它可以迅速构建神经网络、条件随机场、逻辑回归等模型，使用inline-C优化，极易使用和扩展。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://montepython.sourceforge.net&quot;&gt;http://montepython.sourceforge.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11. &lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. Theano features:&lt;br&gt;
1）tight integration with NumPy – Use numpy.ndarray in Theano-compiled functions.&lt;br&gt;
2）transparent use of a GPU – Perform data-intensive calculations up to 140x faster than with CPU.(float32 only)&lt;br&gt;
3）efficient symbolic differentiation – Theano does your derivatives for function with one or many inputs.&lt;br&gt;
4）speed and stability optimizations – Get the right answer for log(1+x) even when x is really tiny.&lt;br&gt;
5）dynamic C code generation – Evaluate expressions faster.&lt;br&gt;
6） extensive unit-testing and self-verification – Detect and diagnose many types of mistake.&lt;br&gt;
Theano has been powering large-scale computationally intensive scientific investigations since 2007. But it is also approachable enough to be used in the classroom (IFT6266 at the University of Montreal).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Theano 是一个 Python 库，用来定义、优化和模拟数学表达式计算，用于高效的解决多维数组的计算问题。Theano的特点：紧密集成Numpy；高效的数据密集型GPU计算；高效的符号微分运算；高速和稳定的优化；动态生成c代码；广泛的单元测试和自我验证。自2007年以来，Theano已被广泛应用于科学运算。theano使得构建深度学习模型更加容易，可以快速实现多种模型。PS：Theano，一位希腊美女，Croton最有权势的Milo的女儿，后来成为了毕达哥拉斯的老婆。”&lt;/p&gt;
&lt;p&gt;12. &lt;a href=&quot;http://deeplearning.net/software/pylearn2/&quot;&gt;Pylearn2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Pylearn2 is a machine learning library. Most of its functionality is built on top of Theano. This means you can write Pylearn2 plugins (new models, algorithms, etc) using mathematical expressions, and theano will optimize and stabilize those expressions for you, and compile them to a backend of your choice (CPU or GPU).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Pylearn2建立在theano上，部分依赖scikit-learn上，目前Pylearn2正处于开发中，将可以处理向量、图像、视频等数据，提供MLP、RBM、SDA等深度学习模型。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://deeplearning.net/software/pylearn2/&quot;&gt;http://deeplearning.net/software/pylearn2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他的，欢迎大家补充，这里也会持续更新这篇文章。&lt;/p&gt;
&lt;p&gt;注：原创文章，转载请注明出处“&lt;a href=&quot;http://www.52nlp.cn&quot;&gt;我爱自然语言处理&lt;/a&gt;”：&lt;a href=&quot;http://www.52nlp.cn&quot;&gt;www.52nlp.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文链接地址：&lt;a href=&quot;http://www.52nlp.cn/python-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86-%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98&quot;&gt;http://www.52nlp.cn/python-网页爬虫-文本处理-科学计算-机器学习-数据挖掘&lt;/a&gt;&lt;/p&gt;

											

</description>
        <pubDate>Thu, 24 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-24-python-%25e7%25bd%2591%25e9%25a1%25b5%25e7%2588%25ac%25e8%2599%25ab-%25e6%2596%2587%25e6%259c%25ac%25e5%25a4%2584%25e7%2590%2586-%25e7%25a7%2591%25e5%25ad%25a6%25e8%25ae%25a1%25e7%25ae%2597-%25e6%259c%25ba%25e5%2599%25a8%25e5%25ad%25a6%25e4%25b9%25a0-%25e6%2595%25b0%25e6%258d%25ae%25e6%258c%2596%25e6%258e%2598-060a30129.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-24-python-%25e7%25bd%2591%25e9%25a1%25b5%25e7%2588%25ac%25e8%2599%25ab-%25e6%2596%2587%25e6%259c%25ac%25e5%25a4%2584%25e7%2590%2586-%25e7%25a7%2591%25e5%25ad%25a6%25e8%25ae%25a1%25e7%25ae%2597-%25e6%259c%25ba%25e5%2599%25a8%25e5%25ad%25a6%25e4%25b9%25a0-%25e6%2595%25b0%25e6%258d%25ae%25e6%258c%2596%25e6%258e%2598-060a30129.html</guid>
        
        
        <category>52nlp</category>
        
      </item>
    
  </channel>
</rss>
