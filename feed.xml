<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT干货网</title>
    <description>IT互联网干货汇总</description>
    <link>http://iftti.com/</link>
    <atom:link href="http://iftti.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 25 Jul 2014 18:05:30 +0800</pubDate>
    <lastBuildDate>Fri, 25 Jul 2014 18:05:30 +0800</lastBuildDate>
    <generator>Jekyll v2.1.0</generator>
    
      <item>
        <title>Python 网页爬虫 &amp; 文本处理 &amp; 科学计算 &amp; 机器学习 &amp; 数据挖掘兵器谱</title>
        <description>

						&lt;p&gt;曾经因为&lt;a href=&quot;http://www.52nlp.cn/%E6%8E%A8%E8%8D%90%EF%BC%8D%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%EF%BC%8D%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91-nltk%E9%85%8D%E5%A5%97%E4%B9%A6&quot;&gt;NLTK&lt;/a&gt;的缘故开始学习Python，之后渐渐成为我工作中的第一辅助脚本语言，虽然开发语言是C/C++，但平时的很多文本数据处理任务都交给了Python。离开腾讯创业后，第一个作品&lt;a href=&quot;http://coursegraph.com/&quot;&gt;课程图谱&lt;/a&gt;也是选择了Python系的Flask框架，渐渐的将自己的绝大部分工作交给了Python。这些年来，接触和使用了很多Python工具包，特别是在文本处理，科学计算，机器学习和数据挖掘领域，有很多很多优秀的Python工具包可供使用，所以作为Pythoner，也是相当幸福的。其实如果仔细留意微博，你会发现很多这方面的分享，自己也Google了一下，发现也有同学总结了“&lt;a href=&quot;http://qxde01.blog.163.com/blog/static/67335744201368101922991/&quot;&gt;Python机器学习库&lt;/a&gt;”，不过总感觉缺少点什么。最近流行一个词，全栈工程师（full stack engineer），作为一个苦逼的创业者，天然的要把自己打造成一个full stack engineer，而这个过程中，这些Python工具包给自己提供了足够的火力，所以想起了这个系列。当然，这也仅仅是抛砖引玉，希望大家能提供更多的线索，来汇总整理一套Python网页爬虫，文本处理，科学计算，机器学习和数据挖掘的兵器谱。&lt;/p&gt;
&lt;p&gt;一、Python网页爬虫工具集&lt;/p&gt;
&lt;p&gt;一个真实的项目，一定是从获取数据开始的。无论文本处理，机器学习和数据挖掘，都需要数据，除了通过一些渠道购买或者下载的专业数据外，常常需要大家自己动手爬数据，这个时候，爬虫就显得格外重要了，幸好，Python提供了一批很不错的网页爬虫工具框架，既能爬取数据，也能获取和清洗数据，我们也就从这里开始了：&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://scrapy.org/&quot;&gt;Scrapy&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Scrapy, a fast high-level screen scraping and web crawling framework for Python.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;鼎鼎大名的Scrapy，相信不少同学都有耳闻，&lt;a href=&quot;http://coursegraph.com&quot;&gt;课程图谱&lt;/a&gt;中的很多课程都是依靠Scrapy抓去的，这方面的介绍文章有很多，推荐大牛pluskid早年的一篇文章：《&lt;a href=&quot;http://blog.pluskid.org/?p=366&quot;&gt;Scrapy 轻松定制网络爬虫&lt;/a&gt;》，历久弥新。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://scrapy.org/&quot;&gt;http://scrapy.org/&lt;/a&gt;&lt;br&gt;
Github代码页: &lt;a href=&quot;https://github.com/scrapy/scrapy&quot;&gt;https://github.com/scrapy/scrapy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;Beautiful Soup&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You didn’t write that awful page. You’re just trying to get some data out of it. Beautiful Soup is here to help. Since 2004, it’s been saving programmers hours or days of work on quick-turnaround screen scraping projects.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;读书的时候通过《集体智慧编程》这本书知道Beautiful Soup的，后来也偶尔会用用，非常棒的一套工具。客观的说，Beautifu Soup不完全是一套爬虫工具，需要配合urllib使用，而是一套HTML/XML数据分析，清洗和获取工具。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;http://www.crummy.com/software/BeautifulSoup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;https://github.com/grangier/python-goose&quot;&gt;Python-Goose&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Html Content / Article Extractor, web scrapping lib in Python&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GravityLabs/goose&quot;&gt;Goose&lt;/a&gt;最早是用Java写得，后来用Scala重写，是一个Scala项目。Python-Goose用Python重写，依赖了Beautiful Soup。前段时间用过，感觉很不错，给定一个文章的URL, 获取文章的标题和内容很方便。&lt;/p&gt;
&lt;p&gt;Github主页：&lt;a href=&quot;https://github.com/grangier/python-goose&quot;&gt;https://github.com/grangier/python-goose&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二、Python文本处理工具集&lt;/p&gt;
&lt;p&gt;从网页上获取文本数据之后，依据任务的不同，就需要进行基本的文本处理了，譬如对于英文来说，需要基本的tokenize，对于中文，则需要常见的中文分词，进一步的话，无论英文中文，还可以词性标注，句法分析，关键词提取，文本分类，情感分析等等。这个方面，特别是面向英文领域，有很多优秀的工具包，我们一一道来。&lt;br&gt;
&lt;span id=&quot;more-6666&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://www.nltk.org/&quot;&gt;NLTK&lt;/a&gt; — Natural Language Toolkit&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NLTK is a leading platform for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources such as WordNet, along with a suite of text processing libraries for classification, tokenization, stemming, tagging, parsing, and semantic reasoning, and an active discussion forum.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;搞自然语言处理的同学应该没有人不知道NLTK吧，这里也就不多说了。不过推荐两本书籍给刚刚接触NLTK或者需要详细了解NLTK的同学: 一个是官方的《Natural Language Processing with Python》，以介绍NLTK里的功能用法为主，同时附带一些Python知识，同时国内陈涛同学友情翻译了一个中文版，这里可以看到：&lt;a href=&quot;http://www.52nlp.cn/%E6%8E%A8%E8%8D%90%EF%BC%8D%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%EF%BC%8D%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91-nltk%E9%85%8D%E5%A5%97%E4%B9%A6&quot;&gt;推荐《用Python进行自然语言处理》中文翻译-NLTK配套书&lt;/a&gt;；另外一本是《Python Text Processing with NLTK 2.0 Cookbook》，这本书要深入一些，会涉及到NLTK的代码结构，同时会介绍如何定制自己的语料和模型等，相当不错。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.nltk.org/&quot;&gt;http://www.nltk.org/&lt;/a&gt;&lt;br&gt;
Github代码页：&lt;a href=&quot;https://github.com/nltk/nltk&quot;&gt;https://github.com/nltk/nltk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://www.clips.ua.ac.be/pattern&quot;&gt;Pattern&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pattern is a web mining module for the Python programming language.&lt;/p&gt;
&lt;p&gt;It has tools for data mining (Google, Twitter and Wikipedia API, a web crawler, a HTML DOM parser), natural language processing (part-of-speech taggers, n-gram search, sentiment analysis, WordNet), machine learning (vector space model, clustering, SVM), network analysis and canvas visualization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pattern由比利时安特卫普大学CLiPS实验室出品，客观的说，Pattern不仅仅是一套文本处理工具，它更是一套web数据挖掘工具，囊括了数据抓取模块（包括Google, Twitter, 维基百科的API，以及爬虫和HTML分析器），文本处理模块（词性标注，情感分析等），机器学习模块(VSM, 聚类，SVM）以及可视化模块等，可以说，Pattern的这一整套逻辑也是这篇文章的组织逻辑，不过这里我们暂且把Pattern放到文本处理部分。我个人主要使用的是它的英文处理模块&lt;a href=&quot;http://www.clips.ua.ac.be/pages/pattern-en&quot;&gt;Pattern.en&lt;/a&gt;, 有很多很不错的文本处理功能，包括基础的tokenize, 词性标注，句子切分，语法检查，拼写纠错，情感分析，句法分析等，相当不错。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.clips.ua.ac.be/pattern&quot;&gt;http://www.clips.ua.ac.be/pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;http://textblob.readthedocs.org/en/dev/&quot;&gt;TextBlob&lt;/a&gt;: Simplified Text Processing&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;TextBlob is a Python (2 and 3) library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;TextBlob是一个很有意思的Python文本处理工具包，它其实是基于上面两个Python工具包NLKT和Pattern做了封装（TextBlob stands on the giant shoulders of NLTK and pattern, and plays nicely with both），同时提供了很多文本处理功能的接口，包括词性标注，名词短语提取，情感分析，文本分类，拼写检查等，甚至包括翻译和语言检测，不过这个是基于Google的API的，有调用次数限制。TextBlob相对比较年轻，有兴趣的同学可以关注。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://textblob.readthedocs.org/en/dev/&quot;&gt;http://textblob.readthedocs.org/en/dev/&lt;/a&gt;&lt;br&gt;
Github代码页：&lt;a href=&quot;https://github.com/sloria/textblob&quot;&gt;https://github.com/sloria/textblob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;a href=&quot;http://www.clips.ua.ac.be/pages/MBSP&quot;&gt;MBSP&lt;/a&gt; for Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;MBSP is a text analysis system based on the TiMBL and MBT memory based learning applications developed at CLiPS and ILK. It provides tools for Tokenization and Sentence Splitting, Part of Speech Tagging, Chunking, Lemmatization, Relation Finding and Prepositional Phrase Attachment.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MBSP与Pattern同源，同出自比利时安特卫普大学CLiPS实验室，提供了Word Tokenization, 句子切分，词性标注，Chunking, Lemmatization，句法分析等基本的文本处理功能，感兴趣的同学可以关注。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.clips.ua.ac.be/pages/MBSP&quot;&gt;http://www.clips.ua.ac.be/pages/MBSP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5. &lt;a href=&quot;http://radimrehurek.com/gensim/index.html&quot;&gt;Gensim&lt;/a&gt;: Topic modeling for humans&lt;/p&gt;
&lt;p&gt;Gensim是一个相当专业的主题模型Python工具包，无论是代码还是文档，我们曾经用《&lt;a href=&quot;http://www.52nlp.cn/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%96%87%E6%A1%A3%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6%E4%B8%80&quot;&gt;如何计算两个文档的相似度&lt;/a&gt;》介绍过Gensim的安装和使用过程，这里就不多说了。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://radimrehurek.com/gensim/index.html&quot;&gt;http://radimrehurek.com/gensim/index.html&lt;/a&gt;&lt;br&gt;
github代码页：&lt;a href=&quot;https://github.com/piskvorky/gensim&quot;&gt;https://github.com/piskvorky/gensim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6. &lt;a href=&quot;https://github.com/saffsd/langid.py&quot;&gt;langid.py&lt;/a&gt;: Stand-alone language identification system&lt;/p&gt;
&lt;p&gt;语言检测是一个很有意思的话题，不过相对比较成熟，这方面的解决方案很多，也有很多不错的开源工具包，不过对于Python来说，我使用过langid这个工具包，也非常愿意推荐它。langid目前支持97种语言的检测，提供了很多易用的功能，包括可以启动一个建议的server，通过json调用其API，可定制训练自己的语言检测模型等，可以说是“麻雀虽小，五脏俱全”。&lt;/p&gt;
&lt;p&gt;Github主页：&lt;a href=&quot;https://github.com/saffsd/langid.py&quot;&gt;https://github.com/saffsd/langid.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7. &lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;Jieba&lt;/a&gt;: 结巴中文分词&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“结巴”中文分词：做最好的Python中文分词组件 “Jieba” (Chinese for “to stutter”) Chinese text segmentation: built to be the best Python Chinese word segmentation module.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;好了，终于可以说一个国内的Python文本处理工具包了：结巴分词，其功能包括支持三种分词模式（精确模式、全模式、搜索引擎模式），支持繁体分词，支持自定义词典等，是目前一个非常不错的Python中文分词解决方案。&lt;/p&gt;
&lt;p&gt;Github主页：&lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;https://github.com/fxsjy/jieba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;8. &lt;a href=&quot;https://github.com/NLeSC/xtas&quot;&gt;xTAS&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;xtas, the eXtensible Text Analysis Suite, a distributed text analysis package based on Celery and Elasticsearch.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;感谢微博朋友 &lt;a href=&quot;http://weibo.com/sinorichard&quot;&gt;@大山坡的春&lt;/a&gt; 提供的线索：我们组同事之前发布了xTAS，也是基于python的text mining工具包，欢迎使用，链接：http://t.cn/RPbEZOW。看起来很不错的样子，回头试用一下。&lt;/p&gt;
&lt;p&gt;Github代码页：&lt;a href=&quot;https://github.com/NLeSC/xtas&quot;&gt;https://github.com/NLeSC/xtas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、Python科学计算工具包&lt;/p&gt;
&lt;p&gt;说起科学计算，大家首先想起的是Matlab，集数值计算，可视化工具及交互于一身，不过可惜是一个商业产品。开源方面除了&lt;a href=&quot;http://www.gnu.org/software/octave/&quot;&gt;GNU Octave&lt;/a&gt;在尝试做一个类似Matlab的工具包外，Python的这几个工具包集合到一起也可以替代Matlab的相应功能：NumPy+SciPy+Matplotlib+iPython。同时，这几个工具包，特别是NumPy和SciPy，也是很多Python文本处理 &amp;amp; 机器学习 &amp;amp; 数据挖掘工具包的基础，非常重要。最后再推荐一个系列《&lt;a href=&quot;http://sebug.net/paper/books/scipydoc/index.html&quot;&gt;用Python做科学计算&lt;/a&gt;》，将会涉及到NumPy, SciPy, Matplotlib，可以做参考。&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://www.numpy.org/&quot;&gt;NumPy&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NumPy is the fundamental package for scientific computing with Python. It contains among other things:&lt;br&gt;
1）a powerful N-dimensional array object&lt;br&gt;
2）sophisticated (broadcasting) functions&lt;br&gt;
3）tools for integrating C/C++ and Fortran code&lt;br&gt;
4） useful linear algebra, Fourier transform, and random number capabilities&lt;/p&gt;
&lt;p&gt;Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NumPy几乎是一个无法回避的科学计算工具包，最常用的也许是它的N维数组对象，其他还包括一些成熟的函数库，用于整合C/C++和Fortran代码的工具包，线性代数、傅里叶变换和随机数生成函数等。NumPy提供了两种基本的对象：ndarray（N-dimensional array object）和 ufunc（universal function object）。ndarray是存储单一数据类型的多维数组，而ufunc则是能够对数组进行处理的函数。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.numpy.org/&quot;&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt;：Scientific Computing Tools for Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SciPy refers to several related but distinct entities:&lt;/p&gt;
&lt;p&gt;1）The SciPy Stack, a collection of open source software for scientific computing in Python, and particularly a specified set of core packages.&lt;br&gt;
2）The community of people who use and develop this stack.&lt;br&gt;
3）Several conferences dedicated to scientific computing in Python – SciPy, EuroSciPy and SciPy.in.&lt;br&gt;
4）The SciPy library, one component of the SciPy stack, providing many numerical routines.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“SciPy是一个开源的Python算法库和数学工具包，SciPy包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。其功能与软件MATLAB、Scilab和GNU Octave类似。 Numpy和Scipy常常结合着使用，Python大多数机器学习库都依赖于这两个模块。”—-引用自“&lt;a href=&quot;http://qxde01.blog.163.com/blog/static/67335744201368101922991/&quot;&gt;Python机器学习库&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.scipy.org/&quot;&gt;http://www.scipy.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;http://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. matplotlib can be used in python scripts, the python and ipython shell (ala MATLAB®* or Mathematica®†), web application servers, and six graphical user interface toolkits.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;matplotlib 是python最著名的绘图库，它提供了一整套和matlab相似的命令API，十分适合交互式地进行制图。而且也可以方便地将它作为绘图控件，嵌入GUI应用程序中。Matplotlib可以配合ipython shell使用，提供不亚于Matlab的绘图体验，总之用过了都说好。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://matplotlib.org/&quot;&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;a href=&quot;http://ipython.org/&quot;&gt;iPython&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IPython provides a rich architecture for interactive computing with:&lt;/p&gt;
&lt;p&gt;1）Powerful interactive shells (terminal and Qt-based).&lt;br&gt;
2）A browser-based notebook with support for code, text, mathematical expressions, inline plots and other rich media.&lt;br&gt;
3）Support for interactive data visualization and use of GUI toolkits.&lt;br&gt;
4）Flexible, embeddable interpreters to load into your own projects.&lt;br&gt;
5）Easy to use, high performance tools for parallel computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“iPython 是一个Python 的交互式Shell，比默认的Python Shell 好用得多，功能也更强大。 她支持语法高亮、自动完成、代码调试、对象自省，支持 Bash Shell 命令，内置了许多很有用的功能和函式等，非常容易使用。 ” 启动iPython的时候用这个命令“ipython –pylab”，默认开启了matploblib的绘图交互，用起来很方便。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://ipython.org/&quot;&gt;http://ipython.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;四、Python 机器学习 &amp;amp; 数据挖掘 工具包&lt;/p&gt;
&lt;p&gt;机器学习和数据挖掘这两个概念不太好区分，这里就放到一起了。这方面的开源Python工具包有很多，这里先从熟悉的讲起，再补充其他来源的资料，也欢迎大家补充。&lt;/p&gt;
&lt;p&gt;1. &lt;a href=&quot;http://scikit-learn.org/&quot;&gt;scikit-learn&lt;/a&gt;: Machine Learning in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;scikit-learn (formerly scikits.learn) is an open source machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, logistic regression, naive Bayes, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;首先推荐大名鼎鼎的scikit-learn，scikit-learn是一个基于NumPy, SciPy, Matplotlib的开源机器学习工具包，主要涵盖分类，回归和聚类算法，例如SVM， 逻辑回归，朴素贝叶斯，随机森林，k-means等算法，代码和文档都非常不错，在许多Python项目中都有应用。例如在我们熟悉的NLTK中，分类器方面就有专门针对scikit-learn的接口，可以调用scikit-learn的分类算法以及训练数据来训练分类器模型。这里推荐一个视频，也是我早期遇到scikit-learn的时候推荐过的：&lt;a href=&quot;http://52opencourse.com/552/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AApython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E5%8C%85scikit-learn%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E8%A7%86%E9%A2%91-tutorial-scikit-learn-machine-learning-in-python&quot;&gt;推荐一个Python机器学习工具包Scikit-learn以及相关视频–Tutorial: scikit-learn – Machine Learning in Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://scikit-learn.org/&quot;&gt;http://scikit-learn.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2. &lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;Pandas&lt;/a&gt;: Python Data Analysis Library&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;第一次接触Pandas是由于Udacity上的一门数据分析课程“&lt;a href=&quot;http://coursegraph.com/introduction-to-data-science-udacity-ud359-%E5%85%B6%E4%BB%96%E5%A4%A7%E5%AD%A6%E6%88%96%E6%9C%BA%E6%9E%84&quot;&gt;Introduction to Data Science&lt;/a&gt;” 的Project需要用Pandas库，所以学习了一下Pandas。Pandas也是基于NumPy和Matplotlib开发的，主要用于数据分析和数据可视化，它的数据结构DataFrame和R语言里的data.frame很像，特别是对于时间序列数据有自己的一套分析机制，非常不错。这里推荐一本书《&lt;a href=&quot;http://bin.sc/Readings/Programming/Python/Python%20for%20Data%20Analysis/Python_for_Data_Analysis.pdf&quot;&gt;Python for Data Analysis&lt;/a&gt;》，作者是Pandas的主力开发，依次介绍了iPython, NumPy, Pandas里的相关功能，数据可视化，数据清洗和加工，时间数据处理等，案例包括金融股票数据挖掘等，相当不错。&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;=====================================================================&lt;br&gt;
分割线，以上工具包基本上都是自己用过的，以下来源于其他同学的线索，特别是《&lt;a href=&quot;http://qxde01.blog.163.com/blog/static/67335744201368101922991/&quot;&gt;Python机器学习库&lt;/a&gt;》，《&lt;a href=&quot;http://52opencourse.com/1125/23%E4%B8%AApython%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8C%85&quot;&gt;23个python的机器学习包&lt;/a&gt;》，做了一点增删修改，欢迎大家补充&lt;br&gt;
=====================================================================&lt;/p&gt;
&lt;p&gt;3. &lt;a href=&quot;http://mlpy.sourceforge.net/&quot;&gt;mlpy – Machine Learning Python&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mlpy is a Python module for Machine Learning built on top of NumPy/SciPy and the GNU Scientific Libraries.&lt;/p&gt;
&lt;p&gt;mlpy provides a wide range of state-of-the-art machine learning methods for supervised and unsupervised problems and it is aimed at finding a reasonable compromise among modularity, maintainability, reproducibility, usability and efficiency. mlpy is multiplatform, it works with Python 2 and 3 and it is Open Source, distributed under the GNU General Public License version 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://mlpy.sourceforge.net/&quot;&gt;http://mlpy.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4. &lt;a href=&quot;http://mdp-toolkit.sourceforge.net/&quot;&gt;MDP&lt;/a&gt;：The Modular toolkit for Data Processing&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Modular toolkit for Data Processing (MDP) is a Python data processing framework.&lt;br&gt;
From the user’s perspective, MDP is a collection of supervised and unsupervised learning algorithms and other data processing units that can be combined into data processing sequences and more complex feed-forward network architectures.&lt;br&gt;
From the scientific developer’s perspective, MDP is a modular framework, which can easily be expanded. The implementation of new algorithms is easy and intuitive. The new implemented units are then automatically integrated with the rest of the library.&lt;br&gt;
The base of available algorithms is steadily increasing and includes signal processing methods (Principal Component Analysis, Independent Component Analysis, Slow Feature Analysis), manifold learning methods ([Hessian] Locally Linear Embedding), several classifiers, probabilistic methods (Factor Analysis, RBM), data pre-processing methods, and many others.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“MDP用于数据处理的模块化工具包，一个Python数据处理框架。 从用户的观点，MDP是能够被整合到数据处理序列和更复杂的前馈网络结构的一批监督学习和非监督学习算法和其他数据处理单元。计算依照速度和内存需求而高效的执行。从科学开发者的观点，MDP是一个模块框架，它能够被容易地扩展。新算法的实现是容易且直观的。新实现的单元然后被自动地与程序库的其余部件进行整合。MDP在神经科学的理论研究背景下被编写，但是它已经被设计为在使用可训练数据处理算法的任何情况中都是有用的。其站在用户一边的简单性，各种不同的随时可用的算法，及应用单元的可重用性，使得它也是一个有用的教学工具。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://mdp-toolkit.sourceforge.net/&quot;&gt;http://mdp-toolkit.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5. &lt;a href=&quot;http://www.pybrain.org/&quot;&gt;PyBrain&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PyBrain is a modular Machine Learning Library for Python. Its goal is to offer flexible, easy-to-use yet still powerful algorithms for Machine Learning Tasks and a variety of predefined environments to test and compare your algorithms.&lt;/p&gt;
&lt;p&gt;PyBrain is short for Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network Library. In fact, we came up with the name first and later reverse-engineered this quite descriptive “Backronym”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“PyBrain(Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network)是Python的一个机器学习模块，它的目标是为机器学习任务提供灵活、易应、强大的机器学习算法。（这名字很霸气）&lt;/p&gt;
&lt;p&gt;PyBrain正如其名，包括神经网络、强化学习(及二者结合)、无监督学习、进化算法。因为目前的许多问题需要处理连续态和行为空间，必须使用函数逼近(如神经网络)以应对高维数据。PyBrain以神经网络为核心，所有的训练方法都以神经网络为一个实例。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.pybrain.org/&quot;&gt;http://www.pybrain.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6. &lt;a href=&quot;http://pyml.sourceforge.net/&quot;&gt;PyML&lt;/a&gt; – machine learning in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PyML is an interactive object oriented framework for machine learning written in Python. PyML focuses on SVMs and other kernel methods. It is supported on Linux and Mac OS X.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“PyML是一个Python机器学习工具包，为各分类和回归方法提供灵活的架构。它主要提供特征选择、模型选择、组合分类器、分类评估等功能。”&lt;/p&gt;
&lt;p&gt;项目主页：&lt;a href=&quot;http://pyml.sourceforge.net/&quot;&gt;http://pyml.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7. &lt;a href=&quot;https://pypi.python.org/pypi/milk/&quot;&gt;Milk&lt;/a&gt;：Machine learning toolkit in Python.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Its focus is on supervised classification with several classifiers available:&lt;br&gt;
SVMs (based on libsvm), k-NN, random forests, decision trees. It also performs&lt;br&gt;
feature selection. These classifiers can be combined in many ways to form&lt;br&gt;
different classification systems.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Milk是Python的一个机器学习工具箱，其重点是提供监督分类法与几种有效的分类分析：SVMs(基于libsvm)，K-NN，随机森林经济和决策树。它还可以进行特征选择。这些分类可以在许多方面相结合，形成不同的分类系统。对于无监督学习，它提供K-means和affinity propagation聚类算法。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://luispedro.org/software/milk&quot;&gt;http://luispedro.org/software/milk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http://luispedro.org/software/milk&lt;/p&gt;
&lt;p&gt;8. &lt;a href=&quot;http://www.pymvpa.org/&quot;&gt;PyMVPA&lt;/a&gt;: MultiVariate Pattern Analysis (MVPA) in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PyMVPA is a Python package intended to ease statistical learning analyses of large datasets. It offers an extensible framework with a high-level interface to a broad range of algorithms for classification, regression, feature selection, data import and export. It is designed to integrate well with related software packages, such as scikit-learn, and MDP. While it is not limited to the neuroimaging domain, it is eminently suited for such datasets. PyMVPA is free software and requires nothing but free-software to run.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“PyMVPA(Multivariate Pattern Analysis in Python)是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://www.pymvpa.org/&quot;&gt;http://www.pymvpa.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9. &lt;a href=&quot;https://github.com/pydata/pyrallel&quot;&gt;Pyrallel&lt;/a&gt; – Parallel Data Analytics in Python&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Experimental project to investigate distributed computation patterns for machine learning and other semi-interactive data analytics tasks.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Pyrallel(Parallel Data Analytics in Python)基于分布式计算模式的机器学习和半交互式的试验项目，可在小型集群上运行”&lt;/p&gt;
&lt;p&gt;Github代码页：&lt;a href=&quot;https://github.com/pydata/pyrallel&quot;&gt;http://github.com/pydata/pyrallel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10. &lt;a href=&quot;http://montepython.sourceforge.net/&quot;&gt;Monte&lt;/a&gt; – gradient based learning in Python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Monte (python) is a Python framework for building gradient based learning machines, like neural networks, conditional random fields, logistic regression, etc. Monte contains modules (that hold parameters, a cost-function and a gradient-function) and trainers (that can adapt a module’s parameters by minimizing its cost-function on training data). &lt;/p&gt;
&lt;p&gt;Modules are usually composed of other modules, which can in turn contain other modules, etc. Gradients of decomposable systems like these can be computed with back-propagation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Monte (machine learning in pure Python)是一个纯Python机器学习库。它可以迅速构建神经网络、条件随机场、逻辑回归等模型，使用inline-C优化，极易使用和扩展。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://montepython.sourceforge.net&quot;&gt;http://montepython.sourceforge.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11. &lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. Theano features:&lt;br&gt;
1）tight integration with NumPy – Use numpy.ndarray in Theano-compiled functions.&lt;br&gt;
2）transparent use of a GPU – Perform data-intensive calculations up to 140x faster than with CPU.(float32 only)&lt;br&gt;
3）efficient symbolic differentiation – Theano does your derivatives for function with one or many inputs.&lt;br&gt;
4）speed and stability optimizations – Get the right answer for log(1+x) even when x is really tiny.&lt;br&gt;
5）dynamic C code generation – Evaluate expressions faster.&lt;br&gt;
6） extensive unit-testing and self-verification – Detect and diagnose many types of mistake.&lt;br&gt;
Theano has been powering large-scale computationally intensive scientific investigations since 2007. But it is also approachable enough to be used in the classroom (IFT6266 at the University of Montreal).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Theano 是一个 Python 库，用来定义、优化和模拟数学表达式计算，用于高效的解决多维数组的计算问题。Theano的特点：紧密集成Numpy；高效的数据密集型GPU计算；高效的符号微分运算；高速和稳定的优化；动态生成c代码；广泛的单元测试和自我验证。自2007年以来，Theano已被广泛应用于科学运算。theano使得构建深度学习模型更加容易，可以快速实现多种模型。PS：Theano，一位希腊美女，Croton最有权势的Milo的女儿，后来成为了毕达哥拉斯的老婆。”&lt;/p&gt;
&lt;p&gt;12. &lt;a href=&quot;http://deeplearning.net/software/pylearn2/&quot;&gt;Pylearn2&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Pylearn2 is a machine learning library. Most of its functionality is built on top of Theano. This means you can write Pylearn2 plugins (new models, algorithms, etc) using mathematical expressions, and theano will optimize and stabilize those expressions for you, and compile them to a backend of your choice (CPU or GPU).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“Pylearn2建立在theano上，部分依赖scikit-learn上，目前Pylearn2正处于开发中，将可以处理向量、图像、视频等数据，提供MLP、RBM、SDA等深度学习模型。”&lt;/p&gt;
&lt;p&gt;官方主页：&lt;a href=&quot;http://deeplearning.net/software/pylearn2/&quot;&gt;http://deeplearning.net/software/pylearn2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他的，欢迎大家补充，这里也会持续更新这篇文章。&lt;/p&gt;
&lt;p&gt;注：原创文章，转载请注明出处“&lt;a href=&quot;http://www.52nlp.cn&quot;&gt;我爱自然语言处理&lt;/a&gt;”：&lt;a href=&quot;http://www.52nlp.cn&quot;&gt;www.52nlp.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文链接地址：&lt;a href=&quot;http://www.52nlp.cn/python-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86-%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98&quot;&gt;http://www.52nlp.cn/python-网页爬虫-文本处理-科学计算-机器学习-数据挖掘&lt;/a&gt;&lt;/p&gt;

											

</description>
        <pubDate>Thu, 24 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-24-python-%25e7%25bd%2591%25e9%25a1%25b5%25e7%2588%25ac%25e8%2599%25ab-%25e6%2596%2587%25e6%259c%25ac%25e5%25a4%2584%25e7%2590%2586-%25e7%25a7%2591%25e5%25ad%25a6%25e8%25ae%25a1%25e7%25ae%2597-%25e6%259c%25ba%25e5%2599%25a8%25e5%25ad%25a6%25e4%25b9%25a0-%25e6%2595%25b0%25e6%258d%25ae%25e6%258c%2596%25e6%258e%2598-060a30129.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-24-python-%25e7%25bd%2591%25e9%25a1%25b5%25e7%2588%25ac%25e8%2599%25ab-%25e6%2596%2587%25e6%259c%25ac%25e5%25a4%2584%25e7%2590%2586-%25e7%25a7%2591%25e5%25ad%25a6%25e8%25ae%25a1%25e7%25ae%2597-%25e6%259c%25ba%25e5%2599%25a8%25e5%25ad%25a6%25e4%25b9%25a0-%25e6%2595%25b0%25e6%258d%25ae%25e6%258c%2596%25e6%258e%2598-060a30129.html</guid>
        
        
      </item>
    
      <item>
        <title>技术的进化</title>
        <description>&lt;p&gt;前几日，吴军博士在微博上转发了王石为其新书《文明之光》写的序言。在序言里，王石提到了达尔文进化论在社会与技术的适应性问题。王石在他短短几句话里并未充分说明了他的观点，只是举了英文键盘的例子说明了&lt;strong&gt;存活下来的不一定更“好”，仅仅是更“适”而已&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我在微博上留下了一条评论：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;生物突变过程，并不一定是适合文明尤其是技术的进化的，好比如从帆船不可能突变到轮船，喷气机也不是内燃机或其它任何先前技术的变种，技术的进化更多是组合进化不太具有偶然性，而不是生物的单物种偶然性突变。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;用达尔文的理论去解释不同领域的演进,是许多人的偏好，尤其是国人。但是，无论觉得达尔文理论能如何为你切身地解答从哪而来的问题，将它放置于任何领域成为“大一统”的进化观点，我想是不合适的，至少将其置于技术的领域，是不完整的。尽管吴军博士回复说，《文明之光》一书并没有太谈进化论，我还是想把我的观点讲清楚。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一.不完整的进化论理解&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;达尔文的生物进化理论需要从两个方面来理解：&lt;strong&gt;变异与选择&lt;/strong&gt;。由于某些历史与政治的原因，进化论被引进进入中国时，就被严复梁启超他们“阉割”了，只片面的强调了“选择”一含义，这也就是大多数人固有的“物竞天择，适者生存”的观点，而对其“变异”层面的含义却知之甚少。由于“进化就是选择”这一狭隘观点的影响，导致达尔文的理论被”泛滥“地解释所有的领域的发展，因为单从“选择”层面来看，其确实是适合其它领域的。当然，用来解释社会发展领域的发展，也是当初严复和梁启超他们原本目的。&lt;/p&gt;

&lt;p&gt;如果说“进化就是选择”，那前面王石先生举的英文键盘一例来说进化，也是合理的（其实这也就是常说的”路径依赖“）。但是这样的观点如果奉成为“理论”，肯定是不完整的。选择论回答不了被选择的“物件”从何而来的疑问。而完整的达尔文理论认为&lt;strong&gt;变异为选择提供了资源&lt;/strong&gt;。如果说”选择“解答了发展的问题，那”变异“则解答了起源的问题。在生物的进化上，这里的变异指的就是基因突变，并且是单个物种内的自身基因变化。&lt;/p&gt;

&lt;p&gt;正是这种关乎基因突变的观点，将达尔文理论套到技术领域，是根本站不住脚的。比如雷达诞生于半导体，你可以对20世纪30年代的半导体线圈进行任何你喜欢的改变，但是你永远不可能得到雷达，制造雷达需要一个和半导体完全不同的理念。我前文微博里提到的帆船到轮船，喷气机到内燃机的也同样如此，无论你对帆船如何改造，没有革命性发动机出现，你不可能得到轮船，而发动机的出现，跟”船“这个”物种“不存在任何关系。而从喷气机到内燃机，也不是一脉的向前突变得到的，而是依赖完全不同的物理理论的出现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二.技术进化的特点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那么技术领域的究竟如何向前进化的呢？技术作家布莱恩.阿瑟在其《技术的本质》一书里给出了一个初步的答案。布莱恩.阿瑟认为技术的进化具有以下两大特点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组合进化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;技术总是由一些基本的功能模块组合而成的&lt;/strong&gt;。技术的组合进化，是技术演变的最本质特征，也是其不同与生物进化的根本区别。&lt;/p&gt;

&lt;p&gt;在人类发展最初的石器时代，石制工具就被打磨成两类，锋利的和有孔的，这两类又与木制的手柄组合成复合工具，锋利的成了矛，有孔的成了锤头。回到现代，你打开一台老式的台式电脑，你会发现里面的零部件，如CPU，硬盘，内存条等。同时拆开一台现代的智能手机，也会发生同样的部件。同样，蒸汽机的出现，其与原来的帆船技术的组合，从而使得轮船得以出现服务于人类。&lt;strong&gt;技术在某种程度上一定是来自此前已有技术的新的组合&lt;/strong&gt;，这是新技术出现的根本特征，也解答了进化论中关于”变异“那一部分问题。而这个组合进化产生变异的特征在生物体上是看不到的，生物的变异是指单个生物体的基因突变，而不同物种相互组合杂交而进化，几乎没出现过。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具有层级递归性模块化演进&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;技术是组合进化的，但是其不是单纯的一层组合，也就是说不是将具有匹配的概念或原理的目的单层次的聚集起来，即可得到新的技术。其组合具有层次结构。可以将技术分解成主集成，次级集成，次次级集成等，直至分解为最基本的部分。如果说整体的技术是树干的话，那次级集成是枝条，最基本的零件就是更小的分支了。以一本纸质书为例，其主集成是纸张和印刷的组合，而纸张和印刷两者可以继续拆分，如印刷可以拆分为油墨技术，电子技术等等。&lt;strong&gt;技术呈现出这种递归性的结构，技术总是包含着技术，直到最基础的水平&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果只是将技术的单元进行层次化的组合，那将是一个无比复杂的工程。比如一个手表有1000个零件，一个钟表匠一个零件一个零件地安装，安装过程中，如果他的工作被打断了，他就必须从头开始。但是，如果将10个模块组装起来，每个模块又由10个子模块组装起来，每个子模块由10个零件组合起来，当他暂停或被打断工作时，他只是损失了一小部分工作。这种零件集成可以更好地预防不可预知的变动，且更易修复。同时，除了解决复杂性的带来的低效问题，模块化更为重要的一点是允许技术的组成部分分别演进，从而又再推动整体技术的前进。好比如发动机的这一模块的进步，可以推动汽车，轮船这些整体技术的进步一样。&lt;/p&gt;

&lt;p&gt;当然，将技术分割为功能模块是需要付出一些代价的，比如需要耗费时间和精力定义模块之间的标准等。所以，&lt;strong&gt;只有模块能被反复使用，且反复使用的次数足够时，才值得付出代价将技术进行分割&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三.技术进化的启示&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前面关于技术进化的特点的讨论，不只是让我们认识了技术进化的与生物进化的区别，更是能更好的指导我们构建更有生命力能向前进化的技术产品。回到我们熟悉的软件系统领域，我们见过太多技术产品被很快淘汰，也见过很多技术产品永远处于不断推倒后重构的死胡同里。从进化的角度看，这样的技术产品根本不存在进化的可能。这其中根本原因，我想更多是其没有满足我们前文说到的可进化技术的一些基本特点。一个没有组合特点的系统，其必然扩展性差，必然面临无法向前进一步进化的可能。而没有定义层次和规则，那也就没有模块化的概念，系统无法进行单个模块的垂直演进，没有模块级别的重用， 当碰到任何不可预知的变动，必然是全部推倒重新再来。这样的系统产品，当然也就不存在生命力可言。&lt;/p&gt;

&lt;p&gt;对此审视我们用过的系统产品，那些经久不衰的，如Unix/Linux，必然是遵循这技术进化的根本特征的。而对于当今互联网产品而言，生命力确实是一个奢侈的词，这应该不仅仅是生态环境的选择问题,而需要系统产品生产者更多的反思！&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;如果您觉得这篇文字有意思，欢迎转发！欢迎更多的朋友们关注我的微信公众号：&lt;strong&gt;JustinNotes&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Sun, 20 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-20-ji-zhu-de-jin-hua-9c5e0c611.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-20-ji-zhu-de-jin-hua-9c5e0c611.html</guid>
        
        
      </item>
    
      <item>
        <title>lvs FullNAT顿卡问题原因追查</title>
        <description>                &lt;h2&gt;问题描述：&lt;/h2&gt;
&lt;p&gt;在FullNAT在使用过程中，在开启SYNProxy的情况下，采用CURL去连接某个URL，会有偶尔卡顿一下，命令如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for i in `seq 1 10000`;do curl -o &#39;/dev/null&#39; -w &quot;%{time_total}:%{time_connect}:%{time_appconnect}:%{time_starttransfer}\n&quot;  http://192.168.1.100 &amp;gt;&amp;gt; fullnat.txt ; done&lt;br&gt;
100   582  100   582    0     0  54356      0 --:--:-- --:--:-- --:--:-- 58200&lt;br&gt;
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;br&gt;
                                   Dload  Upload   Total   Spent    Left  Speed&lt;br&gt;
100   582  100   582    0     0  54586      0 --:--:-- --:--:-- --:--:-- 58200&lt;br&gt;
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;br&gt;
                                   Dload  Upload   Total   Spent    Left  Speed&lt;/code&gt;&lt;br&gt;
以上命令偶尔会出现6s左右的超时等待。这个事情很神奇，为什么是6s呢，不是其他数字呢，如果是丢包的话，时间为什么这么固定呢，猜测这可能跟程序的实现有关系？&lt;/p&gt;
&lt;h2&gt;抓包复现：&lt;/h2&gt;
&lt;p&gt;我们在FullNAT机器和RealServer机器同时抓包。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://noops.me/wp-content/uploads/2014/07/fullnat-packet.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
第一张图是在fullnat机器上抓的，是从client到fullnat的包，第二张图在real server上抓的，是从fullnat到real server的包，从图中可以看出，从xx.xx.116.25到xx.xx.48.24，xx.xx.116.25是client，xx.xx.48.24为fullnat的vip,从第一张图中看出，完成了三次握手以后，client就开始请求数据包，但是请求数据包一直没有回应，在超时以后一直进行重发。难道是请求数据包时丢了？我们从real server上的抓包情况可以得到结果。client从03秒(抓包机器时间设置相差3分钟，单秒数是对的)开始发送数据包，但是real server从09秒时才开始3次握手建立连接。建立连接以后，并且将重发的包又转发了一遍。那么，我们从二张图中得出，导致延迟的原因是fullnat和real server建立连接的过程中，第一个syn包丢了或者没有送出来，才导致了这6秒的延时，那么为什么是6s呢，这得从fullnat代码中查看，经过代码搜索，终于找到了蛛丝马迹。&lt;br&gt;
在ip_vs_proto_tcp.c文件中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1158 int sysctl_ip_vs_tcp_timeouts[IP_VS_TCP_S_LAST + 1] = {&lt;br&gt;
1159     [IP_VS_TCP_S_NONE] = 2 * HZ,&lt;br&gt;
1160     [IP_VS_TCP_S_ESTABLISHED] = 90 * HZ,&lt;br&gt;
1161     [IP_VS_TCP_S_SYN_SENT] = 3 * HZ,&lt;br&gt;
1162     [IP_VS_TCP_S_SYN_RECV] = 30 * HZ,&lt;br&gt;
1163     [IP_VS_TCP_S_FIN_WAIT] = 3 * HZ,&lt;br&gt;
1164     [IP_VS_TCP_S_TIME_WAIT] = 3 * HZ,&lt;br&gt;
1165     [IP_VS_TCP_S_CLOSE] = 3 * HZ,&lt;br&gt;
1166     [IP_VS_TCP_S_CLOSE_WAIT] = 3 * HZ,&lt;br&gt;
1167     [IP_VS_TCP_S_LAST_ACK] = 3 * HZ,&lt;br&gt;
1168     [IP_VS_TCP_S_LISTEN] = 2 * 60 * HZ,&lt;br&gt;
1169     [IP_VS_TCP_S_SYNACK] = 30 * HZ,&lt;br&gt;
1170     [IP_VS_TCP_S_LAST] = 2 * HZ,&lt;br&gt;
1171 };&lt;/code&gt;&lt;br&gt;
1161行中的IP_VS_TCP_S_SYN_SENT代表了当fullnat和real server 的第一syn包发送失败以后超时重传的时间,如果synproxy在第二个三次握手时，第一个syn包发送失败或者被丢弃，重发的时间间隔为3s，这就解释了为什么是超时6s,估计是fullnat发送了3次syn包，但是前两次都丢弃了，或者fullnat前两个根本没有发包。从抓包的结果来看，fullnat确实没有发送前2个包，我们进一步在fullnat中打日志查看。在ip_vs_conn.c文件中，对超时的连接有处理：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;881 static void ip_vs_conn_expire(unsigned long data)&lt;br&gt;
 ...&lt;br&gt;
 901     /*&lt;br&gt;
 902      * Retransmit syn packet to rs.&lt;br&gt;
 903      * We just check syn_skb is not NULL, as syn_skb&lt;br&gt;
 904      * is stored only if syn-proxy is enabled.&lt;br&gt;
 905      */&lt;br&gt;
 906     spin_lock(&amp;amp;cp-&amp;gt;lock);&lt;br&gt;
 907     if (cp-&amp;gt;syn_skb != NULL &amp;amp;&amp;amp; atomic_read(&amp;amp;cp-&amp;gt;syn_retry_max) &amp;gt; 0) {&lt;br&gt;
 908         atomic_dec(&amp;amp;cp-&amp;gt;syn_retry_max);&lt;br&gt;
 909         if (cp-&amp;gt;packet_xmit) {&lt;br&gt;
 910             tmp_skb = skb_copy(cp-&amp;gt;syn_skb, GFP_ATOMIC);&lt;br&gt;
 911             cp-&amp;gt;packet_xmit(tmp_skb, cp, pp);&lt;br&gt;
 912         }&lt;br&gt;
 913         /* statistics */&lt;br&gt;
 914         IP_VS_INC_ESTATS(ip_vs_esmib, SYNPROXY_RS_ERROR);&lt;br&gt;
 915         spin_unlock(&amp;amp;cp-&amp;gt;lock);&lt;br&gt;
 916         goto expire_later;&lt;br&gt;
 917     }&lt;br&gt;
 918     spin_unlock(&amp;amp;cp-&amp;gt;lock);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以上的代码意思就是说，如果重发的次数没有超过最大重发次数（默认是3次），就进行重发。对packet_xmit函数进行了跟踪，发送在超时的时候，packet_xmit函数确实进行了调用，而且调用了成功了，但是抓包却没有抓到。因此估计是在fullnat下面的某个环节，内核把数据包给丢了，具体是在哪里丢的，由于涉及内核东西较多，我暂时还没有追踪。&lt;/p&gt;
&lt;h2&gt;改进方法&lt;/h2&gt;
&lt;p&gt;由于synproxy的第二个三次握手时，没有采用tcp的重传机制，而是采用了简单的3s重传机制，当有丢包时，会出现3s,6s，9s等不等的延迟。消除此现象的方式大概有几种：&lt;br&gt;
1，关掉synproxy，通过测试发现，关掉synproxy的情况会出现某些请求的等待，但出现的概率降低，同时等待的时间大都小于3s&lt;br&gt;
2，改造synproxy的重复机制，使其和tcp的重传机制一样，这也是小米目前采用的方式，修改如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;882 static void ip_vs_conn_expire(unsigned long data)&lt;br&gt;
 883 {&lt;br&gt;
 884     struct ip_vs_conn *cp = (struct ip_vs_conn *)data;&lt;br&gt;
 885     struct sk_buff *tmp_skb = NULL;&lt;br&gt;
 886     struct ip_vs_protocol *pp = ip_vs_proto_get(cp-&amp;gt;protocol);&lt;br&gt;
 887     /* fix synproxy timeout add by panxiaodong@xiaomi.com */&lt;br&gt;
 888     int retry_idx = 0;&lt;br&gt;
 ...&lt;br&gt;
 904     /*&lt;br&gt;
 905      * Retransmit syn packet to rs.&lt;br&gt;
 906      * We just check syn_skb is not NULL, as syn_skb&lt;br&gt;
 907      * is stored only if syn-proxy is enabled.&lt;br&gt;
 908      */&lt;br&gt;
 909     spin_lock(&amp;amp;cp-&amp;gt;lock);&lt;br&gt;
 910     if (cp-&amp;gt;syn_skb != NULL &amp;amp;&amp;amp; atomic_read(&amp;amp;cp-&amp;gt;syn_retry_max) &amp;gt; 0) {&lt;br&gt;
 911         atomic_dec(&amp;amp;cp-&amp;gt;syn_retry_max);&lt;br&gt;
 912         /* fix synproxy timeout add by panxiaodong@xiaomi.com */&lt;br&gt;
 913         retry_idx = sysctl_ip_vs_synproxy_syn_retry - atomic_read(&amp;amp;cp-&amp;gt;syn_retry_max);&lt;br&gt;
 914         cp-&amp;gt;timeout *= (1&amp;lt;&amp;lt;retry_idx);&lt;br&gt;
 915&lt;br&gt;
 916         if (cp-&amp;gt;packet_xmit) {&lt;br&gt;
 917             tmp_skb = skb_copy(cp-&amp;gt;syn_skb, GFP_ATOMIC);&lt;br&gt;
 918             cp-&amp;gt;packet_xmit(tmp_skb, cp, pp);&lt;br&gt;
 919         }&lt;/code&gt;&lt;br&gt;
 从测试效果来看，也能降低延迟等待，但是并不能消除此问题。&lt;br&gt;
 3，修改packet_xmit函数，从追踪的过程中，发现packet_xmit函数已经调用成功，但是包并没有真正发出，估计是内种某个过程丢了，packet_xmit发送宏如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;243 #define IP_VS_XMIT(pf, skb, rt)             \&lt;br&gt;
 244 do {                            \&lt;br&gt;
 245     (skb)-&amp;gt;ipvs_property = 1;           \&lt;br&gt;
 246     skb_forward_csum(skb);              \&lt;br&gt;
 247     NF_HOOK(pf, NF_INET_LOCAL_OUT, (skb), NULL, \&lt;br&gt;
 248         (rt)-&amp;gt;u.dst.dev, dst_output);       \&lt;br&gt;
 249 } while (0)&lt;/code&gt;&lt;br&gt;
 具体为什么会丢包，就不得知了，可以将NF_HOOK接口替换成更底层的发送接口，使用dev_queue_xmit函数可能能解决次问题，synproxy中就使用了此函数，但是我还没有去验证。&lt;/p&gt;
&lt;h2&gt;总结：&lt;/h2&gt;
&lt;p&gt;在fullnat使用过程中，出现顿卡的问题比较影响使用，采用方法二能够降低顿卡现象，但是没有完全解决。或许替换NF_HOOK能完全解决此问题，这个需要与 fullnat的作者[吴佳明等]沟通。测试过程中发现pps越高，顿卡现象越严重，在pps没有超过100w时，基本不会出现顿卡现象。后续会把fullnat在各种环境中的表现，总结一下，再分享出来。&lt;/p&gt;
            
</description>
        <pubDate>Mon, 14 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-14--p=1505-20610a66c.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-14--p=1505-20610a66c.html</guid>
        
        
      </item>
    
      <item>
        <title>Rex::Test::Spec 模块</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;上篇说了 serverspec 工具，我一直对 Rspec 的语法蛮有好感的，于是昨晚花了点时间模仿这个给 Rex 写了个类似的工具，叫 Rex::Test::Spec，源代码地址见：&lt;a href=&quot;https://github.com/chenryn/Rex--Test--Spec&quot;&gt;https://github.com/chenryn/Rex--Test--Spec&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;语法大概是这样的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rex::Test::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Nginx Test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nginx -t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nginx.conf testing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;stdout&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qr/ok/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/etc/nginx.conf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ensure&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;present&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qr/listen\s+80;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nginx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ensure&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;running&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nginx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ensure&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;present&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;version&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;1.5.8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;www&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;logrotate&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;192.168.0.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;www&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ensure&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;bind&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;proto&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;tcp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;command&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;nginx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;nginx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;command&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qr(nginx -c /etc/nginx.conf)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;mem&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is_deeply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;genmask&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$genmask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mss&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;irtt&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$irtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sysctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;vm.swapiness&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;www&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ensure&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;home&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/var/www/html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;shell&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/sbin/nologin&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;is_deeply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;belong_to&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;www&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;nogroup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;done_testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从 Rspec 学来的 context/describe/it/its 语法，保留了 Test::More 的 is/like/is_deeply/done_testing 语法。&lt;/p&gt;

&lt;p&gt;这里把 Test::More 里导入的指令都重载了，因为把 context 指令后面的资源类型通过 &lt;code&gt;local $msg&lt;/code&gt; 变量传递过来，就可以显示出来每个 &lt;code&gt;its&lt;/code&gt; 测试是什么资源类型的了。因为这个原因，指令导出的时候就没法用 &lt;code&gt;Exporter&lt;/code&gt; 模块，因为 Exporter 里的 import 函数没有 &lt;code&gt;no strict;no warnings&lt;/code&gt;。所以得自己写 import 函数导出。&lt;/p&gt;

&lt;p&gt;具体的资源类型，第一次学习了一下 AUTOLOAD 的用法。还是蛮好玩的~&lt;/p&gt;

&lt;p&gt;因为我是在 Mac 上写的代码，而 Rex 本身不怎么支持 Darwin 平台，所以源码里就测了一下 run 指令可用。欢迎大家帮忙补齐其他指令的测试用例，以及如何在 Rex 的 task 里通过 SSH 方式远程做这些测试（公司平台也没法让我做这个 SSH 测试）。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Tue, 08 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-08-rex-test-spec-7f1d6866c.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-08-rex-test-spec-7f1d6866c.html</guid>
        
        
      </item>
    
      <item>
        <title>Tomcat中配置SSL证书</title>
        <description>

  &lt;h3 id=&quot;section&quot;&gt;背景&lt;/h3&gt;
&lt;p&gt;由于移动设备经常访问连接各种不可靠的无线网络，用户密码被嗅探的风险比较大，因此对与敏感信息需要加密传输。 而 HTTPS 是一种相对成熟的方案。&lt;/p&gt;

&lt;p&gt;使用 HTTPS 协议用于移动应用的数据传输，随着App数量越来越多而显得更强烈。&lt;/p&gt;

&lt;p&gt;startssl.com 提供一个免费的 ssl 证书，个人测试使用应该没问题。&lt;/p&gt;

&lt;h3 id=&quot;startssl-&quot;&gt;从 startssl 获取私钥和证书&lt;/h3&gt;
&lt;p&gt;首先在 &lt;code&gt;startssl.com&lt;/code&gt; 注册帐号，根据提示操作，这个过程比较漫长。注意填写个人信息时要详细（至少看起来是真实的地址）。 注册的攻略在网上能看到很多。 备份个人证书，否则以后换台电脑就不能登录做管理操作了。&lt;/p&gt;

&lt;p&gt;帐号 Ready 后，根据提示创建域名的证书，这个步骤可以得到两个文件，分别是以 &lt;code&gt;.key&lt;/code&gt; 结尾的私钥文件和以 &lt;code&gt;.crt&lt;/code&gt; 为结尾的证书文件。保存好这两个文件，并记住私钥文件的密码备用。&lt;/p&gt;

&lt;p&gt;还需要另外两个文件分别是 &lt;a href=&quot;http://www.startssl.com/certs/ca.pem&quot;&gt;ca.pem&lt;/a&gt; 和 &lt;a href=&quot;http://www.startssl.com/certs/sub.class1.server.ca.pem&quot;&gt;sub.class1.server.ca.pem&lt;/a&gt;。下载备用。&lt;/p&gt;

&lt;p&gt;注：以下以域名 api.example.com 为例，实际使用请换成你自己的域名。&lt;/p&gt;

&lt;p&gt;现在的4个文件分别为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ssl.key&lt;/li&gt;
  &lt;li&gt;api.example.com.crt&lt;/li&gt;
  &lt;li&gt;ca.pem&lt;/li&gt;
  &lt;li&gt;sub.class1.server.ca.pem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tomcat--keystore-&quot;&gt;生成 tomcat 使用的 keystore 文件&lt;/h3&gt;

&lt;p&gt;Tomcat 支持两种模式的配置方式，分别是 &lt;code&gt;BIO&lt;/code&gt; 和 &lt;code&gt;NIO&lt;/code&gt; 使用 &lt;code&gt;JSSE&lt;/code&gt; 风格（使用 keystoreFile ）；&lt;code&gt;APR&lt;/code&gt;/&lt;code&gt;native&lt;/code&gt; 使用 &lt;code&gt;APR&lt;/code&gt; 风格（使用 SSLCertificateFile / SSLCertificateKeyFile 指定私钥和证书）。&lt;/p&gt;

&lt;p&gt;因为我们使用了 &lt;code&gt;NIO&lt;/code&gt; ，所以按照 &lt;code&gt;JSSE&lt;/code&gt; 风格配置，生成 keystore 文件。&lt;/p&gt;

&lt;p&gt;首先将 key 文件和 crt 文件合并导出为 &lt;code&gt;p12&lt;/code&gt; 。这个步骤需要输入私钥的密码，并指定一个新的导出密码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl pkcs12 -export -in ../api.example.com.crt -inkey ../ssl__.key \
    -out tomcat-startssl.p12 -name api.example.com -CApath ../
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后生成 keystore 文件，需要输入上一步的导出密码，及指定新的 keystore 密码，后面几步的导入需要用到这个密码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -importkeystore -srckeystore tomcat-startssl.p12 -srcstoretype PKCS12 \
    -destkeystore startssl-api.example.com.jks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入 startssl 的 CA&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -keystore startssl-api.example.com.jks -import -trustcacerts \
    -alias startcom.ca -file ../ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入 startssl 的 sub1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -keystore startssl-api.example.com.jks -import -trustcacerts \
    -alias startcom.ca.sub1 -file ../sub.class1.server.ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在已经生成了一个可用的 &lt;code&gt;startssl-api.example.com.jks&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;tomcat&quot;&gt;配置 tomcat&lt;/h3&gt;

&lt;p&gt;在 tomcat 的server.xml中找到相关的 Connector 部分，这部分默认已被注释掉，去掉注释并调整内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Connector SSLEnabled=&quot;true&quot; acceptCount=&quot;100&quot; clientAuth=&quot;false&quot;
    disableUploadTimeout=&quot;true&quot; enableLookups=&quot;false&quot; maxThreads=&quot;25&quot;
    port=&quot;8443&quot; keystoreFile=&quot;/etc/tomcat/startssl-api.example.com.jks&quot; keystorePass=&quot;passw0rd&quot;
    protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; scheme=&quot;https&quot;
    secure=&quot;true&quot; sslProtocol=&quot;TLS&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启 tomcat，访问 8443 端口试试。点击浏览器地址栏网址左侧的验证标志，可以检验证书的内容。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;通过简单的配置，将服务有 http 迁移到更安全的 https 服务。&lt;/p&gt;

&lt;p&gt;补充1： 本文的方法因为偷懒直接使用了 startssl 来为我们管理私钥文件，从安全的角度，大部分情况下我们应该自己保管这个文件。&lt;/p&gt;

&lt;p&gt;补充2： 现在部署 HTTPS 更好的方式是用 Nginx 做 &lt;code&gt;SSL offloading&lt;/code&gt; ，而实际的业务服务器仍然使用 HTTP 提供服务。&lt;/p&gt;

&lt;p&gt;补充3： startssl 个人使用没问题，如果是企业使用，建议购买有商业支持的证书。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;参考文档&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;http://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html&lt;/li&gt;
&lt;/ul&gt;

  

</description>
        <pubDate>Sat, 05 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-05-2014-07-05-startssl-in-tomcat.html-163c9be4f.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-05-2014-07-05-startssl-in-tomcat.html-163c9be4f.html</guid>
        
        
      </item>
    
      <item>
        <title>[火光摇曳]神奇的伽玛函数(下)</title>
        <description>

						&lt;p&gt;原文链接： &lt;a href=&quot;http://www.flickering.cn/?p=203&quot;&gt;http://www.flickering.cn/?p=203&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、$ \Gamma(n) = (n-1)!$ 还是 $ \Gamma(n) = n! $ ? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;伽玛函数找到了，我们来看看第二个问题，为何伽玛函数被定义为满足 $\Gamma(n)=(n-1)!$？ 这看起来挺别扭的，如果我们稍微修正一下，把伽玛函数定义中的 $t^{x-1}$ 替换为 $t^x$&lt;br&gt;
$$ \Gamma(x) = \int_0^{\infty} t^{x}e^{-t}dt , $$&lt;br&gt;
这不就可以使得 $\Gamma(n)=n!$了嘛。估计数学界每年都有学生问这个问题，然而答案却一直有一些争议。&lt;/p&gt;
&lt;p&gt;欧拉最早的伽玛函数定义还真是如上所示，选择了$\Gamma(n)=n!$，事实上数学王子高斯在研究伽玛函数的时候， 一直使用的是如下定义：&lt;br&gt;
$$ \Pi(x)=\int_{0}^\infty t^x e^{-t}\,dt ,$$&lt;br&gt;
然而这个定义在历史上并没有流传开来。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-176 aligncenter&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/Legendre.jpg&quot; alt=&quot;Legendre&quot; width=&quot;160&quot; height=&quot;200&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;勒让德肖像水彩画&lt;/p&gt;
&lt;p&gt;欧拉在伽玛函数的推导中实际上引入了两类积分形式&lt;br&gt;
$$ \int_0^1 t^{x}(1-t)^{y}dt, \quad \quad \int_0^{\infty} t^{x}e^{-t}dt $$&lt;br&gt;
现在我们分别称为欧拉一类积分和欧拉二类积分。勒让德追随欧拉的脚步，发表了多篇论文对欧拉积分进行了深入的研究和推广，不过在勒让德的研究中，对积分中的参数做了 $-1$的移位修改，主要定义为&lt;br&gt;
$$ B(x, y) = \int_0^1 t^{x-1}(1-t)^{y-1}dt $$&lt;br&gt;
和&lt;br&gt;
$$ \Gamma(x) = \int_0^{\infty} t^{x-1}e^{-t}dt .$$&lt;br&gt;
$B(x,y)$ 现在称为贝塔积分或者贝塔函数。其中$\Gamma(x)$ 的这个定义选择导致了 $ \Gamma(n) = (n-1)!$ 。实际上伽马函数中的$\Gamma$符号历史上就是勒让德首次引入的，而勒让德给出的这个伽玛函数的定义在历史上起了决定作用，该定义被法国的数学家广泛采纳并在世界范围推广，最终使得这个定义在现代数学中成为了既成事实。&lt;br&gt;
&lt;span id=&quot;more-6656&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;什么原因驱使勒让德偏向选择$\Gamma(n) = (n-1)!$ 的定义呢？ 这成为了一个谜，没有明确的解释。 不过有数学史研究者们对欧拉的研究表明，在$1730\sim1768$ 年之间欧拉自己在研究一类积分的时候，实际上就已经对积分中的参数做了$-1$的移位修改，从而明确的引入了贝塔积分，而这个修改显然被勒让德注意到了。 是什么原因使得欧拉和勒让德在研究他们的积分形式的时候都考虑引入$-1$ 移位修改呢？ 有数学家猜测一个可能的原因是这两位数学家注意到，如果按照现代伽玛函数的定义，那么有&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{beta-gamma-decompose}&lt;br&gt;
B(x,y) = \frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)} ,&lt;br&gt;
\end{equation}&lt;br&gt;
$B(x,y)$ 具有非常漂亮的对称形式。可是如果选取高斯给出的 $\Pi(n)=n!$ 的定义，令&lt;br&gt;
$$ E(x, y) = \int_0^1 t^{x}(1-t)^{y}dt $$&lt;br&gt;
则有&lt;br&gt;
$$ E(x,y) = \frac{\Pi(x)\Pi(y)}{\Pi(x+y+1)} ,$$&lt;br&gt;
这个形式显然不如 $B(x,y)$ 具有对称美，而数学家总是很在乎数学公式的美感的。&lt;/p&gt;
&lt;p&gt;还有一个类似的解释是从抽象代数的角度提出的，考虑伽玛分布的概率密度函数&lt;br&gt;
$$ f_\alpha(x)= \left\{&lt;br&gt;
\begin{aligned}&lt;br&gt;
\frac{x^{\alpha-1} e^{-x}}{\Gamma(\alpha)} &amp;amp; \text{for }x&amp;gt;0&lt;br&gt;
\\ 0 \quad \quad &amp;amp; \text{for }x &amp;lt; 0&lt;br&gt;
\end{aligned}&lt;br&gt;
\right.&lt;br&gt;
$$&lt;br&gt;
形成的集合 $\{f_\alpha : \alpha &amp;gt; 0\}$,那么该集合在卷积运算 $*$ 之下构成一个抽象代数中的半环，即满足&lt;br&gt;
$$ f_\alpha * f_\beta = f_{\alpha+\beta} .$$&lt;br&gt;
而用$\Pi(x)$ 的定义则无法得到类似的结果。&lt;/p&gt;
&lt;p&gt;另外一个更具启发性的解释是也是从抽象代数角度描述的。 对伽玛函数&lt;br&gt;
$$ \Gamma(x) = \int_0^{\infty} e^{-t}t^{x-1}dt $$&lt;br&gt;
做一个线性变换 $h: t \rightarrow ct$，可以得到如下函数&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{generalized-gamma}&lt;br&gt;
\frac{\Gamma(x)}{c^x} = \int_0^{\infty} e^{-ct} t^x \frac{dt}{t}&lt;br&gt;
\end{equation}&lt;br&gt;
由此 $dt/t = d \log t$ 可以被看成是乘法群 $(0, \infty)$ 上的一个不变测度，在尺度伸缩变换下满足不变性：&lt;br&gt;
$$ \frac{d(ct)}{ct} = \frac{dt}{t} .$$&lt;br&gt;
而 $e^{-ct}$ 对应于群上的一个加法特征(additive character) $f$， 满足&lt;br&gt;
$$f(t+s) =f(t) \cdot f(s) ,$$&lt;br&gt;
$t^x$ 对应于群上的一个乘法特征(mulpicative character) $g$， 满足&lt;br&gt;
$$g(t \cdot s) = g(t) \cdot g(s) .$$&lt;br&gt;
由于积分表示的是求和， 所以\eqref{generalized-gamma} 式 被看成是乘法群 $(0, \infty)$ 上加法特征和乘法特征混合乘积的累积求和。有了这个分解，只要在抽象代数的有限域上定义了$f$ 和$g$ 这两个映射， 实数域上定义的$\frac{\Gamma(x)}{c^x}$ 函数就可以被推广到有限域上进行定义，只是无限求和的积分号变成了有限求和符号$\Sigma$ 。 进一步，借用贝塔函数和伽玛函数满足的关系式\eqref{beta-gamma-decompose}, $Beta(x,y)$ 也可以完全类似的在有限域中定义出来， 而这种推广也将变得具有简洁的对称美。当然，这个理由和欧拉、勒让德的选择无关，而是现代数学家们给出的一个额外的解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、伽玛函数欣赏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;伽玛函数从它诞生开始就被许多数学家追逐研究，包括高斯、勒让德、威尔斯特拉斯、柳维尔等等，数学家们发现了这个函数大量的奇特性质，在解决许多数学问题的时候是一把利器。伽玛函数作为阶乘的推广，首先它也满足如下的斯特林公式&lt;br&gt;
$$ \Gamma(x) \approx \sqrt{2\pi}e^{-x}x^{x-\frac{1}{2}} .$$&lt;br&gt;
另外， 伽玛函数不仅可以定义在实数集上，基于复变函数的理论还可以延拓到整个复平面上。所以我们不仅可以计算$ (\frac{1}{2})!, (-7.5)!$，我们甚至可以计算 $(\frac{1}{2} + \frac{1}{3}i)!$，阶乘的概念居然可以推广到虚数，这真是太神奇了！&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/gamma-complex.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-209&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/gamma-complex-300x216.png&quot; alt=&quot;gamma-complex&quot; width=&quot;300&quot; height=&quot;216&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;复平面上的伽玛函数&lt;/p&gt;
&lt;p&gt;欧拉把$n!$ 推广之后得到了伽玛函数，很自然的一个问题是：伽玛函数是$n!$的唯一的插值推广函数吗？ 当然不是，丹尼尔·贝努利最早的无穷乘积推广就已经说明了存在多种推广延拓的方式。譬如$f(x) = \Gamma(x) \cos (2n\pi)$ 这个函数显然也满足把 $n!$ 延拓到实数集。 那伽玛函数在延拓 $n!$ 的时候有什么特殊的地方呢？ 从伽玛函数的图像我们可以看到它是一个凸函数，所以我们很自然地会问伽玛函数是否是唯一的满足凸性的阶乘函数，可是答案还是否定的。 那伽马函数为什么鹤立鸡群呢？数学家们发现不仅 $\Gamma(x)$ 是一个凸函数， $\log\Gamma(x)$ 也是一个凸函数，数学上可以证明如下定理:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Bohr-Mullerup 定理]&lt;/strong&gt; 如果 $f:(0,\infty)\rightarrow (0,\infty)$,且满足&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; $f(1) = 1$&lt;/li&gt;
&lt;li&gt; $f(x+1) = xf(x)$&lt;/li&gt;
&lt;li&gt; $\log f(x)$ 是凸函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么 $f(x) = \Gamma(x)$, 也就是 $\Gamma(x)$是唯一满足以上条件的函数。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/digamma-func.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-208&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/digamma-func-300x233.png&quot; alt=&quot;digamma-func&quot; width=&quot;300&quot; height=&quot;233&quot;&gt;&lt;/a&gt;&lt;br&gt;
\$\log \Gamma(x)$ 是一个凸函数&lt;/p&gt;
&lt;p&gt;伽玛函数有不少等价的表示形式和神奇的结果。高斯给出的伽玛函数的形式是&lt;br&gt;
$$ \Gamma(x) = \lim_{n\rightarrow\infty} \frac{n^x n!}{x(x+1)(x+2)\cdots(x+n)} .$$&lt;br&gt;
欧拉证明了如下一个漂亮的反射公式&lt;br&gt;
$$ \Gamma(x) \Gamma(1-x) = \frac{\pi}{\sin (\pi x)} .$$&lt;br&gt;
维尔斯特拉斯把高斯的伽玛函数形式做一下变换，就得到如下表达为无穷乘积的结果&lt;br&gt;
$$ {\Gamma(x)} = \frac{1}{xe^{\gamma x}} \prod_{k=1}^\infty&lt;br&gt;
\frac{e^{\frac{x}{k}}} {1+\frac{x}{k}} .$$&lt;br&gt;
此处 $\gamma = 0.5772156649\cdots$ 为欧拉常数。这个结果在复平面上也成立。由于伽玛函数的这个分解形式的启发，导致维尔斯特拉斯发现复平面上任意整函数$f(z)$ 都以分解为无穷乘积形式。基于维尔斯特拉斯的这个无穷乘积形式和欧拉的反射公式，分别整理简化一下 $\Gamma(1+x)\Gamma(1-x)$，就可以轻松地得到介绍沃利斯公式的时候中提到的 $\sin x$ 的无穷乘积展开式。&lt;/p&gt;
&lt;p&gt;伽玛函数还有很多妙用，它能扩展一些重要的数学概念，譬如导数。我们可以定义一阶、二阶等整数阶导数，所以一个自然的问题是：我们能定义分数阶的导数吗？ 这个问题早年莱布尼茨研究微积分的时候他就提出来过，然而没有获得实质性进展。而欧拉给出了伽玛函数之后，也研究过分数阶导数的问题。我们观察一下函数$f(x) = x^n$ 的各阶导数&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/derivatives.png&quot;&gt;&lt;img class=&quot;wp-image-216  aligncenter&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/derivatives-1024x420.png&quot; alt=&quot;derivatives&quot; width=&quot;524&quot; height=&quot;215&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于k阶导数可以用阶乘表达，于是我们用伽玛函数表达为&lt;br&gt;
$$ f(x)^{(k)} = \frac{\Gamma{(n+1)}}{\Gamma{(n-k+1)}} x^{n-k} $$&lt;br&gt;
基于上式，可以把导数的阶从整数延拓到实数集。例如，取$n=1, k=\frac{1}{2}$ 我&lt;br&gt;
们可以计算 $x$ 的 $\frac{1}{2}$阶导数为&lt;br&gt;
$$ f(x)^{(\frac{1}{2})} = \frac{\Gamma{(1+1)}}{\Gamma{(1-1/2+1)}} x^{1-1/2}&lt;br&gt;
= \frac{2\sqrt{x}}{\sqrt{\pi}} .$$&lt;br&gt;
很容易想到对于一般的函数 $f(x)$ 通过泰勒级数展开可以表达为幂级数，于是借用 $x^n$ 的分数阶导数，我们可以尝试定义出任意函数的分数阶导数。不过有点遗憾的是这种简单的基于泰勒级数的定义方法不是良定义的，并非对所有函数都适用，但是这个思想却给后来的数学家提供了重要的线索，并由此发展了数学分析中的一个研究课题： Fractional Calculus。 在这种微积分中，分数阶的导数是具有良定义的，而积分作为导数的逆运算，也可以有分数阶。 这听起来真是很神奇，而这一切都要归功于伽玛函数。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/n-dim-ball.jpg&quot;&gt;&lt;img class=&quot;size-medium wp-image-177 aligncenter&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/n-dim-ball-300x200.jpg&quot; alt=&quot;n-dim-ball&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;&lt;/a&gt;&lt;br&gt;
n 维球的体积&lt;/p&gt;
&lt;p&gt;伽马函数还有一个奇妙的运用是求高维空间中球的体积。我们知道 二维球是圆；其面积为 $\pi r^2$，三维球的体积为 $\frac{4}{3} \pi r^3$，那$n$维空间中半径为$r$的球的体积如何计算呢？ 数学上这个体积应该是如下多重积分&lt;br&gt;
$$ \displaystyle V_n(r) = \idotsint\limits_{ \tiny \{(x_1, \cdots, x_n) | \sum x_i^2 &amp;lt; r^2 \} } 1 \quad dx_1dx_2 \cdots dx_n $$&lt;br&gt;
可以证明&lt;br&gt;
$$ V_n(r) = \frac{\pi^{\frac{n}{2}} r^n}{\Gamma(\frac{n}{2} + 1)} .$$&lt;/p&gt;
&lt;p&gt;下面我们来说一说伽玛函数和数论的关系。 伽玛函数和欧拉常数$\gamma$ 有密切关系，可以发现&lt;br&gt;
$$ \gamma = -\frac{d\Gamma(x)}{dx}|_{x=1} =&lt;br&gt;
\lim_{n\rightarrow \infty}(1+\frac{1}{2} + \frac{1}{3}+\cdots+\frac{1}{n} – \log n) $$&lt;br&gt;
欧拉常数$\gamma$ 是一个神奇的常数，数学家们至今也没搞清楚它是一个有理数还是一个无理数。进一步还可以发现伽玛函数和黎曼$\zeta(s)$函数&lt;br&gt;
$$ \zeta(s) = 1+\frac{1}{2^s} + \frac{1}{3^s} + \cdots $$&lt;br&gt;
有密切联系，黎曼发现了如下式子&lt;br&gt;
$$ \zeta(x) \Gamma(x) = \int_0^\infty \frac{u^{x-1}}{e^u – 1} du ,$$&lt;br&gt;
$$ \zeta(x) = \zeta(1-x) \Gamma(1-x) 2^s \pi^{s-1} \sin\left(\frac{\pi x}{2}\right) .$$&lt;br&gt;
$\zeta$ 函数在解析数论中可是有着举足轻重的地位，因为它涉及了数学中著名的素数分布定理和黎曼猜想，而以上两个式子在分析黎曼猜想过程中有重要作用。数学家蒙哥马利有一句名言：“假如你是一个魔鬼，引诱数学家用自己的灵魂来换取一个定理的证明。多数数学家会想要换取的会是什么定理呢，我想会是黎曼猜想。” 而希尔伯特曾说过，如果他在沉睡1000年后醒来, 他将问的第一个问题便是：黎曼猜想得到证明了吗？&lt;/p&gt;
&lt;p&gt;前面提到了 $\log\Gamma(x)$ 是一个凸函数。对这个函数求导得到的函数&lt;br&gt;
$$ \Psi(x) = \frac{d\log\Gamma(x)}{dx} $$&lt;br&gt;
被称为 Digamma 函数，可以证明&lt;br&gt;
$$\Psi(x) = -\gamma + (x-1) – \frac{(x-1)(x-2)}{2\cdot 2!}&lt;br&gt;
+ \frac{(x-1)(x-2)(x-3)}{3\cdot 3!} \cdots $$&lt;br&gt;
这也是一个很重要的函数，具有如下一个漂亮的性质&lt;br&gt;
$$ \Psi(x+1) = \Psi(x) + \frac{1}{x} .$$&lt;br&gt;
函数$\Psi(x)$和欧拉常数$\gamma$ 以及 $\zeta$ 函数都有密切关系，令&lt;br&gt;
$$ \Psi_n(x) = \frac{d^{n+1}\log\Gamma(x)}{dx^{n+1}} ,$$&lt;br&gt;
可以证明&lt;br&gt;
$$\Psi_1(x) = \frac{d^{2}\log\Gamma(x)}{dx^{2}}&lt;br&gt;
= \frac{1}{x^2} + \frac{1}{(x+1)^2} + \frac{1}{(x+2)^2} + \cdots .$$&lt;br&gt;
对于几个具体的数值，有如下漂亮的结果&lt;br&gt;
$$\Psi(1) = -\gamma, \quad \quad \Psi(2) = 1-\gamma $$&lt;br&gt;
$$\Psi_1(1) = \zeta(2) = 1 + \frac{1}{2^2} + \frac{1}{3^2} + \frac{1}{4^2} + \cdots&lt;br&gt;
= \frac{\pi^2}{6} $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;七、随机数学中的伽马函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;伽玛函数在概率统计中频繁现身，众多的统计分布，包括常见的统计学三大分布($t$ 分布，$\chi^2$ 分布，$F$ 分布)、贝塔分布、狄利克雷分布的密度公式中都有伽玛函数的身影。当然发生最直接联系的概率分布是直接由伽玛函数变换得到的伽玛分布。对伽玛函数的定义做一个变形，就可以得到如下式子&lt;br&gt;
$$ \int_0^{\infty} \frac{x^{\alpha-1}e^{-x}}{\Gamma(\alpha)}dx = 1 .$$&lt;br&gt;
于是，取积分中的函数作为概率密度，就得到一个形式最简单的伽玛分布的密度函数&lt;br&gt;
$$Gamma(x|\alpha) = \frac{x^{\alpha-1}e^{-x}}{\Gamma(\alpha)} .$$&lt;br&gt;
如果做一个变换 $x=\beta t$, 就得到伽玛分布的更一般的形式&lt;br&gt;
$$Gamma(t|\alpha, \beta) = \frac{\beta^\alpha t^{\alpha-1}e^{-\beta t}}{\Gamma(\alpha)} .$$&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/gamma-distribution.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-210&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/gamma-distribution-300x228.png&quot; alt=&quot;gamma-distribution&quot; width=&quot;300&quot; height=&quot;228&quot;&gt;&lt;/a&gt;&lt;br&gt;
$Gamma(t|\alpha,\beta)$分布图像&lt;/p&gt;
&lt;p&gt;伽玛分布在概率统计领域也是一个万人迷，众多统计分布和它有密切关系。指数分布和 $\chi^2$ 分布都是特殊的伽玛分布。另外伽玛分布是一个很强大的先验分布，在贝叶斯统计分析中被广泛的用作其它分布的先验。如果把统计分布中的共轭关系类比为人类生活中的情侣关系的话，那指数分布、泊松分布、正态分布、对数正态分布都可以是伽玛分布的情人。&lt;/p&gt;
&lt;p&gt;接下来的内容中我们主要关注$\beta = 1$的简单形式的伽玛分布。伽玛分布首先和泊松分布发生密切的联系。我们容易发现伽玛分布的概率密度和泊松分布在数学形式上具有高度的一致性。参数为$\lambda$的泊松分布，概率写为&lt;br&gt;
$$Poisson(X=k|\lambda) = \frac{\lambda^k e^{-\lambda}}{k!} $$&lt;br&gt;
在伽玛分布的密度中取 $\alpha = k+1$ 得到&lt;br&gt;
$$ Gamma(\lambda|\alpha=k+1)&lt;br&gt;
= \frac{\lambda^ke^{-\lambda}}{\Gamma(k+1)}= \frac{\lambda^k e^{-\lambda}}{k!} $$&lt;br&gt;
所以这两个分布的数学形式具有高度的一致性，只是泊松分布是离散的，伽玛分布是连续的。这种数学上的一致性是偶然的吗？ 事实上，从泊松分布出发，可以利用一个简单的概率物理模型对伽玛分布的密度函数给出清晰的解释。&lt;/p&gt;
&lt;p&gt;泊松分布可以用于描述一段时间内事件发生次数的统计性质，譬如接到的电话的次数。假设我们关心的不是一段有限的时间，而是 $(0, \infty)$ 整个时间轴上接到电话的统计性质，应该如何来描述呢？我们可以假设接到的电话满足如下性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概率在时间轴是独立均匀分布的，即每个等长的时间区间上是否接到电话是独立的，并且概率分布一样；每一个长度为h的充分小的时间片上接到一个电话的概率正比于时间片的长度；&lt;/li&gt;
&lt;li&gt;每一个充分小时间片上最多只能接到一个电话。&lt;/li&gt;
&lt;li&gt;平均而言，假设每个长度为1的单位时间片上接到电话个数是1；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果我们考察 $[0, \lambda]$ 这个时间区间，那么平均而言，这个长度为 $\lambda$ 的时间片上应该接到 $\lambda$ 个电话，把这个时间区间分成 $n$ 个独立的小片，那么每个时间片上接到一个电话的概率恰好是 $p = \lambda/n$。当$n$ 足够大的时候，每个时间片上只能是接到一个电话或者没有接到电话，恰好对应于成功概率为$p$ 的一个贝努利实验，于是$n$ 个时间片对应于$n$ 个独立的贝努利实验，所以 $[0, \lambda]$这个时间区间上接到的电话总数$X$ 应该符合二项分布&lt;br&gt;
$$p(X=k) = \binom{n}{k} p^k(1-p)^{n-k} .$$&lt;br&gt;
由于 $np= \lambda$, 于是 $n$ 趋向于无穷的时候，粒子个数$X$将满足参数为&lt;br&gt;
$\lambda$ 的泊松分布&lt;br&gt;
$$p(X=k) = \frac{\lambda^k e^{-\lambda}}{k!} .$$&lt;/p&gt;
&lt;p&gt;熟悉随机过程理论的读者马上会发现以上模型实际上是参数为1 的泊松过程。 我们关心的问题是：什么时候会接到第${k+1}$ 个电话？或者说接到第$k+1$ 个电话的时间点 $Y_{k+1}$ 会是什么概率分布？ 形式化的描述就是如何计算如下的概率？&lt;br&gt;
$$ P(\lambda &amp;lt; Y_{k+1} \le \lambda + d\lambda) = ? $$&lt;br&gt;
上式表明第$k+1$ 个电话落在长度为 $d\lambda$ 的区间 $(\lambda, \lambda + d\lambda] $ 内，这个概率事件可以分解为两个独立事件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;区间 $(\lambda, \lambda + d\lambda] $ 内接到一个电话，这个概率是 $d \lambda$&lt;/li&gt;
&lt;li&gt;区间 $[0, \lambda]$ 内接到了前$k$ 个电话，这个概率是 &lt;span style=&quot;line-height: 1.5;&quot;&gt;$$ p(X=k) = \frac{\lambda^k e^{-\lambda}}{k!} .$$&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是所求的概率是以上两个事件概率相乘，即&lt;br&gt;
$$ P(\lambda &amp;lt; Y_{k+1} \le \lambda + d\lambda) = p(X=k) \cdot d \lambda .$$&lt;br&gt;
由于第$k+1$ 个电话必然出现在时间轴上某处，所以把时间轴所有无穷小区间上的概率累加起来，正好对应于必然事件的概率1，所以有&lt;br&gt;
$$ \int_0^\infty p(X=k) \cdot d \lambda = 1 $$ 把$P(X=k)$ 带入上式即可得到&lt;br&gt;
$$ \int_0^\infty \frac{\lambda^k e^{-\lambda}}{k!} d \lambda = 1 $$&lt;br&gt;
$$ k! = \int_0^\infty \lambda^k e^{-\lambda} d \lambda $$&lt;br&gt;
上述两式整好就对应于伽玛分布和伽玛函数。所以$Y_{k+1}$ 恰好符合伽玛分布。 我们其实从泊松分布出发，完全基于概率物理模型，推导出了伽玛函数，而推导的过程也同时给伽玛分布的密度函数提供了物理解释。&lt;/p&gt;
&lt;p&gt;如果我们把伽玛函数和$e^\lambda$的泰勒展开式对照写成如下形式&lt;br&gt;
\begin{align} e^\lambda &amp;amp; = \sum_{k=0}^{\infty} {\lambda^k \over k!} \\&lt;br&gt;
k! &amp;amp; = \int_0^{\infty} {\lambda^k \over e^\lambda}\ d\lambda.&lt;br&gt;
\end{align}&lt;br&gt;
我们发现这两个式子形式上具有对偶关系。由于 $\sum$ 和$\int$ 都表示求和， 几乎可以认为从第一个式子只是把 $e^\lambda$ 和 $k!$ 交换一下就得到了第二个式子。 这两个式子之间有更多的内在联系吗？事实上有如下一个奇妙的等式成立 \begin{equation} \label{gamma-e-taylor} \frac{1}{k!} \int_0^\lambda \frac{\lambda^k}{e^\lambda} d\lambda + \frac{1}{e^\lambda} \sum_{n=0}^k \frac{\lambda^n}{n!} = 1&lt;br&gt;
\end{equation}&lt;br&gt;
用上面描述的泊松过程的物理模型，可以很容易的证明这个等式。我们把数轴分成 $(0, \lambda]$ 和 $(\lambda, \infty)$ 这两个区间，考察第$k+1$ 个电话接到时间 $Y_{k+1}$ 分别落在这两个区间的概率，当然有 $$ P(Y_{k+1} \le \lambda) + P(Y_{k+1} &amp;gt; \lambda) = 1 $$&lt;br&gt;
按照上述的物理模型，显然第$k+1$ 个电话的时间落入$(0, \lambda]$ 的概率为&lt;br&gt;
$$ P(Y_{k+1} \le \lambda) = \int_0^\lambda \frac{\lambda^k e^{-\lambda}}{k!} d \lambda $$&lt;br&gt;
如果第$k+1$ 个电话的时间点落入 $(\lambda, \infty)$，这个事件等价地可以理解为 $(0, \lambda]$ 上的电话个数不能超过 $k$ 个，由于$(0, \lambda]$ 这个有限时间区间上的电话次数符合参数为$\lambda$ 的泊松分布， 所以这个概率为&lt;br&gt;
$$ P(Y_{k+1} &amp;gt; \lambda) = \sum_{n=0}^k \frac{\lambda^n e^{-\lambda} }{n!} $$&lt;br&gt;
所以我们得到&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{poisson-gamma-dual}&lt;br&gt;
\int_0^\lambda \frac{\lambda^k e^{-\lambda}}{k!}d\lambda&lt;br&gt;
+ \sum_{n=0}^k \frac{\lambda^n e^{-\lambda}}{n!} = 1&lt;br&gt;
\end{equation}&lt;br&gt;
这个式子俗称泊松-伽玛对偶，简单整理一下就是 \eqref{gamma-e-taylor} 式。&lt;/p&gt;
&lt;p&gt;由于泊松分布可以看做是二项分布的极限分布，所以我们也可以从二项分布的角度对伽马分布进行解释。由于&lt;br&gt;
$$ e^{-\lambda} = \lim_{n\rightarrow \infty} (1- \frac{\lambda}{n}) ^n $$&lt;br&gt;
所以伽马分布的概率密度可以重写为&lt;br&gt;
\begin{align*}&lt;br&gt;
\frac{\lambda^k e^{-\lambda}}{k!}&lt;br&gt;
&amp;amp; = \lim_{n\rightarrow \infty} \frac{\lambda^k (1-\frac{\lambda}{n}) ^n}{k!} \\&lt;br&gt;
&amp;amp; = \lim_{n\rightarrow \infty} \frac{ n! n^k (\frac{\lambda}{n})^k (1-\frac{\lambda}{n}) ^n}{k! \cdot n!} \\&lt;br&gt;
&amp;amp; = \lim_{n\rightarrow \infty} \frac{(n+k)!}{k!\cdot n!} (\frac{\lambda}{n})^k (1-\frac{\lambda}{n}) ^n \\&lt;br&gt;
&amp;amp; = \lim_{n\rightarrow \infty} \binom{n+k}{k} (\frac{\lambda}{n})^k (1-\frac{\lambda}{n}) ^n&lt;br&gt;
\end{align*}&lt;br&gt;
显然上式具有明确的二项分布的物理含义。事实上，二项分布和贝塔分布之间也存在完全类似\eqref{poisson-gamma-dual} 的一个等式：&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{binomial-beta-dual}&lt;br&gt;
\frac{n!}{k!(n-k-1)!} \int_0^p t^k(1-t)^{n-k-1} dt + \sum_{v=0}^k \binom{n}{v} p^v(1-p)^{n-v} = 1&lt;br&gt;
\end{equation}&lt;br&gt;
如果我们知道$n\rightarrow\infty$时上式中二项分布的极限是泊松分布，而贝塔分布的极限是伽玛分布，那么就很容易理解 \eqref{poisson-gamma-dual} 其实可以看做是 \eqref{binomial-beta-dual} 的极限形式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;八、结语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作家海明威说：“冰山运动之雄伟壮观，是因为它只有八分之一在水面上。”阶乘，这么一个简单的基于整数的数学概念，俨然是一座冰山，我们日常看到的只是它浮在水面上的一角。而数学家们眼光犀利，看出这座山并非只有整数的一角，他们逐步地深入挖掘探索，挖出了神奇的伽马函数，把深藏在冰山下的实数域、复数域、甚至有限域都给挖了出来。而挖掘出来的伽玛函数真是一个魔术师，它跨越了人们的直觉想象，使得许多数学概念能够神奇地从整数延拓到分数；而伽玛函数同时又在现代数学的各个分支中表演着自己的神奇技艺。有许多人认为数学的概念是静态的：这些数学概念产生于历史上某一个时刻，某一位数学大家之手，之后就几乎一成不变了。对于大多数非数学专业的人而言，这种感觉貌似很自然，毕竟普通读者所接触的几何、代数、微积分这些数学知识都已经体系成熟，存在了几百甚至上千年。 然而数学的发展其实是先有探索的阶段，然后才有逻辑与体系，只是我们的数学课本历来偏重后者而忽视前者。而如果我们对数学知识的探索过程有所了解的话，会发现这些探索也犹如冰山掩藏在水面之下的部分，甚至比露出的尖角还更具魅力。&lt;/p&gt;
&lt;p&gt;台湾的数学教授蔡聪明先生在数学的科普传播方面写过大量的文章，他在《数学的发现趣谈》一书中对于数学的创造、发现与发展有一段精彩的论述：“如果你不知道一个定理（或公式）是怎样发现的，那么你对它并没有真正的了解，因为真正的了解必须从逻辑因果掌握到创造的心理因果。一个定理的诞生，基本上跟一粒种子在适当的土壤、风雨、阳光、气候 … 之下，发芽成一颗树，再开花结果，并没有两样。”本文尝试尽可能的呈现伽玛函数这颗数学之树的生长历程，可以说伽玛函数的种子最早是沃利斯播下的，欧拉给予了最好的施肥、灌溉使得种子发芽，而后来众多数学家们的努力使得这颗嫩芽茁壮成长，最终几乎成长为一颗参天大树。&lt;/p&gt;
&lt;p&gt;伽玛函数这颗大树在现代数学中如此繁茂，笔者知识有限仅能描绘它很有限的一部分。这个函数在数学上魅力独特，不仅能够被一个理科本科生很好的理解，它本身又足够的深刻，具有很多漂亮的数学性质，历史上吸引了众多一流的数学家对它进行探索研究。美国数学家 Philip J.Davis 在1959年在《美国数学月刊》上发表了一篇很有名的介绍伽玛函数的文章，文中对伽玛函数一些特性发现的历史进行了详细的描述，这篇文章获得了 Chauvenet Prize (美国数学会颁发的数学科普奖)。 他在文中最后总结道：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Each generation has found something of interest to say about the gamma function. Perhaps the next generation will also. (每一代人都发现了一些伽马函数的有趣性质，也许下一代人也会有所发现。)&lt;/em&gt;&lt;br&gt;
—Philip J.Davis&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;九、推荐阅读&lt;/strong&gt;&lt;br&gt;
如果希望了解更多阶乘研究以及伽玛函数相关的历史，推荐阅读如下文献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蔡聰明, 瓦里斯尋$\pi$ 的發現理路,科学月刊, 27(4) 1996&lt;/li&gt;
&lt;li&gt;蔡聰明, 瓦里斯公式及其相關的結果,科学月刊, 27(5), 1996&lt;/li&gt;
&lt;li&gt;蔡聰明, 談 Stirling 公式, 数学传播 , 17(2), 1993&lt;/li&gt;
&lt;li&gt;Philip J. Davis, Leonhard Euler’s Integral: A Historical Profile of the Gamma Function, The American Mathematical Monthly, vol. 66, pp. 849-869, 1959&lt;/li&gt;
&lt;li&gt;Jacques Dutka, The Early History of the Factorial Function, Archive for History of Exact Sciences, 43 (3), pp. 225-249, 1991&lt;/li&gt;
&lt;li&gt;Detlef Gronnau, Why is the gamma function so as it is?, Teaching Mathematics and Computer Science, 2003&lt;/li&gt;
&lt;li&gt;Emil Artin, The Gamma function(English Traslation), Holt, Rinehart and Winston, Inc., 1964&lt;/li&gt;
&lt;li&gt;George E. Andrews et al., Special Functions, Cambridge University Press, 2001&lt;/li&gt;
&lt;li&gt;Ian Tweddle, James Stirling’s Methodus Differentialis: An Annotated Translation of Stirling’s Text, Springer, 2003&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickering.cn&quot;&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;http://www.flickering.cn/logo/flickering-logo.png&quot; alt=&quot;火光摇曳&quot; width=&quot;201&quot; height=&quot;213&quot;&gt;&lt;/a&gt;&lt;/p&gt;

											

</description>
        <pubDate>Tue, 01 Jul 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-07-01-%25e7%2581%25ab%25e5%2585%2589%25e6%2591%2587%25e6%259b%25b3%25e7%25a5%259e%25e5%25a5%2587%25e7%259a%2584%25e4%25bc%25bd%25e7%258e%259b%25e5%2587%25bd%25e6%2595%25b0%25e4%25b8%258b-80f0c99be.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-07-01-%25e7%2581%25ab%25e5%2585%2589%25e6%2591%2587%25e6%259b%25b3%25e7%25a5%259e%25e5%25a5%2587%25e7%259a%2584%25e4%25bc%25bd%25e7%258e%259b%25e5%2587%25bd%25e6%2595%25b0%25e4%25b8%258b-80f0c99be.html</guid>
        
        
      </item>
    
      <item>
        <title>[火光摇曳]神奇的伽玛函数(上)</title>
        <description>

						&lt;p&gt;原文链接： &lt;a href=&quot;http://www.flickering.cn/?p=163&quot;&gt;http://www.flickering.cn/?p=163&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、开篇&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数学爱好者们汇集在网络论坛上的一大乐事就是对各类和数学相关的事物评头论足、论资排辈。如果要评选历史上最伟大的数学家，就会有一大堆的粉丝围绕高斯、黎曼、牛顿、欧拉、阿基米德等一流人物展开口水战；如果要讨论最奇妙的数学常数，$e, \pi, \phi=\frac{\sqrt{5}-1}{2} $ 肯定在候选队列中；如果要推举最美丽的数学公式，欧拉公式 $e^{i\pi} + 1= 0$ 与和式 $ 1 + \frac{1}{2^2} + \frac{1}{3^2} + \frac{1}{4^2} + \cdots = \frac{\pi^2}{6} $ 常常被数学爱好者们提及；如果有人追问最神奇的数学函数是什么？ 这个问题自然又会变得极具争议，而我相信如下这个长相有点奇特的伽玛函数&lt;br&gt;
$$ \Gamma(x)=\int_0^{\infty}t^{x-1}e^{-t}dt $$&lt;br&gt;
一定会出现在候选队列中。&lt;/p&gt;
&lt;p&gt;伽玛函数不是初等函数，而是用积分形式定义的超越函数，怎么看都让人觉得不如初等函数自然亲切。然而伽玛函数也被称为阶乘函数，高等数学会告诉我们一个基本结论：伽玛函数是阶乘的推广。通过分部积分的方法，容易证明这个函数具有如下的递归性质&lt;br&gt;
$$\Gamma(x+1) = x \Gamma(x)$$&lt;br&gt;
由此可以推导出，对于任意的自然数$n$&lt;br&gt;
$$\Gamma(n) = (n-1)! .$$&lt;br&gt;
由于伽玛函数在整个实数轴上都有定义，于是可以看做阶乘概念在实数集上的延拓。&lt;/p&gt;
&lt;p&gt;如果我们继续再学习一些数学，就会惊奇地发现这个具有神秘气质的伽玛函数真是才华横溢。她栖身于现代数学的各个分支，在微积分、概率论、偏微分方程、组合数学， 甚至是看起来八竿子打不着的数论当中，都起着重要的作用。 并且这个函数绝非数学家们凭空臆想的一个抽象玩具，它具有极高的实用价值，频繁现身于在现代科学尤其是物理学之中。&lt;/p&gt;
&lt;p&gt;笔者对数学的涉猎很有限，主要是从概率统计中频繁地接触和学习这个函数，不过这个函数多年来一直都让我心存疑惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都说$n!$ 和伽玛函数是近亲，可是从相貌上这两个数学公式都差了十万八千里，历史上数学家们是如何找到这个奇特的函数的？&lt;/li&gt;
&lt;li&gt; 现代数学对伽玛函数的定义使它满足 $\Gamma(n) = (n-1)!$，既然号称是$n!$ 的推广，为何定义伽玛函数的时候不让它满足$\Gamma(n) = n!$？这看起来不是更加舒服自然吗？&lt;/li&gt;
&lt;li&gt; 伽玛函数是唯一满足阶乘特性的推广函数吗？&lt;/li&gt;
&lt;li&gt; 伽玛函数在各种概率分布的密度函数中频繁出现，伽玛函数本身是否有直观的概率解释？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带着这些疑问，笔者翻阅了许多讲解伽马函数历史和应用的资料，发现伽玛函数真是一个来自异族的美女，与生俱来携带着一种神秘的色彩。你要接近她并不难，然而她魅力独特，令你无法看透。从她出生开始，就吸引着众多一流的数学家对她进行解读。 历史上伽玛函数的发现，和数学家们对阶乘、插值以及积分的研究有着紧密的关系，而这最早要从著名的沃利斯公式讲起。&lt;br&gt;
&lt;span id=&quot;more-6646&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、无心插柳 — 沃利斯公式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1655年, 英国数学家沃利斯(John Wallis, 1616-1703)写下了一个神奇的数学公式&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{wallis-formula}&lt;br&gt;
\frac{2}{1} \cdot \frac{2}{3} \cdot \frac{4}{3} \cdot \frac{4}{5} \cdot&lt;br&gt;
\frac{6}{5} \cdot \frac{6}{7} \cdot \frac{8}{7} \cdot \frac{8}{9} \cdot \cdots =&lt;br&gt;
\frac{\pi}{2} .&lt;br&gt;
\end{equation}&lt;br&gt;
$\pi$ 居然可以如此齐整地表示成奇数、偶数的比值，着实令人惊讶。 历史上数学家们为了寻求对$\pi$ 这个迷人的常数更加深刻的理解，前赴后继倾注了无数的精力。数学家们发现，$\pi$ 可以表达成许许多多奇妙的形式，而沃利斯公式是欧洲历史上发现的第二个把 $\pi$ 表达成式了无穷序列的形式， 由于它简洁的对称美，也成为了许多数学人经常提及的数学公式之一。为何沃利斯公式会和伽玛函数发生联系呢？实际上对沃利斯公式做一下变形整理就可以得到如下等价形式&lt;br&gt;
$$ \lim_{n\rightarrow\infty} \frac{(2^n \cdot n!)^4}{[(2n)!]^2(2n+1)} = \frac{\pi}{2} $$&lt;br&gt;
我们看到了阶乘，所以沃利斯公式天然和阶乘有着紧密的联系。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/john-wallis.jpg&quot;&gt;&lt;img class=&quot;aligncenter wp-image-175 &quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/john-wallis-248x300.jpg&quot; alt=&quot;john-wallis&quot; width=&quot;211&quot; height=&quot;255&quot;&gt;&lt;/a&gt;沃利斯&lt;/p&gt;
&lt;p&gt;我们先来欣赏一下沃利斯公式的证明。利用现代数学分析的知识证明这个公式并不难，通常微积分课本对这个公式的证明是从积分式&lt;br&gt;
$$ I(n) = \int_0^\pi \sin^nxdx $$&lt;br&gt;
出发，通过分部积分得到一个关于$I(n)$ 的递推公式，反复使用这个递推公式就可以证明结论。 不过这个证明思路有点繁琐，数学家波利亚(George P\’{o}lya, 1887-1985) 在它的名著《数学与合情推理》中提到了另外一个非常简洁、符合直觉，但是不够严格的证明思路，其中用到的最重要的公式是数学家欧拉(Leonhard Euler, 1707-1783)提供的。欧拉当年研究正弦函数 $\sin x$ 的时候，发现该函数有无穷多个零点 $0, \pm\pi, \pm 2\pi, \pm 3\pi, \cdots $。 而一个多项式$f(x)$ 如果有零点 $x_1, x_2, \cdots, x_n$(此处$x_i, x_j$ 可以相同, 对应于有重根的情形), 那么 $f(x)$ 一定可以表示为&lt;br&gt;
$$ f(x) = a_0 (x-x_1) (x-x_2) \cdots (x-x_n) .$$&lt;br&gt;
于是欧拉大胆地猜测 $\sin x$ 也具有多项式的这种性质，即&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{euler-sinx}&lt;br&gt;
\sin x = x \prod_{n=1}^\infty\left(1 – \frac{x^2}{n^2\pi^2}\right)&lt;br&gt;
= x (1- \frac{x^2}{\pi^2}) (1- \frac{x^2}{4\pi^2}) (1- \frac{x^2}{9\pi^2}) \cdots .&lt;br&gt;
\end{equation}&lt;br&gt;
理工科背景的学生大都学习过 $\sin x$ 的泰勒展开式， 通常只有数学背景的学生才会接触到这个 $\sin x$ 的无穷乘积展开式。这个展开式在数学推导中有许多妙用。数学史上它发挥的第一个重要作用，就是帮助欧拉推导出了如下美丽的公式&lt;br&gt;
$$ 1 + \frac{1}{2^2} + \frac{1}{3^2} + \frac{1}{4^2} + \cdots = \frac{\pi^2}{6} . $$&lt;br&gt;
这个展开式子的另一个妙处就是可以用于证明沃利斯公式， 不过这个思路并非欧拉本人给出，而是后来的数学家发现的。 在\eqref{euler-sinx} 式中取 $x=\frac{\pi}{2}$, 可以得到&lt;br&gt;
$$ 1 = \frac{\pi}{2} \prod_{n=1}^\infty\left(1 – \frac{1}{4n^2}\right)&lt;br&gt;
= \frac{\pi}{2} \prod_{n=1}^\infty\left(\frac{2n-1}{2n} \cdot \frac{2n+1}{2n}\right)&lt;br&gt;
$$&lt;br&gt;
所以&lt;br&gt;
$$ \frac{\pi}{2} = \prod_{n=1}^\infty\left(\frac{2n}{2n-1} \cdot \frac{2n}{2n+1}\right)&lt;br&gt;
$$&lt;br&gt;
上式就是沃利斯公式。之所以说以上的证明思路不够严格，是由于欧拉给的$\sin x$ 无穷乘积展开式的严格证明并不简单，依赖于现代数学分析理论。&lt;/p&gt;
&lt;p&gt;欣赏完沃利斯公式的证明，我们把镜头重新拉回到沃利斯生活的年代，要知道沃利斯给出这个公式是在 1655 年，那时候牛顿刚满13岁，莱布尼茨更小，欧拉还没出生，整个欧洲数学界对微积分的认识还停留在非常粗糙的阶段，对正弦函数 $\sin x$ 的认识也非常有限， 所以沃利斯当然不可能用上述的思路找到他的公式， 那沃利斯是如何发现这个 $\pi$ 的无穷乘积表达式的呢？&lt;/p&gt;
&lt;p&gt;在沃利斯的时代，微积分有了初步的进展，当时考虑的典型的问题就是求一个曲线和坐标轴围成的面积。欧洲的数学家们追寻阿基米德一千多年前开创的穷竭法，把曲线下的面积表达为求无穷多个矩形面积的和。当积分的思想在十七世纪开始逐步发酵的时候，沃利斯已经能够运用积分的思路处理一些简答曲线的面积。譬如，对于最简单的幂函数曲线 $y=x^n$，使用我们现在的数学记号， 沃利斯时代的数学家们获得了如下的结果&lt;br&gt;
$$ \int_0^1 x^n dx = \frac{1}{n+1}, n=0,1,2,\ldots .$$&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/circle-area.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-167&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/circle-area-295x300.png&quot; alt=&quot;circle-area&quot; width=&quot;295&quot; height=&quot;300&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/circle-area.png&quot;&gt;求圆弧下的面积&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;圆的面积一直是千百年来数学家们深入关心和研究的问题，很自然地沃利斯也想到了可以使用同样的思路来处理圆的面积。 不过数学家们早已经证明道圆的面积是 $\pi r^2$，用积分的方法去计算圆的面积能带来什么好处呢？ 沃利斯在此做了一个逆向思维，他的真实目标并不是要计算圆的面积，而是冲着$\pi$ 去的。 沃利斯的一个漂亮的思路是：我们已经知道四分之一的单位圆圆弧 $y=\sqrt{1-x^2} (0 \le x \le 1)$ 和坐标轴围成的面积是 $\frac{\pi}{4}$, 如果这个面积能通过无穷分割的方法表达成一个解析表达式，那我们其实就可以得到计算 $\pi$ 的一个解析表达式。&lt;/p&gt;
&lt;p&gt;然而沃利斯在处理这个圆弧下地面积的时候遇到了困难。虽然基于无穷分割的方法可以得到&lt;br&gt;
$$ \int_0^1 (1-x^2)^{1/2} dx = \lim_{n\rightarrow \infty} \frac{1}{n} \sum^n_{k=1} \sqrt{1-\frac{k^2}{n^2}}$$&lt;br&gt;
但是这个极限难以简化计算。 沃利斯天才的地方就是换了一个更一般的思路来处理这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 考虑更一般的曲线面积问题&lt;span style=&quot;line-height: 1.5;&quot;&gt;$$ A_{p,q} = \int_0^1 (1-x^\frac{1}{p})^q dx$$&lt;/span&gt;&lt;span style=&quot;line-height: 1.5;&quot;&gt;原来的问题变成了一个特例，就是计算 $A_{\frac{1}{2},\frac{1}{2}}$ ；&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; 对$p,q$ 为整数的情况做计算，并系统地列成表格， 从表格中观察变化规律，总结出一般的公式；&lt;/li&gt;
&lt;li&gt; 把计算公式从$p,q$为整数的情形延拓、内插到分数的情形，从而计算出&lt;span style=&quot;line-height: 1.5;&quot;&gt;$A_{\frac{1}{2},\frac{1}{2}}$ 。&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;沃利斯对 $p,q = 1,2,\ldots,10$ 做了计算， 发现$A_{p,q}$ 这个表格不太好看，改为倒数之后容易分析。于是取 $B_{p,q} = \frac{1}{A_{p,q}}$, 列出表格一看， 居然恰好是帕斯卡三角形！ 这个三角形中的组合数已经是数学家们熟悉知的， 于是沃利斯很容易地得到&lt;/p&gt;
&lt;p&gt;\begin{equation}&lt;br&gt;
\label{wallis-Bpq}&lt;br&gt;
B_{p,q} = \frac{(p+q)!} {p! q!} = \frac{1}{p!} (q+1) (q+2) \ldots (q+p), q=0,1,2 \ldots&lt;br&gt;
\end{equation}&lt;br&gt;
由上式进一步可以得到如下的递推公式&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{wallis-Bpq-recursion}&lt;br&gt;
B_{p,q} = \frac{p+q}{q} B_{p,q-1}&lt;br&gt;
\end{equation}&lt;br&gt;
原始的问题就转化为计算 $B_{\frac{1}{2},\frac{1}{2}}$。 由此开始， 沃利斯开始了他天才的推广：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 虽然 \eqref{wallis-Bpq} 和 \eqref{wallis-Bpq-recursion}是基于$p,q$ 为整数得到&lt;span style=&quot;line-height: 1.5;&quot;&gt;的， 但是沃利斯认为这个公式也应该适用于分数的情形；&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; 由于原始表格是对称的， 沃利斯相信推广到分数之后的表格依然保持对称性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/Bpq-table.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-193 &quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/Bpq-table-1024x640.png&quot; alt=&quot;Bpq-table&quot; width=&quot;523&quot; height=&quot;327&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基于对称性假设和计算式\eqref{wallis-Bpq}, 我们可以得到，&lt;br&gt;
$$ B_{\frac{1}{2}, 1} = B_{1, \frac{1}{2}} = \frac{1}{1!}(\frac{1}{2} + 1) = \frac{3}{2} $$&lt;br&gt;
考虑 $p=\frac{1}{2}$ 的情形, 重复使用迭代公式 \eqref{wallis-Bpq}, 容易得到&lt;br&gt;
$$ B_{\frac{1}{2}, m} = \frac{2m+1}{2m}\cdot \frac{2m-1}{2m-2} \ldots \frac{5}{4} \cdot\frac{3}{2} $$&lt;br&gt;
$$ B_{\frac{1}{2}, m+\frac{1}{2}} = \frac{2m+2}{2m+1} \cdot\frac{2m}{2m-1} \ldots \frac{4}{3}&lt;br&gt;
\cdot B_{\frac{1}{2}, \frac{1}{2}} $$&lt;br&gt;
由于 $B_{\frac{1}{2}, q}$ 是基于$q$ 递增的，所以有&lt;br&gt;
$$ B_{\frac{1}{2}, m-\frac{1}{2}} &amp;lt; B_{\frac{1}{2}, m} &amp;lt; B_{\frac{1}{2}, m+\frac{1}{2}} $$&lt;br&gt;
利用\eqref{wallis-Bpq-recursion} 式这个递推公式，马上可以得出上式两端有相同的极限&lt;br&gt;
$$ \lim_{m \rightarrow \infty} B_{\frac{1}{2}, m+\frac{1}{2}}&lt;br&gt;
= \lim_{m \rightarrow \infty} \frac{2m+2}{2m+1} B_{\frac{1}{2}, m-\frac{1}{2}}&lt;br&gt;
= \lim_{m \rightarrow \infty} B_{\frac{1}{2}, m-\frac{1}{2}} .&lt;br&gt;
$$&lt;br&gt;
于是，利用两侧极限的夹逼，可以得到&lt;br&gt;
$$ \lim_{m \rightarrow \infty} B_{\frac{1}{2}, m} = \lim_{m \rightarrow \infty} B_{\frac{1}{2}, m+\frac{1}{2}} $$&lt;br&gt;
即有&lt;br&gt;
$$&lt;br&gt;
\frac{3}{2} \cdot \frac{5}{4} \cdot \cdots \cdot \frac{2m-1}{2m-2} \cdot \frac{2m+1}{2m} \cdots&lt;br&gt;
= B_{\frac{1}{2}, \frac{1}{2}} \cdot \frac{4}{3} \cdot \cdots \cdot \frac{2m}{2m-1} \cdot \frac{2m+2}{2m+1} \cdot \cdots&lt;br&gt;
$$&lt;br&gt;
所以&lt;br&gt;
$$&lt;br&gt;
\frac{2}{B_{\frac{1}{2}, \frac{1}{2}}} = \frac{2}{1} \cdot\frac{2}{3} \cdot\frac{4}{3}\cdot \frac{4}{5}\cdot&lt;br&gt;
\cdots \cdot \frac{2m-2}{2m-1}\cdot \frac{2m}{2m-1} \cdot \frac{2m}{2m+1} \cdot \frac{2m+2}{2m+1} \cdot\cdots&lt;br&gt;
$$&lt;br&gt;
由于 $\displaystyle \frac{2}{B_{\frac{1}{2}, \frac{1}{2}}} = 2A_{\frac{1}{2}, \frac{1}{2}} = \frac{\pi}{2} $,代入上式就得到了沃利斯公式 \eqref{wallis-formula}。&lt;/p&gt;
&lt;p&gt;上述推导的基本思想是在沃利斯的名著《无穷分析》（Arithmetica Infinitorum，1655）中给出的。沃利斯公式对$\pi$ 的表示如此的奇特，以至于惠更斯第一次看见这个公式的时候根本不相信，直到有人给惠更斯展示了利用该公式对$\pi$做近似计算，才消除了惠更斯的疑惑。沃利斯是在牛顿之前英国最有影响力的数学家，他的这本书包含了现代微积分的先驱工作，给后来的数学家包括牛顿、斯特林、欧拉都产生了重要的影响。牛顿1642年在老家研读沃利斯的这本书的时候受到启发，从而把二项式定理从整数的情形推广到了分数的情形，这也是牛顿有生以来的第一个数学发现；而牛顿后续在微积分上的工作也同样受到了沃利斯的深刻影响。&lt;/p&gt;
&lt;p&gt;回过头来我们观察一下沃利斯公式推导过程中使用的\eqref{wallis-Bpq} 式，这个组合公式中实际上包含了阶乘$p!$、 $q!$, 当沃利斯认为这个公式也适合于$p, q$ 为分数的情形的时候，隐含了一个假设是阶乘这个源自整数的概念是可以推广到分数的情形的。虽然沃利斯并没有显示地提出把阶乘推广到分数的问题， 沃利斯对一些特殊积分式的研究、沃利斯公式的结论以及推导过程却给后来的数学家们进一步研究阶乘提供了许多重要的线索，也为未来伽玛函数的发现埋下了一颗种子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、近似与插值的艺术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;十七世纪中期，由于帕斯卡、费马、贝努利等数学家的推动，概率论以及与之相关的组合数学获得了很大的发展，阶乘的数值计算开始频繁的出现在数学家面前。 真正的开始对 $n!$ 进行细致地研究并取得突破的，是数学家棣莫弗(Abraham de Moivre, 1667-1754)和斯特林(James Stirling, 1692-1770)。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/abraham-de-moivre.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-166&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/abraham-de-moivre-246x300.jpg&quot; alt=&quot;abraham-de-moivre&quot; width=&quot;246&quot; height=&quot;300&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;棣莫弗&lt;/p&gt;
&lt;p&gt;棣莫弗从1721年开始考虑二项分布的概率计算问题，其中一个问题是：当$n \rightarrow \infty $时，如何计算对称二项分布的中间项的概率&lt;br&gt;
$$ b\left(n, {1\over2}, {n \over 2}\right) = \binom{n}{{n \over 2}}&lt;br&gt;
\left(\frac{1}{2}\right)^n&lt;br&gt;
= \frac{n!}{({n\over 2})! \cdot ({n \over 2})!} \left(\frac{1}{2}\right)^n .$$&lt;br&gt;
上式中假设了$n$为偶数。棣莫弗经过一番复杂的推导计算，得到了如下的结果&lt;br&gt;
$$ b\left(n, {1\over2}, {n\over2}\right) \approx 2.168 \frac{(1 – {1\over n})^n} {\sqrt{n-1}}&lt;br&gt;
\approx \frac{2.168 e^{-1}}{\sqrt{n}}.$$&lt;br&gt;
1725年，斯特林得知了棣莫弗的研究问题和结果，这激起了他浓厚的兴趣。斯特林经过更细致的推导，得到了如下更加漂亮的结果&lt;br&gt;
$$ b\left(n, {1\over2}, {n\over2}\right) \approx \sqrt{\frac{2}{\pi n}} .$$&lt;br&gt;
斯特林写信告知了棣莫弗他的推导结果，斯特林的结果中最引人注目的地方就是 $\pi$ 的引入，这给棣莫弗很大的启发。 基于上述二项概率计算的研究，棣莫弗最终给出了如下重要公式&lt;br&gt;
$$ n! \approx C \sqrt{n} \left(\frac{n}{e}\right)^{n} $$&lt;br&gt;
$C$ 是一个常数。而在斯特林推导$b(n, {1\over2}, {n\over2})$ 过程中引入 $\pi$ 的启发下， 1730 年棣莫弗利用沃利斯公式推导出了 $C = \sqrt{2\pi}$，也就是得到了斯特林公式&lt;br&gt;
$$ n! \approx \sqrt{2\pi n} \left(\frac{n}{e}\right)^{n} .$$&lt;br&gt;
所以现代数学史的研究大都认为斯特林公式的最主要贡献者是棣莫弗，斯特林的贡献主要在常数$C$ 的确定。 不过科学发展史中长期以来都存在一个被称之为 Stigler’s Law 的著名现象：绝大多数科学成果的冠名，大都不是历史上首位发现者的名字。或许这主要是由于早年通信不发达、信息传播成本太高导致的。如今互联网如此的发达，学术界任何重要的科研进展都可以快速传导到世界各地，这种问题发生的概率大大的降低了，类似牛顿、莱布尼茨这种微积分发明权的世纪争夺战不太可能在这个时代重现。&lt;/p&gt;
&lt;p&gt;斯特林公式自发现以来，就吸引众多的数学家对它进行研究，提出了多种多样的证明方法。实际上，从沃利斯公式出发就可以证明斯特林公式，甚至可以进一步证明斯特林公式和沃利斯公式是完全等价的。在多种证明方法中，有一个基于概率论的证明思路：利用泊松分布的特性，再加上中心极限定理，我们可以简洁地推导出斯特林公式。&lt;/p&gt;
&lt;p&gt;假设 $X_1, X_2,\ldots, X_n $独立同分布， 都是服从参数 $\lambda=1$ 的泊松分布的随机变量，取 $S_n=\sum_{i=1}^n X_i$, 则由泊松分布的可叠加性， 容易知道 $S_n \sim Poisson(n)$, 于是由泊松分布的性质可知$S_n$ 的均值和方差都是 $n$, 利用中心极限定理可以得到&lt;br&gt;
$$ Z_n = \frac{S_n – E(S_n)}{\sqrt{ Var(S_n) }} = \frac{S_n – n}{{\sqrt n }} \rightarrow Z,  \quad Z \sim N(0,1) $$&lt;br&gt;
$Z$ 为正态分布随机变量，密度函数为&lt;br&gt;
$$ \displaystyle f(z)=\frac{1}{\sqrt{2\pi}}e^{-\frac{z^2}{2}} .$$&lt;br&gt;
所以，我们有如下推导&lt;br&gt;
\begin{eqnarray*}&lt;br&gt;
\begin{array}{lll}&lt;br&gt;
P\{{S_n} = n\} &amp;amp; = &amp;amp; \displaystyle P\{ n – 1 &amp;lt; {S_n} \le n\} \\&lt;br&gt;
&amp;amp; = &amp;amp; \displaystyle P\{ -\frac{1}{{\sqrt n }} &amp;lt; \frac{{{S_n} – n}}{{\sqrt n }} \le 0\} \\&lt;br&gt;
&amp;amp; \approx &amp;amp; \displaystyle P\{ -\frac{1}{{\sqrt n }} &amp;lt; Z \le 0\} \\&lt;br&gt;
&amp;amp; = &amp;amp; \displaystyle \int_{ – \frac{1}{{\sqrt n }}}^0 f(z) dz \\&lt;br&gt;
&amp;amp; \approx &amp;amp; f(0) [0 - ( - \frac{1}{{\sqrt n }})] \\&lt;br&gt;
&amp;amp; = &amp;amp; \displaystyle \frac{1}{\sqrt{2\pi n}} .\\&lt;br&gt;
\end{array}&lt;br&gt;
\end{eqnarray*}&lt;br&gt;
由于$S_n$ 符合参数$\lambda =n$ 的泊松分布，实际上有&lt;br&gt;
$$ P\{ {S_n} = n\} = \frac{{{e^{ – n}}{n^n}}}{{n!}} .$$&lt;br&gt;
综合以上推导可以得到&lt;br&gt;
$$ \frac{{{e^{ – n}}{n^n}}}{{n!}} \approx \frac{1}{\sqrt{2\pi n}}. $$&lt;br&gt;
上式稍微整理一下就得到斯特林公式。这个推导的思路看起来非常初等，但是由于中心极限定理的严格证明非常困难，所以不能被认为是一个严格的初等证明。不过该推导让我们从概率角度来理解斯特林公式，同时也解释了斯特林公式中的$\pi$ ，是由于正态分布的引入导致的。&lt;/p&gt;
&lt;p&gt;斯特林公式非常有用，通过它可以得出$n!$ 非常精确的估计值。虽然$n$ 足够大时绝对误差可以超过任何数，但是相对误差却很小，并且下降得非常快，甚至当 $n$ 很小的时候，斯特林公式的逼近都相当精确。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/stirling-precision.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-194 size-large&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/stirling-precision-1024x286.png&quot; alt=&quot;stirling-precision&quot; width=&quot;604&quot; height=&quot;168&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过，斯特林对于 $n!$ 的研究实际上走得更远，而不是仅限于近似计算。追寻沃利斯和牛顿在插值方面的工作，斯特林一直研究各种数列的插值问题，通俗地说就是把数列的通项公式定义从整数集合延拓到实数集合。例如数列 $1,4,9,16,\cdots$ 可以用通项公式 $n^2$ 自然的表达，即便 $n$ 为实数，这个通项公式也是良定义的。直观地说就是可以找到一条通过所有整数点$(n,n^2)$的平滑曲线$y=x^2$，从而可以把定义在整数集上的公式延拓到实数集合。再比如求和序列 $1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5 \cdots$, 其通项公式可以写为 $n(n+1)/2$ ，这个公式也可以很容易地延拓到实数集合上。 斯特林很擅长于处理各种序列的插值问题，他在1730 年出版的一本书中描述了很多基于多阶差分处理序列插值的方法，这些方法主要源自牛顿。 斯特林处理插值的思路稍微有点复杂，我们不在此赘述，他的方法本质上类似于使用多项式曲线做插值。我们知道平面上两个点可以确定一条直线，三个点可以确定一条抛物线，…，$n$+1 个点可以确定一条$n$次多项式曲线。所以对于一个整数序列，如果我们无法直观地写出通项公式，为了计算某一个实数点对应的值，可以用该实数点周围的 $n+1$个整数点去确定一条 $n$ 次多项式曲线，从而可以基于拟合得到的多项式近似地计算实数点的值。&lt;/p&gt;
&lt;p&gt;自然数的加法序列我们已经看到很容易做插值计算，对数学家们而言很自然的一个问题就是：自然数的乘法序列 $1,1\cdot2, 1\cdot2\cdot3, 1\cdot2\cdot3\cdot4, 1\cdot2\cdot3\cdot4\cdot5, \cdots$ 能否做插值计算？我们可以计算 $2!,3!$, 如何计算 $(\frac{1}{2})!$呢？斯特林在他的书中开始考虑阶乘序列$1!, 2!,3!,4!,5! \cdots$ 的插值问题。 如果我们把$(n,n!)$ 最初的一些点画在坐标轴上，确实可以看到，容易画出一条通过这些点的平滑曲线。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/factorial1.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-181 &quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/factorial1.png&quot; alt=&quot;factorial&quot; width=&quot;523&quot; height=&quot;104&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/factorial-curve.png&quot;&gt;&lt;img class=&quot;alignnone  wp-image-180&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/factorial-curve.png&quot; alt=&quot;factorial-curve&quot; width=&quot;287&quot; height=&quot;209&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/factorial-curve.png&quot;&gt;通过$(n,n!)$的曲线&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是$n!$这个数列增长的速度过快，数值计算非常困难，要做这个序列的插值计算可不容易。幸运的是当时对数已经被纳皮尔(John Napier, 1550-1617) 发明出来，并且在数值计算上显示了其神通，被科学家们广泛接受。斯特林和棣莫弗在他们的研究中大量的使用对数做计算，所以很自然地斯特林转而考虑对序列 $\log_{10} n!$ 做插值计算。&lt;/p&gt;
&lt;p&gt;通过插值方法并结合对数运算的技巧，斯特林计算出了 $\log_{10} (10\frac{1}{2})!=7.0755259056$, 由此可以得到 $(10\frac{1}{2})! = 11899423.08$。斯特林接下来的处理非常有意思，由于原始的数列满足递归式 $T(z) = z \cdot T(z-1)$，所以斯特林基于插值的原则进行推理，认为被插值的中间项 $(\frac{1}{2})!, (1\frac{1}{2})!, (2\frac{1}{2})! \cdots,$ $ (9\frac{1}{2})!, (10\frac{1}{2})!$ 也应该满足这个递归式, 于是有&lt;br&gt;
$$ \left(10\frac{1}{2}\right)! = 10\frac{1}{2} \cdot&lt;br&gt;
9\frac{1}{2} \cdot \cdots \cdot 1\frac{1}{2} \cdot \left(\frac{1}{2}\right)! $$&lt;br&gt;
上式中代入$(10\frac{1}{2})!$的值，很容易计算得到&lt;br&gt;
$$\left(\frac{1}{2}\right)! = 0.8862269251 .$$&lt;br&gt;
这个结果看起来平淡无奇，然而斯特林天才地指出实际上有&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{half-factorial}&lt;br&gt;
\left(\frac{1}{2}\right)! = \frac{\sqrt\pi}{2} .&lt;br&gt;
\end{equation}&lt;br&gt;
这真是一个令人惊诧的结果！&lt;/p&gt;
&lt;p&gt;我们不太确定斯特林是如何推断出 \eqref{half-factorial} 式的，因为在斯特林的论述中他只是把 $(\frac{1}{2})!$ 计算的结果和 $\frac{\sqrt\pi}{2}$ 做了数值比较，并没有进行严谨的数学推导，所以看起来好像是数值对比后猜测的结果。即便如此，这也展示了斯特林强大的数学直觉。&lt;/p&gt;
&lt;p&gt;然而考虑到我们熟悉的斯特林公式是斯特林和棣莫弗共同创造的，斯特林要利用他的插值过程更加严谨地推导这个结果其实也很容易，虽然没有证据表明斯特林做过这种推导。基于斯特林对 $\log_{10} n!$ 的插值处理方法，如果我们只是使用一次多项式（即直线）做插值处理，那么中间项的插值就是两端的算术平均&lt;br&gt;
$$ \log_{10} \left(n+\frac{1}{2}\right)! = \frac{\log_{10} n! + \log_{10} (n+1)!}{2} .$$&lt;br&gt;
所以&lt;br&gt;
$$ \left(n+\frac{1}{2}\right)! = \sqrt{n! (n+1)!} = n! \sqrt{n+1} ,$$&lt;br&gt;
把递归式 $T(z) = z \cdot T(z-1)$ 应用于 $(n+\frac{1}{2})!$ 可以得到&lt;br&gt;
$$ \left(n+\frac{1}{2}\right)!&lt;br&gt;
= (n+\frac{1}{2}) \cdot (n-\frac{1}{2}) \cdots \frac{3}{2} \cdot \left(\frac{1}{2}\right)! .$$&lt;br&gt;
利用斯特林公式推导可以得到&lt;br&gt;
\begin{align*}&lt;br&gt;
\left(\frac{1}{2}\right)! &amp;amp; = \frac {n! \sqrt{n+1}} {(n+\frac{1}{2})&lt;br&gt;
\cdot (n-\frac{1}{2}) \cdots \frac{3}{2}} \\&lt;br&gt;
&amp;amp; = \frac {\sqrt{n+1} \cdot 2^{2n} \cdot n! \cdot n!} {(2n+1)!} \\&lt;br&gt;
&amp;amp; \displaystyle \approx \displaystyle \frac {\sqrt{n+1} \cdot 2^{2n}&lt;br&gt;
\cdot \sqrt{2\pi n} (\frac{n}{e})^n \cdot \sqrt{2\pi n} (\frac{n}{e})^n}&lt;br&gt;
{\sqrt{2\pi(2n+1)} (\frac{2n+1}{e})^{2n+1}} \\&lt;br&gt;
&amp;amp; = \displaystyle \frac{\sqrt\pi}{2} \cdot \frac{e}{(1+\frac{1}{2n})^{2n}}&lt;br&gt;
\cdot \frac{\sqrt{2n+2}\cdot 2n}{\sqrt{2n+1}\cdot (2n+1)} \\&lt;br&gt;
&amp;amp; \rightarrow \frac{\sqrt\pi}{2} \hspace{0.5cm} (n \rightarrow \infty) .&lt;br&gt;
\end{align*}&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/stirling_grave.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-178&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/stirling_grave-300x225.jpg&quot; alt=&quot;stirling_grave&quot; width=&quot;300&quot; height=&quot;225&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;斯特林的墓&lt;/p&gt;
&lt;p&gt;斯特林的插值研究成果发表于他1730年出版的《Methodus Differentialis》中，由于原书是拉丁文写成的，有人把他翻译成了英文，并对斯特林的研究成果提供了很多的评论，使得我们有机会追寻斯特林研究的原始足迹。 有了强大的斯特林公式，可以对$n!$ 进行便捷的近似计算， 而事实上按照斯特林的插值思路，他已经可以近似计算$n$为任何分数的时候的阶乘。然而斯特林的思路更多只是停留在数值近似计算上，没有把 $n!$ 到分数的延拓更细致地追究下去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、三封信—伽玛函数的诞生&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和斯特林处在同一个时代的另外一位数学家几乎在同一个时间点也在考虑 $n!$ 的插值问题，这个人就是哥德巴赫。哥德巴赫的名字在中国真是家喻户晓。由于中国数学家在数论领域的杰出成就，和素数相关的哥德巴赫猜想作为数学皇冠上的明珠就一直吸引着无数中国人的目光。 哥德巴赫一生都对数列的插值问题保持浓厚的兴趣，他很早就开始考虑阶乘的插值问题。不过看起来哥德巴赫的思路不同于斯特林，他并不满足于仅仅做近似的数值计算，他希望能找到一个通项公式，既可以准确的描述$n!$, 又能够同时推广到分数情形。不过哥德巴赫无法解决这个问题，幸运的是哥德巴赫交友广泛，和当时许多著名的数学家都有联系，包括莱布尼茨以及数学史中出了最多位数学家的家族— 贝努利家族。1722 年他找尼古拉斯·贝努利请教这个阶乘插值问题，不过没有取得任何进展。即便如此，哥德巴赫却多年来一直不忘思考这个问题，1729年他又请教尼古拉斯·贝努利的弟弟丹尼尔·贝努利，而丹尼尔于当年10月给哥德巴赫的一封信中给出了漂亮的解答。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/goldbach2.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-173&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/goldbach2.jpg&quot; alt=&quot;goldbach2&quot; width=&quot;200&quot; height=&quot;225&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/Daniel_Bernoulli_by_Grooth.jpg&quot;&gt;&lt;img class=&quot;alignnone  wp-image-168&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/Daniel_Bernoulli_by_Grooth-243x300.jpg&quot; alt=&quot;Daniel_Bernoulli_by_Grooth&quot; width=&quot;185&quot; height=&quot;229&quot;&gt;&lt;/a&gt;&lt;br&gt;
哥德巴赫和丹尼尔·贝努利&lt;/p&gt;
&lt;p&gt;丹尼尔解决阶乘插值问题的思路非常漂亮：突破有限，取道无穷！他不拘泥于有限的方式，而是直接跳跃到无穷乘积的形式做插值。丹尼尔发现，如果 $m,n$都是正整数，当 $m&lt;br&gt;
\rightarrow \infty$时，有&lt;br&gt;
$$ \frac{1\cdot 2\cdot 3 \cdots m}{(1+n)(2+n)\cdots (m-1+n)}(m+\frac{n}{2})^{n-1}&lt;br&gt;
\rightarrow n! .$$&lt;br&gt;
于是利用这个无穷乘积的方式可以把$n!$的定义自然地延拓到实数集。例如，取 $n=2.5$, $m$ 足够大，基于上式就可以近似计算出 $2.5!$。我们并不知道丹尼尔是如何想到用无穷乘积的思路去解决这个问题的，然而他能从有限插值跳跃到无穷，足以显示他优秀的数学才能。无穷在整个数学发展中发挥着巨大的作用，二十世纪之后的数学笔者不敢妄加评论，然而如果说“无穷是数学发展的发动机”，在二十世纪之前，这句评论应该不会过分。历次数学危机是因为无穷而产生，几次数学的重大进展和飞跃也是由于数学家们更加深刻地认识了无穷。&lt;/p&gt;
&lt;p&gt;接下来伽马函数的主角欧拉要登场了。欧拉和贝努利家族有紧密的联系，他是约翰·贝努利 (Johann Bernoulli, 1667-1748)的学生， 这位约翰也就是尼古拉斯和丹尼尔的父亲。我们应该感谢约翰·贝努利，因为正是他发现并培养了欧拉的数学才能。 在尼古拉斯和丹尼尔的推荐之下欧拉于1727年在圣彼得堡科学院获得了一个职位。欧拉当时正和丹尼尔·贝努利一块在圣彼得堡，他也因此得知了阶乘的插值问题。应该是受到丹尼尔·贝努利的思路的启发，欧拉也采用无穷乘积的方式给出了另外一个$n!$ 的插值公式&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{euler-series}&lt;br&gt;
\Bigl[\Bigl(\frac{2}{1}\Bigr)^n\frac{1}{n+1}\Bigr]&lt;br&gt;
\Bigl[\Bigl(\frac{3}{2}\Bigr)^n\frac{2}{n+2}\Bigr]&lt;br&gt;
\Bigl[\Bigl(\frac{4}{3}\Bigr)^n\frac{3}{n+3}\Bigr] \cdots = n! .&lt;br&gt;
\end{equation}&lt;br&gt;
用极限形式，这个式子以写为&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{euler-series2}&lt;br&gt;
\lim_{m \rightarrow \infty} \frac{1\cdot 2\cdot 3 \cdots m}{(1+n)(2+n)\cdots (m+n)}(m+1)^{n} = n!&lt;br&gt;
\end{equation}&lt;br&gt;
欧拉实际上在他的论文中描述了发现上述式子的思路，我们不在此赘述，不过上式成立却很容易证明。上式左边可以整理为&lt;br&gt;
\begin{align*}&lt;br&gt;
&amp;amp; \frac{1\cdot 2\cdot 3 \cdots m}{(1+n)(2+n)\cdots (m+n)}(m+1)^{n} \\&lt;br&gt;
= &amp;amp; \frac{1\cdot 2\cdot 3 \cdots n \cdot (n+1)(n+2) \cdots m}{(1+n)(2+n)\cdots m (m+1)(m+2)\cdots (m+n)}&lt;br&gt;
(m+1)^{n} \\&lt;br&gt;
= &amp;amp; 1\cdot 2\cdot 3 \cdots n \cdot \frac{(n+1)(n+2) \cdots m}{(1+n)(2+n)\cdots m }&lt;br&gt;
\cdot \frac{(m+1)^{n}}{(m+1)(m+2)\cdots (m+n)} \\&lt;br&gt;
= &amp;amp; n! \cdot \frac{(m+1)^{n}}{(m+1)(m+2)\cdots (m+n)} \\&lt;br&gt;
= &amp;amp; n! \cdot \prod_{k=1}^{n} \frac{m+1}{m+k} \\&lt;br&gt;
\rightarrow &amp;amp; n! \qquad (m\rightarrow \infty)&lt;br&gt;
\end{align*}&lt;br&gt;
所以 \eqref{euler-series}、\eqref{euler-series2}式都成立。&lt;/p&gt;
&lt;p&gt;而由于\eqref{euler-series} 式对于$n$为分数的情形也适用，所以欧拉实际上也把$n!$ 的计算推广到了分数的情形，只是这个计算是用无穷乘积的形式表示的，看起来不够直观。欧拉给的无穷乘积相比丹尼尔的无穷乘积有什么更出色的地方吗？实际上后人的验证指出，就收敛到$n!$的速度而言，丹尼尔的无穷乘积比欧拉的要快得多，然而欧拉的无穷乘积公式却是能够下金蛋的。 欧拉尝试从一些简单的例子开始做计算，看看是否有规律可循，欧拉极其擅长数学的观察与归纳。当 $n=\frac{1}{2}$ 的时候，带入\eqref{euler-series} 式，可以得到&lt;br&gt;
\begin{align*}&lt;br&gt;
\Bigl(\frac{1}{2}\Bigr)!&lt;br&gt;
= &amp;amp; \sqrt{\frac{2}{1}} \cdot \frac{2}{3} \cdot \sqrt{\frac{3}{2}} \cdot \frac{4}{5}&lt;br&gt;
\cdot \sqrt{\frac{4}{3}} \cdot \frac{6}{7} \cdot \sqrt{\frac{5}{4}} \cdot \frac{8}{9}&lt;br&gt;
\cdot \cdots \\&lt;br&gt;
= &amp;amp; \sqrt{\frac{4}{2}} \cdot \frac{2}{3} \cdot \sqrt{\frac{6}{4}} \cdot \frac{4}{5}&lt;br&gt;
\cdot \sqrt{\frac{8}{6}} \cdot \frac{6}{7} \cdot \sqrt{\frac{10}{8}} \cdot \frac{8}{9}&lt;br&gt;
\cdot \cdots \\&lt;br&gt;
= &amp;amp; \sqrt{\frac{4}{3} \cdot \frac{2}{3}} \cdot \sqrt{\frac{6}{5} \cdot \frac{4}{5}}&lt;br&gt;
\cdot \sqrt{\frac{8}{7} \cdot \frac{6}{7}} \cdot \sqrt{\frac{10}{9} \cdot \frac{8}{9}}&lt;br&gt;
\cdot \cdots \\&lt;br&gt;
= &amp;amp; \sqrt{\frac{2}{3} \cdot \frac{4}{3} \cdot \frac{4}{5} \cdot \frac{6}{5}&lt;br&gt;
\cdot \frac{6}{7} \cdot \frac{8}{7} \cdot \frac{8}{9} \cdot \frac{10}{9} \cdot \cdots }&lt;br&gt;
\end{align*}&lt;br&gt;
对比一下根号内的式子和沃利斯公式\eqref{wallis-formula}，几乎是一模一样，只是最前面差了一个因子2。 欧拉自然非常熟悉沃利斯的工作，基于沃利斯公式，欧拉迅速得到了如下一个令他惊讶的结果&lt;br&gt;
$$ \Bigl(\frac{1}{2}\Bigr)! = \frac{\sqrt{\pi}}{2} .$$&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/euler-swiss-banknote.jpg&quot;&gt;&lt;img class=&quot;alignnone wp-image-170 size-large&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/euler-swiss-banknote-1024x497.jpg&quot; alt=&quot;euler-swiss-banknote&quot; width=&quot;604&quot; height=&quot;293&quot;&gt;&lt;/a&gt;&lt;br&gt;
瑞士法郎上的欧拉&lt;/p&gt;
&lt;p&gt;欧拉给的无穷乘积满足阶乘的递归式$T(z) = z T(z-1)$, 结合递归式和计算技巧欧拉还计算了其它几个分数，包括 $\frac{5}{2}, \frac{1}{4}, \frac{3}{4}, \frac{1}{8}, \frac{3}{8} $ 等分数的阶乘。在丹尼尔的鼓励之下，欧拉把自己的插值公式以及一些分数阶乘的计算结果写信告知了哥德巴赫，这开启了欧拉和哥德巴赫之间一生的通信交流。两人在接下来的 35 年里连续通信达到196封，这些信函成为了数学家们研究欧拉的重要资料，而著名的哥德巴赫猜想就是首次出现在哥德巴赫写给欧拉的一封信中，也正是哥德巴赫激发了欧拉对数论的兴趣。&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;欧拉是具有超凡的数学直觉的数学家，他看到 $ (\frac{1}{2})!$ 中居然有 $\pi$, 对于擅长数学分析的数学家而言，有 $\pi$ 的地方必然有和圆相关的积分。同时由于计算$ (\frac{1}{2})!$ 过程中使用到的沃利斯公式，实际上也是计算积分的产物，由此欧拉猜测 $n!$ 应该可以表达为积分形式，于是欧拉开始努力尝试把 $n!$ 表达为某种积分。虽然沃利斯的时代微积分的系统理论还没有发明出来，沃利斯使用插值的方式做一些推导计算，但是沃利斯公式的推导过程本质上就是在处理积分。 如果说沃利斯当年只是无心插柳，那后继者欧拉是发现了一片绿洲。 受沃利斯工作的启发，欧拉开始考虑如下一般形式的积分&lt;br&gt;
$$ J(e,n) = \int_0^1 x^e(1-x)^ndx$$&lt;br&gt;
此处 $n$ 为正整数，$e$ 为正实数。利用分部积分法，很容易证明&lt;br&gt;
$$ J(e,n) = \frac{n}{e+1}J(e+1,n-1) $$&lt;br&gt;
重复使用上述迭代公式，最终可以得到&lt;br&gt;
$$ J(e,n) = \frac{1\cdot2\cdots n}{(e+1)(e+2)\cdots(e+n+1)} $$&lt;br&gt;
于是欧拉得到如下一个重要的式子&lt;br&gt;
\begin{equation}&lt;br&gt;
n! = (e+1)(e+2)\cdots(e+n+1)\int_0^1 x^e(1-x)^ndx&lt;br&gt;
\end{equation}&lt;br&gt;
在这个公式里欧拉实际上已经成功地把$n!$ 表示成了积分的形式。然而这里的问题是 $(e+1)(e+2)\cdots(e+n+1)$ 这个表达式限制了 $n$ 只能为整数，无法推广到分数的情形，欧拉继续研究能否简化这个积分表达式。此处$e$ 是一个任意实数，有没有办法让$e$ 从上面的积分式子中消失呢？要让一个量从一个数学等式中消失，数学家们惯用的手法之一就是让这个量取一个极端的值，譬如无穷。欧拉的老师约翰·贝努利说过“无穷是上帝的属性”，在通往无穷的路途中，造物主的秘密往往被数学家们窥视。欧拉开始追问：如果让$e$ 趋向于无穷取值，会发生什么样的情况呢？分析学的大师欧拉开始展现他的计算技巧，取$e=\frac{f}{g}$, 稍微整理一下可以得到&lt;br&gt;
$$ \frac{n!}{(f+g)(f+2g)\cdots(f+ng)} = \frac{f+(n+1)g}{g^{n+1}} \int_0^1 x^\frac{f}{g}(1-x)^n dx $$&lt;br&gt;
然后令 $f \rightarrow 1, g \rightarrow 0$，显然上式左边趋于$n!$, 右边会发生什么情况呢？为了简化计算，令 $x=t^h, h=\frac{g}{f+g}$， 整理之后上式可以变换为&lt;br&gt;
\begin{align}&lt;br&gt;
\frac{n!}{(f+g)(f+2g)\cdots(f+ng)}&lt;br&gt;
&amp;amp; = \frac{f+(n+1)g}{g^{n+1}} \int_0^1 h(1-t^h)^n dt \notag \\&lt;br&gt;
&amp;amp; = \frac{f+(n+1)g}{(f+g)^{n+1}} \int_0^1 \Bigl(\frac{1-t^h}{h}\Bigr)^n dt&lt;br&gt;
\label{factorial-integral}&lt;br&gt;
\end{align}&lt;br&gt;
当$f \rightarrow 1, g \rightarrow 0$ 时显然有$h \rightarrow 0$，利用罗必塔法则，我们可以得到微积分中一个熟知的式子&lt;br&gt;
$$ \lim_{h \rightarrow 0} \frac{1-t^h}{h} = -\log t .$$&lt;br&gt;
于是对 \eqref{factorial-integral} 式两边取极限，奇迹出现了&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{factorial-gamma-1}&lt;br&gt;
n! = \int_0^1 (-\log t)^ndt,&lt;br&gt;
\end{equation}&lt;br&gt;
原来的积分式中的$e$消失了，欧拉成功地把$n!$表达为了一个非常简洁的积分形式！！！对上式再做一个变换 $t=e^{-\lambda}$,就可以得到我们常见的伽玛函数形式&lt;br&gt;
\begin{equation}&lt;br&gt;
\label{factorial-gamma-2}&lt;br&gt;
n! = \int_0^{\infty} \lambda^ne^{-\lambda}d\lambda .&lt;br&gt;
\end{equation}&lt;br&gt;
把\eqref{factorial-gamma-1}和\eqref{factorial-gamma-2} 式从整数$n$ 延拓到任意实数$x$(包括负数)，我们就得到伽玛函数的一般形式&lt;br&gt;
$$ \Gamma(x+1) = \int_0^1 (-\log t)^{x}dt = \int_0^{\infty} t^{x}e^{-t}dt .$$&lt;br&gt;
1730年 欧拉把他推广得到的$n!$的积分形式再次写信告知了哥德巴赫，由此完美地解决了困恼哥德巴赫多年的插值问题，同时正式宣告了伽马函数在数学史的诞生，当时欧拉只有23岁。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/gamma-func.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-187&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/gamma-func-300x211.png&quot; alt=&quot;gamma-func&quot; width=&quot;300&quot; height=&quot;211&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;$\Gamma(x)$ 在正半轴的图像&lt;/p&gt;
&lt;p&gt;虽然会有一些争议，有不少数学人把数学家排名中的头两把交椅划给了欧拉和高斯。欧拉和高斯都是具有超凡直觉的一流数学家，但是欧拉和高斯的风格迥异。高斯是个老狐狸，数学上非常严谨，发表结果的时候却都把思考的痕迹抹去，只留下漂亮的结果，这招致了一些数学家对高斯的批评。而欧拉的风格不同，他的做法是把最基本的东西解释得尽量清楚，讲明引导他得出结论的思路，经常通过经验直觉做大胆的猜测，他的文章中往往留下了做数学猜想的痕迹。 拉普拉斯曾说过：“读读欧拉 ,他是我们所有人的老师。”高斯的评价是：“学习欧拉的著作，乃是认识数学的最好工具。”数学家波利亚在他的名著《数学与猜想》中列举了许多欧拉做数学研究的例子，对欧拉做数学归纳和猜想的方式推崇备至。&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/euler_cup.jpg&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-169&quot; src=&quot;http://www.flickering.cn/wp-content/uploads/2014/06/euler_cup.jpg&quot; alt=&quot;euler_cup&quot; width=&quot;282&quot; height=&quot;275&quot;&gt;&lt;/a&gt;&lt;br&gt;
欧拉的数学发现&lt;/p&gt;
&lt;p&gt;欧拉被称为分析学的化身，在分析学中，无出其右者。欧拉的老师约翰·贝努利在给欧拉的信中这样评价欧拉的工作：“ 我介绍高等分析的时候，它还是个孩子，而你正在将它带大成人。” 希尔伯特说“分析学是无穷的交响曲”，欧拉显然是无穷分析中最出色的作曲家。欧拉二百多年前写的教科书《无穷分析引论》至今还在不断地印刷，最近也刚刚出版了中文翻译版本。布尔巴基学派的灵魂人物韦伊( Andr\’{e} Weil, 1906-1998) 1979 年在 Rochester大学的一次讲演中说：“今天的学生从欧拉的《无穷分析引论》中所能得到的益处，是现代的任何一本数学教科书都比不上的。”&lt;/p&gt;
&lt;p&gt;许多人把数学比作音乐，把欧拉称作数学界的贝多芬。因为贝多芬在两耳失聪之后继续谱写了大量著名的交响曲，而欧拉在60岁左右双目失眠之后仍然以口述形式完成了几本书和 400 多篇论文，在数学上变得更加多产。 数学界从1911年开始出版《欧拉全集》，耗费了一个世纪的时间，已经出版了70余卷， 25000多页， 而这项庞大的出版任务还仍处于未完成状态。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickering.cn&quot;&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;http://www.flickering.cn/logo/flickering-logo.png&quot; alt=&quot;火光摇曳&quot; width=&quot;201&quot; height=&quot;217&quot;&gt;&lt;/a&gt;&lt;/p&gt;

											

</description>
        <pubDate>Mon, 30 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-30-%25e7%25a5%259e%25e5%25a5%2587%25e7%259a%2584%25e4%25bc%25bd%25e7%258e%259b%25e5%2587%25bd%25e6%2595%25b0%25e4%25b8%258a-d49d593f9.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-30-%25e7%25a5%259e%25e5%25a5%2587%25e7%259a%2584%25e4%25bc%25bd%25e7%258e%259b%25e5%2587%25bd%25e6%2595%25b0%25e4%25b8%258a-d49d593f9.html</guid>
        
        
      </item>
    
      <item>
        <title>使用Jekyll - Data Files简介</title>
        <description>

  &lt;p&gt;使用 &lt;code&gt;Jekyll&lt;/code&gt; 时，经常需要保存一些常用的数据，以便在模板中的随时调用。传统方式将数据写入 _config.yml 作为 &lt;code&gt;Site Variables&lt;/code&gt; ，会造成 _config.yml 过大，而且无法将数据与配置分离，规模增长时带来管理方面的困扰。&lt;/p&gt;

&lt;p&gt;Jekyll 最近引入 &lt;a href=&quot;http://jekyllrb.com/docs/datafiles/&quot; title=&quot;Data Files&quot;&gt;Data Files&lt;/a&gt; 功能，用来满足保存数据的需求。这一功能使得可以避免在模板中重复书写数据，也能避免频繁修改全局设置。插件和页面风格中也可以利用 Data Files 来保存配置。 Jekyll 支持 &lt;code&gt;YAML&lt;/code&gt; 和 &lt;code&gt;JSON&lt;/code&gt; 格式的文件，这些文件需要保存在 &lt;code&gt;_data&lt;/code&gt; 目录下（补充： &lt;code&gt;jekyll-2.1.0&lt;/code&gt; 开始， Data Files 支持在 &lt;code&gt;_data&lt;/code&gt; 目录下使用子目录来保存。）。&lt;/p&gt;

&lt;p&gt;因为 Data Files 采用 &lt;code&gt;YAML&lt;/code&gt; 和 &lt;code&gt;JSON&lt;/code&gt; 格式，所以简单易上手。&lt;/p&gt;

&lt;p&gt;让我们来一个网页列表的例子开始认识 Data Files 的神奇之处吧。&lt;/p&gt;

&lt;p&gt;这个网页列表中保存了一些网页的名称，地址，以及可选的备注与描述；不同类型的网页保存在各个类型的子分类节点中；分类系统支持多级结构，使用 &lt;code&gt;meta: false&lt;/code&gt; 表示该节点不包含网址元数据，而是用于包含其它节点的分类容器。&lt;/p&gt;

&lt;p&gt;首先初始化模板文件 &lt;a href=&quot;https://github.com/Lax/lax.github.com/blob/lax.github.com-jekyllrb/_pages/links.html&quot; title=&quot;links.html&quot;&gt;links.html&lt;/a&gt; （只展示代码部分）。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nerd_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意这段代码里的两个关键点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用 &lt;code&gt;site.data.nerd_urls&lt;/code&gt; 读取 &lt;code&gt;_data/nerd_urls.yml&lt;/code&gt; 文件中报错的 &lt;code&gt;yaml&lt;/code&gt; 数据。其中 &lt;code&gt;site.data.&lt;/code&gt; 前缀用于读取 &lt;code&gt;Data File&lt;/code&gt; ，之后的 &lt;code&gt;nerd_urls&lt;/code&gt; 为不含扩展名的文件名。&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;include&lt;/code&gt; 另一个模板文件，并将数据使用 &lt;code&gt;nodes&lt;/code&gt; 变量传值到模板文件中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再来看一下 &lt;a href=&quot;https://github.com/Lax/lax.github.com/blob/lax.github.com-jekyllrb/_includes/data_links.html&quot; title=&quot;_includes/data_links.html&quot;&gt;data_links.html&lt;/a&gt; 这个文件。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;	&amp;lt;li&amp;gt;{% if node.meta == false and node.data %}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}{% else %}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ node.link }}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;{% if node.desc %}&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;		{{ node.desc }}{% endif %}&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;	{% endif %}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里使用传入的 &lt;code&gt;nodes&lt;/code&gt; 变量（通过 &lt;code&gt;include.nodes&lt;/code&gt; ），递归构建一个 &lt;code&gt;ul&lt;/code&gt; 列表。&lt;/p&gt;

&lt;p&gt;至此，这个页面的模板部分已经完成。&lt;/p&gt;

&lt;p&gt;现在来补充数据文件 &lt;a href=&quot;https://github.com/Lax/lax.github.com/blob/lax.github.com-jekyllrb/_data/nerd_urls.yml&quot; title=&quot;_data/nerd_urls.yml&quot;&gt;nerd_urls.yml&lt;/a&gt; 。这是一个标准的 &lt;code&gt;YAML&lt;/code&gt; 文件。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;News&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WebSites&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lwn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lifehacker&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifehacker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hacker&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;News&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//ne&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ycombinator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blogs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Steve&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Souders&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tevesouders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pete&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Keen&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;petekeen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Joe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Armstrong&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joearms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最终生成的页面可以在 &lt;a href=&quot;http://blog.liulantao.com/links/&quot;&gt;http://blog.liulantao.com/links/&lt;/a&gt; 看到。&lt;/p&gt;

&lt;p&gt;总结：本文通过简单的例子展示了 &lt;code&gt;Data Files&lt;/code&gt; 的使用方法。
如果你有更好的想法欢迎留言交流。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/datafiles/&quot;&gt;jekyll文档中关于Data Files的说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Lax/lax.github.com/commit/3caa16daa0c258a50fcdf56c6018dfeecfa0950c&quot;&gt;文章相关源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  

</description>
        <pubDate>Sun, 29 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-29-2014-06-29-using-jekyll-data-files.html-871861a29.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-29-2014-06-29-using-jekyll-data-files.html-871861a29.html</guid>
        
        
      </item>
    
      <item>
        <title>生产环境Puppet升级笔记（3.4.3→3.6.2）</title>
        <description>

  &lt;p&gt;线上Puppet部署时采用的是版本3.4.3，最近发现客户端经常有一些warning提示，从提示信息看出涉及到跨版本的功能变化，因此对版本进行了一个有计划的升级。&lt;/p&gt;

&lt;p&gt;puppetlabs的最新版本为3.6.2。开始升级之前参考了官方的Release Notes(&lt;a href=&quot;http://docs.puppetlabs.com/puppet/3.5/reference/release_notes.html&quot; title=&quot;Puppet 3.5 Release Notes&quot;&gt;3.5&lt;/a&gt;,&lt;a href=&quot;http://docs.puppetlabs.com/puppet/3.6/reference/release_notes.html&quot; title=&quot;Puppet 3.6 Release Notes&quot;&gt;3.6&lt;/a&gt;)和其他人的文档(&lt;a href=&quot;http://rnelson0.com/2014/06/05/puppet-3-6-1-updates/&quot; title=&quot;PUPPET 3.6.1 UPDATES&quot;&gt;PUPPET 3.6.1 UPDATES&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;首先将yum仓库同步到yum.puppetlabs.com的最新状态，方便后续使用。&lt;/p&gt;

&lt;p&gt;升级分为master和agent两部分，分别进行调整。&lt;/p&gt;

&lt;h2 id=&quot;master&quot;&gt;master调整&lt;/h2&gt;

&lt;p&gt;master有两个明显的变化&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
&lt;code&gt;environmentpath&lt;/code&gt;支持&lt;/li&gt;
  &lt;li&gt;Package模块中引入的&lt;code&gt;allow_virtual&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;environmentpath&quot;&gt;environmentpath调整&lt;/h3&gt;

&lt;p&gt;关于&lt;code&gt;environmentpath&lt;/code&gt;，配置文件改动比较小，只需修改&lt;code&gt;puppet.conf&lt;/code&gt;中的&lt;code&gt;[master]&lt;/code&gt;部分&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+    environmentpath = $confdir/environments
-    modulepath = $confdir/modules:/usr/share/puppet/modules
-    manifestdir = $confdir/manifests
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;早期版本的&lt;code&gt;envorinment&lt;/code&gt;支持通过在puppet.conf中额外的&lt;code&gt;[production]&lt;/code&gt;和&lt;code&gt;[testing]&lt;/code&gt;部分实现。需要删除&lt;code&gt;puppet.conf&lt;/code&gt;中自定义的environment部分。&lt;/p&gt;

&lt;p&gt;同时需要对目录进行调整，这部分工作量稍大，也在可接受的范围内。以下示例中星号(*)标记的目录对应调整即可。&lt;/p&gt;

&lt;p&gt;调整之前目录结构为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── auth.conf
├── autosign.conf
├── puppet.conf
├── manifests
│   ├── production   *
│   └── testing    *
├── modules
│   ├── production   *
│   └── testing    *
├── reports
├── ssl
├── var
└── yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调整之后目录结构为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── auth.conf
├── autosign.conf
├── puppet.conf
├── environments
│   ├── production
│   │   ├── manifests *
│   │   └── modules   *
│   └── testing
│       ├── manifests *
│       └── modules   *
├── reports
├── ssl
├── var
└── yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;allowvirtual&quot;&gt;allow_virtual调整&lt;/h3&gt;

&lt;p&gt;这是一个新增的特性，相关背景可参考&lt;a href=&quot;https://tickets.puppetlabs.com/browse/PUP-897&quot;&gt;PDP-897&lt;/a&gt;。由于默认值变化，如果不配置agent会收到一个warning信息。&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;environments/production/manifests/site.pp&lt;/code&gt;和&lt;code&gt;environments/testing/manifests/site.pp&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+    Package {
+      allow_virtual =&amp;gt; true,
+    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;软件包升级&lt;/h3&gt;

&lt;p&gt;通过gem升级安装&lt;code&gt;puppet-3.6.2&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install puppet --version 3.6.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装后重新启动puppet master即可。&lt;/p&gt;

&lt;h2 id=&quot;agent&quot;&gt;agent调整&lt;/h2&gt;

&lt;p&gt;master端设置的&lt;code&gt;allow_virtual&lt;/code&gt;是新增的一个特性，如果agent不支持，会报错，将agent的puppet版本并重启进程即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: Failed to apply catalog: Invalid parameter allow_virtual
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理论上直接升级客户端puppet到3.6.2版本即可完成。不过在升级后发现使用&lt;code&gt;puppet agent --genconfig&lt;/code&gt;生成的配置文件仍然会有warning。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Warning: Setting manifest is deprecated in puppet.conf. See http://links.puppetlabs.com/env-settings-deprecations
   (at /usr/lib/ruby/site_ruby/1.8/puppet/settings.rb:1067:in `each&#39;)
Warning: Setting modulepath is deprecated in puppet.conf. See http://links.puppetlabs.com/env-settings-deprecations
   (at /usr/lib/ruby/site_ruby/1.8/puppet/settings.rb:1067:in `each&#39;)
Warning: Setting templatedir is deprecated. See http://links.puppetlabs.com/env-settings-deprecations
   (at /usr/lib/ruby/site_ruby/1.8/puppet/settings.rb:1071:in `each&#39;)
Warning: Setting manifestdir is deprecated. See http://links.puppetlabs.com/env-settings-deprecations
   (at /usr/lib/ruby/site_ruby/1.8/puppet/settings.rb:1071:in `each&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接根据提示取消指定的配置项即可消除警告。这里使用一个脚本进行修改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

for s in manifest modulepath templatedir manifestdir
do
	grep &quot;^    $s = &quot; /etc/puppet/puppet.conf
	sed -i -e &quot;/^    $s = /s/^/#/&quot; /etc/puppet/puppet.conf
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用调整后的配置文件启动&lt;code&gt;puppet agent -t&lt;/code&gt;，可以看到成功运行并且不再有warning。&lt;/p&gt;

  

</description>
        <pubDate>Tue, 17 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-17-2014-06-17-upgrade-puppet-production-3-4-3-to-3-6-2.html-c08d0144e.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-17-2014-06-17-upgrade-puppet-production-3-4-3-to-3-6-2.html-c08d0144e.html</guid>
        
        
      </item>
    
      <item>
        <title>Serverspec 工具介绍</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;去年曾经写过一篇&lt;a href=&quot;http://chenlinux.com/2013/01/10/rspec-puppet-intro&quot;&gt;文章&lt;/a&gt;里提到做 puppet 的测试，用的是 &lt;a href=&quot;http://rspec-puppet.com&quot;&gt;rspec-puppet&lt;/a&gt; 工具。不过这个工具的作用只是能确保在 Puppet Master 上你撰写的 .pp 文件可以按照你的预期正常编译完毕，并不代表真实的节点就是按照这个状态维护的。所以今天介绍另一个工具，Serverspec，它拥有和 rspec-puppet 类似的语法(都是 Rspec 衍生品)，同时又是真的 SSH 到远程主机上去做测试！官网见：&lt;a href=&quot;http://serverspec.org&quot;&gt;http://serverspec.org&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;安装直接通过 &lt;code&gt;gem install serverspec&lt;/code&gt; 方式即可完成。然后通过 &lt;code&gt;serverspec-init&lt;/code&gt; 命令可以创建处理来一个测试模板：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── Rakefile
└── spec
    ├── 10.4.1.21
    │   └── puppet_spec.rb
    ├── spec_helper.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文件其实非常简单，所以之后就可以不用命令，自己创建目录和测试文件好了。目录以远端主机 IP 命名，测试文件叫 &lt;code&gt;foobar_spec.rb&lt;/code&gt; 也没关系，反正在 Rakefile 里是通过 &lt;code&gt;spec/*/*_spec.rb&lt;/code&gt; 载入的。&lt;/p&gt;

&lt;p&gt;下面是我写的这个 &lt;code&gt;puppet_spec.rb&lt;/code&gt; 实例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;spec_helper&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: bonding&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;eth2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_ipv4_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.0.200&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_mounted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ext4&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux_kernel_parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;vm.swappiness&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yumrepo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;epel&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;puppetmaster&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;belong_to_group&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;puppet&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_login_shell&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/bin/sh&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gem&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;3.6.1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;nginx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;nginx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_enabled&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_running&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;%w[8140 18140]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/etc/nginx/sites-enabled/puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_linked_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/etc/puppet/webui/ngx_puppetmaster.conf&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_readable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;nobody&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\n\s*server 127.0.0.1:18140;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx -t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_stderr&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/ok/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_exit_status&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;rrdcached&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_running&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/-j \/omd\/sites\/cdn\/var\/rrdcached/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;基本上可以说跟 puppet 最常用的几个类型对应的测试就都在上面展示了。此外，Serverspec 与时俱进，还提供了 &lt;code&gt;cgroup&lt;/code&gt; 和 &lt;code&gt;lxc&lt;/code&gt; 的测试器。这里就没写了。&lt;/p&gt;

&lt;p&gt;这里有个注意到的问题就是网卡速度那里，是不支持测试 bonding 网卡的。它 ssh 上去后其实就是执行 ethtool 命令，ethtool 命令获取不到，自然也就没法测试，肯定会报测试失败。&lt;/p&gt;

&lt;p&gt;另一个问题就是文件内容匹配那块，虽然文档示例里用了 &lt;code&gt;/^begin/&lt;/code&gt; 但是实测这个会把整个文本读成一个大字符串来匹配，所以单行的开头不能用 &lt;code&gt;^&lt;/code&gt; 而是用 &lt;code&gt;\n&lt;/code&gt; 来做。&lt;/p&gt;

&lt;p&gt;正常情况下，写完测试用例，就可以运行 &lt;code&gt;rake spec&lt;/code&gt; 命令跑测试了。不过熟悉我的朋友都知道人人网这边服务器都是统一通过 Kerberos 认证来管理权限的，而 各种语言的 SSH 模块默认都不太支持 krb5。所以我这还需要先解决 Serverspec 的 krb5 支持问题。&lt;/p&gt;

&lt;p&gt;感谢 &lt;a href=&quot;http://weibo.com/u/1653644220&quot;&gt;@懒桃儿吃桃儿&lt;/a&gt; 童鞋贡献的&lt;a href=&quot;https://github.com/Lax/net-ssh-kerberos&quot;&gt;模块&lt;/a&gt;，部署过程如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/Lax/net-ssh-kerberos.git
$ pushd net-ssh-kerberos
$ gem build net-ssh-kerberos.gemspec
$ gem install net-ssh-krb-0.3.0.gem
$ popd
$ diff spec/spec_helper.rb spec/spec_helper.rb.orig
4,5d3
&amp;lt; require &#39;rubygems&#39;
&amp;lt; require &#39;net/ssh/kerberos&#39;
29d26
&amp;lt;       options[:auth_methods] = [&quot;gssapi-with-mic&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模块文档上说可以通过 Gemfile 配合 &lt;code&gt;Bundler.require&lt;/code&gt; 指令直接运行，我测试自己写脚本的话确实没有问题，但是融合到 &lt;code&gt;spec_helper.rb&lt;/code&gt; 里就不行，所以只能自行编译安装，然后通过 rubygems 模块来加载了。&lt;/p&gt;

&lt;p&gt;最后，就可以看到下面这样的输出了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake spec
/usr/bin/ruby -S rspec spec/10.4.1.21/nginx_spec.rb
.......................

Finished in 9.99 seconds
23 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Fri, 13 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-13-serverspec-intro-3a5f17fda.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-13-serverspec-intro-3a5f17fda.html</guid>
        
        
      </item>
    
      <item>
        <title>用 Redis 做分布式 DNS/HTTP 检测汇总系统</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;一年前搞的一套小脚本，今天翻博客发现没发过，现在发上来好了。主要背景是这样：考虑到有 DNS 和 HTTP 劫持需要监控，但是很多 DNS 服务器对非本区域本运营商的来源请求是拒绝做出响应的，所以得把监控点分散到各地去。其实做这个事情用 nagios 的分布式就足够了，不过如果想做即时触发的紧急任务，就算在 nagios 页面上点击立刻执行，到返回全部结果也得有一阵子。所以选择了自己写一套分布式的异步系统。&lt;/p&gt;

&lt;p&gt;中控端脚本如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Modern::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Perl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Redis::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RipeRedis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storable&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw/freeze thaw/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;YAML::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Syck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;fmn.xnimg.cn&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$master&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;10.4.1.21&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$redis&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Redis::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RipeRedis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dnslist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DNS.yml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%$dnslist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dnslist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dnslist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnslist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dnslist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;task&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dnslist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnslist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dnslist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$isp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;task&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;sx&quot;&gt;qw( report )&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ch_name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subs_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Subscribed: $ch_name. Active: $subs_num\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ch_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s A %s @%s in %s got %s length %s\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;分布在各地的客户端脚本如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Modern::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Perl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Redis::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RipeRedis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Storable&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw/freeze thaw/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Digest::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MD5&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw/md5_hex/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$master&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;10.4.1.21&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$local&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;192.168.0.2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$redisr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Redis::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RipeRedis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$redisp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Redis::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RipeRedis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$redisr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;task&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ch_name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$subs_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Subscribed: $ch_name. Active: $subs_num\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ch_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dnslist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;resolv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$err_msg&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$err_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Error: ($err_code) $err_msg\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m/^\d+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$resolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;AnyEvent::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Socket::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_address&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$resolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;$domain&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httptest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;httptest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://$domain/10k.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http_get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want_body_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hdl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::Socket::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack_sockaddr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getpeername&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hdl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;fh&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hdr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hdr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;content-length&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$redisp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;report&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里需要单独建立两个 &lt;code&gt;$redisr&lt;/code&gt; 和 &lt;code&gt;$redisp&lt;/code&gt; ，因为前一个已经用来 subscribe 之后就不能同时用于 publish 了，会报错。从理解上这是个很扯淡的事情，不过实际运行结果就是如此。。。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Fri, 13 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-13-anyevent-redis-for-dns-check-37591b507.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-13-anyevent-redis-for-dns-check-37591b507.html</guid>
        
        
      </item>
    
      <item>
        <title>Rex 简明手册</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;Rex 是 Perl 编写的基于 SSH 链接的集群配置管理系统，语法上类似 Puppet DSL。官网中文版见 &lt;a href=&quot;http://rex.perl-china.com&quot;&gt;http://rex.perl-china.com&lt;/a&gt; 。本文仅为本人在部门 Wiki 上编写的简介性文档。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;常用命令参数&lt;/h2&gt;

&lt;p&gt;rex 命令参数很多，不过因为我们的环境是 krb 认证的，所以有些参数只能写在 Rexfile 里。所以一般固定在存放了 Rexfile 的 /etc/puppet/webui 下执行命令，很多配置就自动加载了。那么还需要用到的命令参数基本就只有下面几个：&lt;/p&gt;

&lt;p&gt;-Tv： 查看当前 Rexfile 里定义了哪些 Task 任务，以及服务器组。&lt;/p&gt;

&lt;p&gt;-H： 指定 Task 将在哪些 Host 上执行。这里比较方便的地方是支持 &lt;code&gt;10.5.16.[95..110]&lt;/code&gt; 这样的写法。&lt;/p&gt;

&lt;p&gt;-G： 指定 Task 将在哪些 Group 上执行。Group 的定义方式很多，Rex 默认支持的有直接在 Rexfile 里通过 group 指令指定，通过 ini 配置文件设定等等。目前我是实现了一个 &lt;code&gt;groups_db&lt;/code&gt; 指令，来从我们的 sqlite 里获取。&lt;code&gt;groups_db(&#39;cdnbj::nginx&#39;)&lt;/code&gt; 就会自动生成一个名叫 ‘cdnbj::nginx’ 的服务器组，包括 cdnbj 里所有部署了 nginx 的服务器。&lt;/p&gt;

&lt;p&gt;-e： 指定一个临时任务。通常是’say run “ipconfig”‘这样的简单命令形式。如果需要复杂逻辑，还是在 Rexfile 里书写 Task。&lt;/p&gt;

&lt;p&gt;-q：指定运行日志级别，有 -q 和 -qq。&lt;/p&gt;

&lt;p&gt;-d：指定运行日志级别，有 -d 和 -dd。&lt;/p&gt;

&lt;h2 id=&quot;rexfile-&quot;&gt;Rexfile 介绍&lt;/h2&gt;

&lt;p&gt;参数设置部分：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OpenSSH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;krb5_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parallelism&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这四行指定采用 kerberos 认证，并发 10 个进程执行 ssh 命令。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;install puppet agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;puppet_install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;puppet_install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;puppet_install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这几行就是 Rexfile 的任务定义主体格式。task 指令定义任务，任务会在具体的 -H 或者 -G 服务器上执行。其他都是可选项，desc内容会在 -Tv 的时候显示；before 和 after 定义的任务会在执行对应 task 之前或之后，在’&#39;’rex命令执行处，即10.4.1.21本地’&#39;’执行。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;常用指令介绍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;运行命令。如果有回调函数，那么会把 stdout 和 stderr 传给回调函数；如果没有，直接把 stdout 作为返回值。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;uptime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nginx -v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分发文件。语法类似 Puppet 的 file。支持 source、template、ensure、on_change 等操作。注意：rex 是顺序执行 Rexfile 的，所以不用设置 Puppet 的 require 指令。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/etc/yum.repos.d/xiaonei-private.repo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;repos/xiaonei-private.repo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/etc/nginx/nginx.conf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;templates/etc/nginx/nginx.conf.tpl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nginx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nginx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;644&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;on_change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;restart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/etc/nginx/conf.d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;directory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;pkg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装软件包，在早期版本命令写作 &lt;code&gt;install package =&amp;gt; &quot;nginx&quot;&lt;/code&gt; ，最近改成 &lt;code&gt;pkg&lt;/code&gt; 了，更像 Puppet 语法了。&lt;/p&gt;

&lt;p&gt;也支持传递数组作为 pkg 内容。另外，rex 还 提供了一个 update_package_db 指令，用于执行 &lt;code&gt;yum clean all&lt;/code&gt; 或者 &lt;code&gt;apt-get update&lt;/code&gt; 操作。这点是 Puppet 欠缺的。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;update_package_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$packages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operating_system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Debian&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apache2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;libphp5-apache2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CentOS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;httpd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;php5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ensure 也支持 present、absent、latest 等几种含义。同 Puppet。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;account&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户管理原先用 &lt;code&gt;create_user&lt;/code&gt; 和 &lt;code&gt;create_group&lt;/code&gt; 指令，最近把 &lt;code&gt;create_user&lt;/code&gt; 更新为 &lt;code&gt;account&lt;/code&gt; 指令。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;create_group&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;puppet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ensure&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/home/puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Puppet Account&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expire&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;2015-05-30&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;no_create_home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ssh_key&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChUw...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来同时观测多台主机的日志的最新追加情况。应该是比较有用的一个小功能。代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/var/log/syslog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_current_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;server&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$server&amp;gt;&amp;gt; $data\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;远程主机详情相关变量&lt;/h2&gt;

&lt;p&gt;Puppet 有专门的 Facts 变量来判定远程主机的详情。Rex 因为走 SSH 连接，不会在远程主机上跑一个 agent 来收集这些信息，所以还是通过远程执行命令的方式来提供相关内容。目前常用的几个函数(也可以认为是变量)有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is_redhat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个用来判断操作系统是否是 RedHat 系列。之前因为有一批 Debian 的机器，所以 Rexfile 里一直有这么个操作逻辑：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_debian&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_redhat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;operating_system_version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个用来判断具体的操作系统版本号。比如 CentOS5 跟 CentOS6 应该应用的操作就不一样，甚至 CentOS6.5 和 CentOS6.2 也有可能不一致。&lt;/p&gt;

&lt;p&gt;比如 Rexfile 里的 1w10 任务：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_redhat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operating_system_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;route&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rex 可以收集的信息比 puppet 要多很多，比如网络相关、sysctl 相关等等。Rexfile 里的 1w10 任务用到了 route 信息来获取默认网关和网卡接口。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$default_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m/UG/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;destination&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$default_route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$default_gw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$default_route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$default_if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$default_route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ip route change default via ${default_gw} dev ${default_if} initcwnd 10 initrwnd 10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在多台主机执行任务的时候，大多希望在输出的时候看到某条结果是哪个主机返回的。前面 tail 任务就用到了，不过写起来非常复杂的样子。其实 rex 提供给更简洁一点的写法。就是 connection-&amp;gt;server。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;tellmewhoyouare&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当前连接的服务器的整个信息，也可以通过 &lt;code&gt;get_system_information&lt;/code&gt; 指令来获取，这两个指令其实是等同的。不过根据字面意思一般用来不同语境下。&lt;/p&gt;

&lt;p&gt;这些信息如果要完整查看，可以通过 &lt;code&gt;dump_system_information&lt;/code&gt; 指令来查看。这个命令跟 &lt;code&gt;print Dumper get_system_information()&lt;/code&gt; 不一样的是，会把每个键作为单独变量。而这些变量就是可以直接用于 rex 的 template 里的内嵌变量。比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eth0_ip&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;visible_hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不在 &lt;code&gt;dump_system_information&lt;/code&gt; 清单里的变量，也想在 template 里使用的，就必须显式传递。这点和 Puppet 不一致，puppet 在 template 里可以通过 &lt;code&gt;scope.lookupvar()&lt;/code&gt; 指令获取任意pp类里设定的变量，这一点完全无视词法作用域的存在==！&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/etc/elasticsearch/elasticsearch.yml&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;files/es.yml.tmpl&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;clustername&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;logstash&#39;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对应的 es.yml.tmpl 里写作：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;clustername:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;clustername&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样才行。&lt;/p&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Thu, 12 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-12-rex-usage-d6a821bf7.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-12-rex-usage-d6a821bf7.html</guid>
        
        
      </item>
    
      <item>
        <title>PerlDancer 框架笔记</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;Dancer 是 Perl 的 web 开发框架，在 metacpan 上有 100 多个 like。其语法结构都起源自 Ruby 的 sinatra 框架，sinatra 曾经在自己官网上悬挂“perldancer is good”标语以示对 perldancer 的支持。Dancer 官网见： &lt;a href=&quot;http://perldancer.org/&quot;&gt;http://perldancer.org/&lt;/a&gt; 本文系本人在部门 Wiki 上稍微写的几行介绍性质的笔记。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;简单示例&lt;/h2&gt;

&lt;p&gt;Dancer 作为微框架，可以直接单文件快速运行简单的 web 功能。示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dancer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后直接通过 &lt;code&gt;perl test.pl&lt;/code&gt; 命令既可以在 localhost:3000 运行起来一个 hello world 页面了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;目录结构&lt;/h2&gt;

&lt;p&gt;完整的 Dancer 应用，可以通过 &lt;code&gt;dancer -a MyApp&lt;/code&gt; 命令创建，目录结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MyApp/
├── bin
│   └── app.pl                    # 程序运行入口，可以直接通过./app.pl运行，也可以通过plackup -s Starman app.pl来切换其他高性能服务器
├── config.yml                     # 主配置文件
├── environments
│   ├── development.yml
│   └── production.yml
├── lib
│   └── MyApp.pm                  # Perl代码入口，route、controller、ORM 等都在 lib 下
├── Makefile.PL
├── MANIFEST
├── MANIFEST.SKIP
├── public                         # public/ 下的文件会直接作为静态文件发布，相当于 DocumentRoot
│   ├── 404.html
│   ├── 500.html
│   ├── css
│   │   ├── error.css
│   │   └── style.css
│   ├── dispatch.cgi
│   ├── dispatch.fcgi
│   ├── favicon.ico
│   ├── images
│   │   ├── perldancer-bg.jpg
│   │   └── perldancer.jpg
│   └── javascripts
│       └── jquery.js
├── t
│   ├── 001_base.t
│   └── 002_index_route.t
└── views                           # views/ 下的文件是页面模板，在 lib 里通过 template(&#39;index&#39;) 方式调用
    ├── index.tt
    └── layouts
        └── main.tt                 # layouts 是页面模板的底层模板，主底层模板可以在 config.yml 里指定
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;常用插件&lt;/h2&gt;

&lt;p&gt;目前用 Dancer 写的 CdnManage 平台，用到的插件包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Template::Xslate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;采用 Text::Xslate 作为模板引擎。xslate 引擎是用 XS 写的类 Perl6 语法模板引擎，性能很好。语法示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;: $object.accessor :&amp;gt;
&amp;lt;: $str :&amp;gt;
&amp;lt;: $array.0 :&amp;gt;
&amp;lt;: $hash.key :&amp;gt;
: for $arrayref -&amp;gt; $item {
    index: &amp;lt;: $~item :&amp;gt; value: &amp;lt;: $item :&amp;gt;
: }
: if ( $var == nil ) {
: } else if ( $val == &quot;text&quot; ) {
: } else {
:     while $dbh.fetch() -&amp;gt; $item {
:     }
: }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，CdnManage 中，因为是从 TT2 模板迁移到 xslate 里的，所以单独配置了 config.yml，没有用 : 号而是沿用了 % 号。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Session::YAML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;采用 YAML 存储 session，这个作为内部应用足够了，升级的话应该用 mysql、mongo、elasticsearch之类的存储，都有现成插件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plack::Middleware::Deflater&lt;/li&gt;
  &lt;li&gt;Plack::Middleware::ETag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面两个作为给 public/ 下文件加缓存和压缩的优化。在 config.yml 里添加如下配置即可使用：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;plack_middlewares&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Plack::Middleware::Deflater&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Plack::Middleware::ETag&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::Auth::Extensible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给 route 加认证功能，有 require_role 和 require_user 两种形式，示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/admin&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;require_user&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;admin&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/purge&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;require_role&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qr/^purge_\w+/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::Email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;发邮件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::GearmanXS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将需要较长时间运行完的任务通过 gearman 分发到其他后台任务脚本上去完成。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::Datebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据库插件，可以直接按照 DBI 操作，也提供了简单的 quick_select/insert 等指令。示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/users/:id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;display_user&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quick_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;users&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果在 config.yml 定义了多个库，则通过 &lt;code&gt;database(&#39;name&#39;)&lt;/code&gt; 的方式来调用。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;puppet&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SQLite&quot;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/etc/puppet/webui/node_info.db&quot;&lt;/span&gt;
      &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cdnmanage&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mysql&quot;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cdnmanage&quot;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;3306&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pass&quot;&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;connection_check_threshold&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;on_connect_do&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;NAMES&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;utf8&#39;&quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CHARACTER&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;utf8&#39;&quot;&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更完善的 ORM 使用，见 Dancer::Plugin::DBIC 插件，他使用的是 DBIx::Class 框架做 ORM，示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/users/:user_id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;User&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;user_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 如果只有一个默认的schema在config.yml里那么上面这行可以简写成下行&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;User&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;user_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;elasticsearch 插件，类似 Dancer::Plugin::Database；所以同理，也有更偏 ORM 一点的 Dancer::Plugin::ElasticModel 插件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::Deferred&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;页面消息提示插件。使用示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#^/puppetdb/#&lt;/span&gt;
            &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#^/puppetdb/api/#&lt;/span&gt;
            &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_has_role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;SOM&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;no permission&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在底层模板layouts/main.tt 中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%% if $deferred.error {
  &amp;lt;div class=&quot;alert alert-success&quot;&amp;gt; [% $deferred.error %] &amp;lt;/div&amp;gt;
%% }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::Ajax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展默认的 get/post/delete/put 指令，提供 ajax 指令。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dancer::Plugin::SimpleCRUD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;提供简便的数据库 CRUD 操作表单。目前 Puppet 的 SQLite 操作实例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;simple_crud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db_connection_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;puppet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db_table&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;node_info&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_column&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;node_info&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record_title&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Puppet Node&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deleteable&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paginate&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validation&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/^(\w,?)+$/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/^\w+$/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/^\w+$/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;enter like &quot;puppetd,repos&quot;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;an english word only&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;qw(node_fqdn environment role)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;custom_columns&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;include_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;raw_column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;classes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /,/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$role&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;role&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$env&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;environment&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;a href=&#39;/puppetdb/$env/$_/$role/view&#39;&amp;gt;$_&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; / &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@lines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Thu, 12 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-12-perldancer-tips-deed5a1d0.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-12-perldancer-tips-deed5a1d0.html</guid>
        
        
      </item>
    
      <item>
        <title>Perl 编程的个人惯例</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;Perl 代码规范可以参考著名的《Perl 最佳实践》一书。当然，PBP 上的规定比较严格，实际生活中绝对多数 Perl 程序都无法通过以 PBP 规范编写的 Perl::Critic 模块的校验。本文仅为本人在部门 Wiki 上以部分常见用法作为示例的介绍性文档。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;格式化&lt;/h2&gt;

&lt;p&gt;所有已经完成功能的 Perl 脚本，强烈推荐使用 Perl::Tidy 模块格式化其内容。具体命令为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;perltidy your.pl &amp;amp;&amp;amp; mv your.pl.tdy your.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;模板&lt;/h2&gt;

&lt;p&gt;为调试和使用方便，强烈建议在所有 Perl 程序开始位置使用如下模板：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个模板最重要最常见的作用，就是说，程序内不允许直接使用未经初始化的变量，强制要求指定变量作用域范围，也不允许跨越词法作用域调用变量。&lt;/p&gt;

&lt;p&gt;此外，考虑 CentOS6 已经成为我们线上主流操作系统，建议继续添加下行模板：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;10 版本是 Perl5 的一次重大更新，添加了 state 变量、say 指令、// 判断符、%+ 正则捕获哈希、given-when流程和 ~~ 智能匹配符，都是比较常用和好用的功能。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;注释与文档&lt;/h2&gt;

&lt;p&gt;Perl 注释以 ‘#’ 号开头，但是并没有提供方便的读取注释的方法。所以如果有需要，建议书写 POD 式的文档型注释。CPAN 提供有一系列模块处理程序内部的 POD 文档，比如可以直接从 POD 生成 –help 输出，README 文本等等。&lt;/p&gt;

&lt;p&gt;POD 格式包括：&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;标题&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;标记文档开始&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;大标题&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;标记为标题文档，类似&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;，同理还有&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head2&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/3/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;over&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;标记一段落开始&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;元素&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;标记该段落中某个列表元素&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;

  &lt;span class=&quot;err&quot;&gt;标记该段落结束。&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;和&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;在用&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POD&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;书写函数注释的时候非常常见，每个函数上面一对&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;代码示例&lt;/h3&gt;

&lt;p&gt;直接空四格，这点类似 markdown&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;变量和链接格式的快捷书写方式&lt;/h3&gt;

&lt;p&gt;C&amp;lt;code&amp;gt; 内含代码中如果本身带有符号的，可以写作 C&amp;lt;&amp;lt; code &amp;gt;&amp;gt;的形式和&amp;gt;&lt;/p&gt;

&lt;p&gt;L&amp;lt;name&amp;gt; 内含name为 CPAN 模块名，自动生成该模块在 CPAN 上的 url 地址连接&lt;/p&gt;

&lt;h2 id=&quot;modern-perl&quot;&gt;modern perl&lt;/h2&gt;

&lt;h3 id=&quot;oop&quot;&gt;OOP&lt;/h3&gt;

&lt;p&gt;Perl5 采用 bless 指令将一个数据结构跟一个类名结合到一起就成为了类，其最简写法如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是不推荐如此构建类。强烈推荐使用 Moo 模块完成 Perl5 的 OOP。文档见： https://metacpan.org/pod/Moo&lt;/p&gt;

&lt;p&gt;最常用的属性、继承和角色三大功能示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Moo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Bar::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Roles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Moo::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;length&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;bar&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foo::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Moo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Bar::Roles&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;ro&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;foo&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;lazy&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_build_hight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foo::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;myfoo&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;# myfoobar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;/h3&gt;

&lt;p&gt;Perl5 有独特的 TODO 语法叫 ‘…‘，在没有实现的地方，使用这个指令就可以了。不运行到这个地方就毫无影响，到这里就会直接显示“Unimplemented at line N”的返回。&lt;/p&gt;

&lt;p&gt;示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;somthing_todo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;正则&lt;/h3&gt;

&lt;p&gt;正则式是　Perl5 最强大和头疼的地方。这里不好说太多。只能说，能找到 CPAN 模块实现的，就不要自己写正则了。。。&lt;/p&gt;

&lt;p&gt;如果要写，尽量使用 ‘/x’ 开启多行模式，然后每行写注释。&lt;/p&gt;

&lt;p&gt;最常用的正则模块有 Regexp::Common 和 Regexp::Log。&lt;/p&gt;

&lt;p&gt;日志处理方面，对 IP 归类 建议采用 Net::IP::Match::Trie 模块。此外，前缀树优化在 Perl5.14 开始成为正则引擎默认行为，所以请尽量使用新版本。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;文件操作&lt;/h3&gt;

&lt;p&gt;open指令请使用三参数结构避免歧义以及恶意文件名问题：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;data.txt&#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在 5.10.1 以后，autodie 模块进入 corelist，所以可以这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autodie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;data.txt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更好的版本，推荐 Path::Tiny 模块，这是最近一年来在 metacpan 上多次周评分榜单第一的模块。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Path::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tiny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;data.txt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 不存在就先创建&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 读取全部内容&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 按行读取内容&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 写入内容&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;new data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 追加内容&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;newer data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 目录操作&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/tmp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qr/^\.\w$/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 类似 File::Find&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recurse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而 File::Find 的 更好的替代版本，推荐 Path::Iterator::Rule 模块，速度也比上面 Path::Tiny 里的 ‘$d-&amp;gt;iterator()’ 要好。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;网络操作&lt;/h3&gt;

&lt;p&gt;HTTP 客户端一直以来一般使用 LWP::UserAgent 模块，不过作为小规模应用，推荐使用 HTTP::Tiny 模块，因为该模块已经在 Perl5.14 版本进入 corelist，在简单请求下性能也比 LWP 要好，不少模块已经在迁移依赖到 HTTP::Tiny 上。&lt;/p&gt;

&lt;p&gt;而对于高性能需求，推荐使用 AnyEvent::HTTP 模块，基于 EV 事件驱动库，示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@urls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http_get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如需并发控制，事件流程的同步控制等功能，推荐使用 Promises 或者 Future 模块。同名的相关概念目前在 JS 和 Scala 中都有。&lt;/p&gt;

&lt;p&gt;对于 HTML 解析，较为规范的情况下，不要再使用正则解析，而通过 DOM 树本身来做。以 XPath 路径查询的，推荐 Web::Scraper 模块；以 CSS 选择器查询的，推荐 Mojo::UserAgent 配合 Mojo::DOM 模块完成。示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mojo::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserAgent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;www.perl.org&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;非 HTTP 的网络编程，一般使用 IO::Socket::INET 模块，这里推荐继续使用 AnyEvent::Socket 模块，以利用 AnyEvent 的事件驱动性能。示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;tcp_server&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;undef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8888&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;syswrite&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tcp_connect&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;localhost&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8888&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sysread&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;web-&quot;&gt;web 编程&lt;/h3&gt;

&lt;p&gt;CGI.pm 已经从 Perl5.20 开始准备移出 corelist，所以不要再使用 CGI 做 web 编程了，Plack/PSGI 才是王道。作为简单应用，推荐使用 Dancer 微框架，完整的复杂应用，可以使用 Mojolicious 框架。&lt;/p&gt;

&lt;p&gt;Dancer 框架示例如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dancer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/:name&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;hello &#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Thu, 12 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-12-perl-tips-031b63583.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-12-perl-tips-031b63583.html</guid>
        
        
      </item>
    
      <item>
        <title>用 LEK 组合处理 Nginx 访问日志</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;Tengine 支持通过 syslog 方式发送日志（现在 Nginx 官方也支持了），所以可以通过 syslog 发送访问日志到 logstash 平台上，这种做法相对来说对线上服务器影响最小。最近折腾这件事情，一路碰到几个难点，把解决和优化思路记录一下。&lt;/p&gt;

&lt;h2 id=&quot;grok&quot;&gt;少用 Grok&lt;/h2&gt;

&lt;p&gt;感谢群里 @wood 童鞋提供的信息，Grok 在高压力情况下确实比较容易率先成为瓶颈。所以在日志格式可控的情况下，最好可以想办法跳过使用 Grok 的环节。在早先的 cookbook 里，就有通过自定义 LogFormat 成 JSON 样式的做法。我前年博客上也写过 nginx 上如此做的示例：&lt;a href=&quot;http://chenlinux.com/2012/09/21/json-event-for-logstash/index.html&quot;&gt;http://chenlinux.com/2012/09/21/json-event-for-logstash/index.html&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不过这次并没有采用这种方式，而是定义日志格式成下面的样子，因为这种分割线方式对 Hive 平台同样是友好的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log_format syslog &#39;$remote_addr|$host|$request_uri|$status|$request_time|$body_bytes_sent|&#39;
                  &#39;$upstream_addr|$upstream_status|$upstream_response_time|&#39;
                  &#39;$http_referrer|$http_add_x_forwarded_for|$http_user_agent&#39;;
access_log syslog:user:info:10.4.16.68:29125:tengine syslog ratio=0.1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么不用 Grok 怎么做呢？这里有一个很炫酷的写法。下面是 logstash 配置里 filter 段的实例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filter {
    ruby {
        remove_field =&amp;gt; [&#39;@version&#39;, &#39;priority&#39;, &#39;timestamp&#39;, &#39;logsource&#39;, &#39;severity&#39;, &#39;severity_label&#39;, &#39;facility&#39;, &#39;facility_label&#39;, &#39;pid&#39;,&#39;message&#39;]
        init =&amp;gt; &quot;@kname = [&#39;client&#39;,&#39;servername&#39;,&#39;url&#39;,&#39;status&#39;,&#39;time&#39;,&#39;size&#39;,&#39;upstream&#39;,&#39;upstreamstatus&#39;,&#39;upstreamtime&#39;,&#39;referer&#39;,&#39;xff&#39;,&#39;useragent&#39;]&quot;
        code =&amp;gt; &quot;event.append(Hash[@kname.zip(event[&#39;message&#39;].split(&#39;|&#39;))])&quot;
    }
    mutate {
        convert =&amp;gt; [&quot;size&quot;, &quot;integer&quot;, &quot;time&quot;, &quot;float&quot;, &quot;upstreamtime&quot;, &quot;float&quot;]
    }
    geoip {
        source =&amp;gt; &quot;client&quot;
        fields =&amp;gt; [&quot;country_name&quot;, &quot;region_name&quot;, &quot;city_name&quot;, &quot;real_region_name&quot;, &quot;latitude&quot;, &quot;longitude&quot;]
        remove_field =&amp;gt; [ &quot;[geoip][longitude]&quot;, &quot;[geoip][latitude]&quot; ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而要达到跟这段 ruby+mutate 效果一致的 grok ，写法是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filter {
    grok {
        match =&amp;gt; [&quot;message&quot;, &quot;%{IPORHOST:client}\|%{HOST:servername}\|%{URIPATHPARAM:url}\|%{NUMBER:status}\|(?:%{NUMBER:time:int}|-)\|(?:%{NUMBER:size}|-)\|(?:%{HOSTPORT:upstream}|-)\|(?:%{NUMBER:upstreamstatus}|-)\|(?:%{NUMBER:upstreamtime:int}|-)\|(?:%{URI:referer}|-)\|%{GREEDYDATA:xff}\|%{GREEDYDATA:useragent}&quot;]
        remove_field =&amp;gt; [&#39;@version&#39;, &#39;priority&#39;, &#39;timestamp&#39;, &#39;logsource&#39;, &#39;severity&#39;, &#39;severity_label&#39;, &#39;facility&#39;, &#39;facility_label&#39;, &#39;pid&#39;,&#39;message&#39;]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;syslog-&quot;&gt;syslog 瓶颈&lt;/h1&gt;

&lt;p&gt;运行起来以后，通过 Kibana 看到的全网 tengine 带宽只有 60 MBps左右，这个结果跟通过 NgxAccounting 统计输出的结果差距太大了。明显是有问题。&lt;/p&gt;

&lt;p&gt;首先怀疑不会是 nginx.conf 通过 Puppet 下发重启的时候有问题吧？实际当然没有。&lt;/p&gt;

&lt;p&gt;这时候运行 &lt;code&gt;netstat -pln | grep 29125&lt;/code&gt; 命令，发现 &lt;code&gt;Recv-Q&lt;/code&gt; 已经达到了 228096，并且一致维持在这个数没有变化。&lt;/p&gt;

&lt;p&gt;由于之前对 ES 写入速度没太大信心，所以这时候的反应就是去查看 ES 服务器的状态，结果其实服务器 idle% 在 80% 以上，各种空闲，Kibana 上搜索反应也非常快。通过 top 命令看具体的线程情况，logstash 的 output/elasticsearch worker 本身占用资源就很少。包括后来实际也尝试了加大 output 的 workers 数量，加大 bin/logstash -w 的 filter worker 数量，其实都没用。&lt;/p&gt;

&lt;p&gt;那么只能是 input/syslog 就没能收进来了。&lt;/p&gt;

&lt;p&gt;之前写 filter 的时候，开过 -vv 模式，所以注意到过 input/syslog 里是利用 Logstash::Filter::Grok 来判定切割 syslog 内容的。按照前一节的说法，那确实可能是在收 syslog 的时候性能跟不上啊？&lt;/p&gt;

&lt;p&gt;于是去翻了一下 Logstash::Input::Syslog 的代码，主体逻辑很简单，就是 &lt;code&gt;Thread.new { UDPSocket.new }&lt;/code&gt; 这样。也就是说是一个单线程监听 UDP 端口！&lt;/p&gt;

&lt;p&gt;然后我又下载了同为 Ruby 写的日志收集框架 fluentd 的 syslog 插件看看源代码，fluent-plugin-syslog 里，用的是 Cool.io 库作 UDP 异步处理。好吧，其实在此之前我只知道 EventMachine 库。。。不过由于 Logstash 是 JRuby 平台，又不清楚其 event 代码(以前基本只是看各种 plugin 的代码就够了)，担心这么把 em 加上去会不会不太好。所以在摸清 logstash 代码之前，先用自己最熟悉的手段，搞定这个问题：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用 Perl 的高性能 EV 库解决&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前年我同样提到过 Perl 也有仿照 Logstash 写的框架叫 Message::Passing，这个框架就是用 AnyEvent 和 Moo 写的，性能绝对没问题。不过各种插件和文档比较潦草，要想兼容现在 logstash 1.4 的 schema 比较费劲。所以，最后我选择了自己根据 tengine 日志的情况单独写一个脚本，结果如下：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chenryn/7c922ac424324ee0d695.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;80 行左右的代码，从 input 到 output 都是 anyevent 驱动。( Search::Elasticsearch::Async 默认是基于 AnyEvent::HTTP 的，不过用 Promises 模块做了封装，所以写起来好像看不太出来～)&lt;/p&gt;

&lt;p&gt;最终到 elasticsearch 里的数据结构跟 logstash 一模一样，之前配置好的 Kibana 样式完全不需要变动。而实际运行起来以后，Recv-Q 虽然不是一直保持在 0，但是偶然累积的队列也肯定会在几秒钟内被读取处理完毕。完全达到了效果。Kibana 上，带宽图回复到了跟 NgxAccounting 统计结果一样的 300 MBps 。成功！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uploads/ngx-syslog-flow-diff.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Wed, 11 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-11-nginx-access-log-to-elasticsearch-938e7994b.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-11-nginx-access-log-to-elasticsearch-938e7994b.html</guid>
        
        
      </item>
    
      <item>
        <title>配合 avbot 的 HTTP 接口做自动应答的 Perl 脚本</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;前两天&lt;a href=&quot;http://chenlinux.com/2014/06/04/record-webqq-logs-by-avbot&quot;&gt;博客里介绍了 avbot&lt;/a&gt;，其中提到 avbot 提供了 HTTP 接口可以收发信息。那么，我们就可以自己写脚本来实现比原先的 &lt;code&gt;.qqbot help&lt;/code&gt; 更详细的自动应答啦。今晚有空就写了几行 Perl ，实现了一个简单的扩展：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;JSON::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyEvent::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.logstashbot support subcommand:\n\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;请主动使用 http://grokdebug.herokuapp.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tnnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;请直接说问题不要浪费口水问有人帮忙么&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;支持原作者，请购买 www.logstashbook.com 上电子版&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;help&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;AnyEvent::HTTP::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIMEOUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;http://127.0.0.1:6176/message&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ua&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http_get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode_json&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;text&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;@&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;who&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;nick&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;(&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;who&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;code&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^\.logstashbot (\w+)/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;protocol&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;channel&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;help&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;http_post&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ua&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;原先是打算在回调里 &lt;code&gt;undef $ua&lt;/code&gt; 然后通过 &lt;code&gt;AnyEvent-&amp;gt;timer&lt;/code&gt; 里检测 $ua 是否还在，否则再起来的方式。后来一想 &lt;code&gt;timer&lt;/code&gt; 还有间隔，直接函数内部通过 &lt;code&gt;$cv-&amp;gt;end&lt;/code&gt; 控制计数，不断的重新运行 &lt;code&gt;$ua-&amp;gt;()&lt;/code&gt; 来保持持续获取，间隔更短，就改成现在这样了。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-08-perl-script-for-avbot-37881c7d4.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-08-perl-script-for-avbot-37881c7d4.html</guid>
        
        
      </item>
    
      <item>
        <title>Nginx中配置Access Control</title>
        <description>

  &lt;p&gt;最近处理了一个&lt;code&gt;Nginx&lt;/code&gt;的&lt;code&gt;ACL&lt;/code&gt;问题，记录一下处理过程。&lt;/p&gt;

&lt;p&gt;公司线上服务使用&lt;code&gt;Nginx&lt;/code&gt;做前端的负载分发。对于安全原因屏蔽客户端IP的需求，在这一个层次操作，使用&lt;code&gt;ngx_http_access_module&lt;/code&gt;提供的&lt;code&gt;allow&lt;/code&gt;/&lt;code&gt;deny&lt;/code&gt;语法进行配置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# nginx.conf
events {
	use epoll;
	worker_connections  65535;
}

http {
	# ACL
	include acl.conf;

	# Vhost
	include vhosts/*.conf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全局&lt;code&gt;ACL&lt;/code&gt;配置在单独的文件&lt;code&gt;acl.conf&lt;/code&gt;中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# acl.conf
deny 123.45.67.89;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vhost&lt;/code&gt;配置文件中没有&lt;code&gt;ACL&lt;/code&gt;配置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vhosts/www.example.com.conf
server {
	listen	80 default;
	server_name	www.example.com;

	location / {
		root html/;
	}
}

# vhosts/api.example.com.conf
server {
	listen	80;
	server_name	api.example.com;

	location / {
		proxy_pass http://backend_api;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基于这种配置模式，每当有&lt;code&gt;ACL&lt;/code&gt;需求时，只要更新&lt;code&gt;acl.conf&lt;/code&gt;的ip列表即可。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;问题&lt;/h3&gt;

&lt;p&gt;周一上班时，前一天值班的同事提到值班时遇到一个问题，使用&lt;code&gt;deny&lt;/code&gt;失效了。&lt;/p&gt;

&lt;p&gt;查看了值班的邮件记录及操作记录，是这样的一些情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安全组提出封禁IP需求。值班同事将涉事IP段（ip1）加入&lt;code&gt;acl.conf&lt;/code&gt;
&lt;/li&gt;
  &lt;li&gt;API组提出封禁IP需求，且注明只针对api域名封禁。值班同时将设施IP端（ip2）加入&lt;code&gt;vhost&lt;/code&gt;配置文件，如下&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第2步操作如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vhosts/api.example.com.conf
server {
	listen	80;
	server_name	api.example.com;
+	deny ip2;
	
	location / {
		proxy_pass http://backend_api;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在第二步操作之后，又收到安全组提供的IP段（ip3），加入&lt;code&gt;acl.conf&lt;/code&gt;后，仍然有来自ip3的请求能获得&lt;code&gt;200&lt;/code&gt;返回。&lt;/p&gt;

&lt;p&gt;现在的配置情况简化表示为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
	deny ip1;
	server {
		server_name api.example.com;
		deny ip2;
	}
	deny ip3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过测试确认，上述配置的最终现象为server &lt;code&gt;api.example.com&lt;/code&gt;中只有&lt;code&gt;deny ip2&lt;/code&gt;生效，&lt;code&gt;deny ip3&lt;/code&gt;没有生效。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;追因&lt;/h3&gt;

&lt;p&gt;查看&lt;code&gt;Nginx&lt;/code&gt;源码&lt;code&gt;src/http/modules/ngx_http_access_module.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在配置文件处理阶段有两部分需要关注。&lt;/p&gt;

&lt;h4 id=&quot;ngxhttpaccessrule&quot;&gt;第一个关注点 &lt;code&gt;ngx_http_access_rule&lt;/code&gt;函数&lt;/h4&gt;

&lt;p&gt;在出现&lt;code&gt;allow&lt;/code&gt;/&lt;code&gt;deny&lt;/code&gt;语法时执行。&lt;/p&gt;

&lt;p&gt;它的作用是维护每个作用域范围内的&lt;code&gt;alcf-&amp;gt;rules&lt;/code&gt;，这是一个ACL列表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static char *
ngx_http_access_rule(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)

	...

    default: /* AF_INET */

        if (alcf-&amp;gt;rules == NULL) {
            alcf-&amp;gt;rules = ngx_array_create(cf-&amp;gt;pool, 4, sizeof(ngx_http_access_rule_t));
            if (alcf-&amp;gt;rules == NULL) {
                return NGX_CONF_ERROR;
            }
        }

        rule = ngx_array_push(alcf-&amp;gt;rules);
        if (rule == NULL) {
            return NGX_CONF_ERROR;
        }

        rule-&amp;gt;mask = cidr.u.in.mask;
        rule-&amp;gt;addr = cidr.u.in.addr;
        rule-&amp;gt;deny = (value[0].data[0] == &#39;d&#39;) ? 1 : 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;ngxhttpaccessmergelocconf&quot;&gt;第二个关注点 &lt;code&gt;ngx_http_access_merge_loc_conf&lt;/code&gt;函数&lt;/h4&gt;

&lt;p&gt;在解决嵌套定义时执行。&lt;code&gt;parent&lt;/code&gt;代表上一级配置，&lt;code&gt;child&lt;/code&gt;代表下一级配置。&lt;/p&gt;

&lt;p&gt;上一级与下一级是一个相对概念，&lt;code&gt;http&lt;/code&gt;相对&lt;code&gt;server&lt;/code&gt;为上一级，&lt;code&gt;server&lt;/code&gt;为&lt;code&gt;http&lt;/code&gt;下一级；&lt;code&gt;server&lt;/code&gt;相对&lt;code&gt;location&lt;/code&gt;为上一级，&lt;code&gt;location&lt;/code&gt;为&lt;code&gt;server&lt;/code&gt;下一级。&lt;/p&gt;

&lt;p&gt;从下面代码可以看出，如果当前ACL(&lt;code&gt;child-&amp;gt;rules&lt;/code&gt;)为空，则继承上一级的ACL(&lt;code&gt;parent-&amp;gt;rules&lt;/code&gt;)。这解释了当&lt;code&gt;http&lt;/code&gt;中定义&lt;code&gt;deny&lt;/code&gt;而&lt;code&gt;server&lt;/code&gt;中不定义时，&lt;code&gt;http&lt;/code&gt;中的&lt;code&gt;deny&lt;/code&gt;生效。&lt;/p&gt;

&lt;p&gt;另外也证实了一个事实，即当前级别中定义过ACL之后，不会与上一级的ACL进行列表合并，只有当前列表生效。所以会出现前文提到的现象，&lt;code&gt;server&lt;/code&gt;中定义&lt;code&gt;deny&lt;/code&gt;后，&lt;code&gt;http&lt;/code&gt;中的&lt;code&gt;deny&lt;/code&gt;规则失效了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static char *
ngx_http_access_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_access_loc_conf_t  *prev = parent;
    ngx_http_access_loc_conf_t  *conf = child;

	...

    if (conf-&amp;gt;rules == NULL) {
        conf-&amp;gt;rules = prev-&amp;gt;rules;
    }

	...

    return NGX_CONF_OK;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;探讨&lt;/h4&gt;

&lt;p&gt;上面ACL中，我们按先验经验想当然认为&lt;code&gt;allow&lt;/code&gt;/&lt;code&gt;deny&lt;/code&gt;会如其它&lt;code&gt;nginx&lt;/code&gt;语法一样，在不同级别之间有继承关系，而事实证明这种想法是错误的。&lt;/p&gt;

&lt;p&gt;由于不同层级之间的ACL列表独立维护，而&lt;code&gt;Nginx&lt;/code&gt;在进行处理是只针对当前的rules遍历，一个不太严谨但是有助于理解的看法是可以认为在当前配置中增加了一个默认&lt;code&gt;allow all&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;Apache&lt;/code&gt;中也有ACL相关配置，由于配置语法格式比较清晰，一般在出现嵌套时不会出现误解。&lt;/p&gt;

  

</description>
        <pubDate>Thu, 05 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-05-2014-06-05-nginx-access-control-with-allow-deny.html-04ee7e887.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-05-2014-06-05-nginx-access-control-with-allow-deny.html-04ee7e887.html</guid>
        
        
      </item>
    
      <item>
        <title>用 Perl5 改写 skyline 异常检测算法</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;一直以来都知道 Perl5 里也有类似 numpy 的库叫 PDL，但是因为上手资料比较少，官网文档比较烂，就没认真看过。这次因为要了解 skyline 里用到的 9 种异常检测算法的具体原理，正好一一对照重写一下，当做是学习 PDL 了。&lt;/p&gt;

&lt;p&gt;最终修改完的 Perl5 版如下：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chenryn/43315b6c7ddaf9c39aab.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;~~要承认 PDL 在上手方面比不过 numpy，比如取数组长度，PDL 里居然写作 &lt;code&gt;$p-&amp;gt;nelem&lt;/code&gt;；取数组最后一个元素的值，更是要写作 &lt;code&gt;$p-&amp;gt;index($p-&amp;gt;nelem - 1)&lt;/code&gt; 这么长！相比在 numpy 方面几乎看起来还是跟操作原生的 python 类型一样。。妈蛋 PDL 你多重载几个操作符会死啊！~~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2014 年 06 月 09 日更新：在blogs.perl.org上得到指点，可以用 &lt;code&gt;$p-&amp;gt;at(-1)&lt;/code&gt; 来获取。PDL 自己的文档里 &lt;code&gt;-&amp;gt;at()&lt;/code&gt; 的示例都是获取数组的……&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;稍微复杂一点的多维操作 PDL 还是很方便的。比如程序里 &lt;code&gt;least_squares&lt;/code&gt; 检验法的时候，numpy 有这么一句：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vstack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而在 PDL 里可以写作：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PDL 里也有 ones() 函数来生成全部由 1 构成的数组，不过我觉得上面这个写法明显更好理解最终目的，就是90°倒转数组然后每个元素作为子数组后面加第二个元素嘛。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;当然，比较好玩的是最后我发现 &lt;code&gt;least_squares&lt;/code&gt; 在 PDL 里可以直接搞出来结果，不用这么复杂&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;比较基础的数值统计还是比较好搞的，麻烦的是一些现成的正态分布检验法。python 版里使用的是 &lt;a href=&quot;http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test&quot;&gt;K-S 检验法&lt;/a&gt;——其实只是命名，里面实际还用了 &lt;a href=&quot;http://en.wikipedia.org/wiki/Anderson%E2%80%93Darling_test&quot;&gt;A-D 检验法&lt;/a&gt;做改进——我还记得这是 skyline 开源以后社区人帮忙实现的，Etsy 一开始都没有。按说 K-S 检验法是非常基础的一个，但是我找遍了 CPAN 确实就没有(大概是因为 Perl 里调用 R 太方便了，大家都习惯直接用 &lt;a href=&quot;https:://metacpan.org/pod/Statistics::R&quot;&gt;Statistics::R&lt;/a&gt; 模块吧)。于是最后这个改成 &lt;a href=&quot;http://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test&quot;&gt;S-W 检验法&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;根据 SPSS 的规范，一般在数值序列长度小于 5000 的时候，S-W 检验法可信度高于 K-S 检验法；大于 5000 的时候，K-S 检验法可信度大于 S-W 检验法。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;考虑这里一般只会检查最近一个小时的数据。一个小时内就算一秒钟一次也就是 3600 个点。事实上应该至少是 10 秒钟出一个统计值才会做比较。那么也就是几百个点，用 S-W 检验法应该更有效。&lt;/p&gt;

&lt;p&gt;在重写这个脚本的时候，找到了很多关于这方面的资料，下面这两个链接应该是非常不错:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/index.htm&quot;&gt;http://www.itl.nist.gov/div898/handbook/index.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.perlmonks.org/?node=Stats%3A%20Testing%20whether%20data%20is%20normally%20(Gaussian)%20distributed&quot;&gt;http://www.perlmonks.org/?node=Stats%3A%20Testing%20whether%20data%20is%20normally%20(Gaussian)%20distributed&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此外，脚本中本身用到的 &lt;a href=&quot;http://www.ta-lib.org&quot;&gt;ta-lib&lt;/a&gt; 和 &lt;a href=&quot;https:://metacpan.org/pod/Statistics::Distributions&quot;&gt;Statistics::Distributions&lt;/a&gt; 模块也还有更多的算法函数提供，值得留意。&lt;/p&gt;

&lt;p&gt;注：PDL::Finance::Talib 模块必须先自己编译了 ta-lib 依赖后才能安装。之前测试在美团云主机上做的，结果还安装失败。后来发现是内存不够大==!然后在作者的指导下学会一招，在内存不够大的机器上，可以删除掉 CCFLAGS 里的 &lt;code&gt;-pipe&lt;/code&gt; 参数，也能正常编译通过。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Wed, 04 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-04-skyline-port-to-perl-e3aa6baf8.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-04-skyline-port-to-perl-e3aa6baf8.html</guid>
        
        
      </item>
    
      <item>
        <title>用 avbot 机器人记录 QQ 群聊天记录</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;这是一件蛮有趣的事情。我因为做 logstash 的 QQ 群管理员，碰到了一个幸福的烦恼：群里有不少高水平且乐于分享的朋友时常给人解答问题，而且一来一回的能牵扯出来不少让人眼前一亮的实践，但是 QQ 聊天记录不像邮件列表和 IRC 那样可以很方便的长期保存共享给后来人学习查找！这简直是国内参与开源技术最头疼的一件事情了，知识没法复用，偏偏越是需要这些知识的人，越是喜欢通过 QQ 来寻求帮助！前两天偶然想到，其实可以通过机器人潜水进来获取聊天记录，然后发布出来！询问了一下 &lt;a href=&quot;http://weibo.com/biergaizi&quot;&gt;@比尔盖子V&lt;/a&gt; 童鞋，他推荐给我 &lt;a href=&quot;http://wiki.avplayer.org/Avbot&quot;&gt;avbot&lt;/a&gt; 项目。#妈蛋这名字怎能不吐槽#&lt;/p&gt;

&lt;p&gt;作者非常 nice 的提供好了 RPM 可以直接安装在服务器上。所以安装步骤真的就没啥可讲的了。&lt;/p&gt;

&lt;p&gt;不过这个项目本意是做 QQ、IRC 和 XMPP 的互联互通，所以把心思用来了 &lt;code&gt;--map&lt;/code&gt; 的实现，作为我们这里只想单单记录 QQ 群聊天记录来说，它不支持指定只获取某个群的记录，所以最好的办法就是新申请一个 QQ 号，只加这一个群……&lt;/p&gt;

&lt;p&gt;运行起来以后，会在当前目录下生成一个 &lt;code&gt;avlog.db&lt;/code&gt; 库，记录聊天记录，同时生成一个 QQ 群号命名的目录，里面按日期存放当天的聊天记录的 HTML 文件。直接用 nginx 发布出来就好啦！&lt;/p&gt;

&lt;p&gt;照搬 avbot 官网 demo 页面做好了 logstash 群聊天记录的查看搜索页，见：&lt;a href=&quot;http://logstash.chenlinux.com/&quot;&gt;http://logstash.chenlinux.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下一步可以做的事情是做自动应答。已经测试过可以通过 RPC 接口收发消息。不过昨天碰到的一个怪事情是，没能准确收到 QQ 群号，于是变成了 none，结果发送就一直失败。这个重启进程让他重新获得一次就可以了。&lt;/p&gt;

&lt;p&gt;收消息示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &#39;http://localhost:6176/message&#39;
{
    &quot;protocol&quot;: &quot;qq&quot;,
    &quot;channel&quot;: &quot;315428175&quot;,
    &quot;room&quot;:
    {
        &quot;code&quot;: &quot;3614128622&quot;,
        &quot;groupnumber&quot;: &quot;315428175&quot;,
        &quot;name&quot;: &quot;Logstash&quot;
    },
    &quot;op&quot;: &quot;0&quot;,
    &quot;who&quot;:
    {
        &quot;code&quot;: &quot;225519360&quot;,
        &quot;nick&quot;: &quot;田间&quot;,
        &quot;name&quot;: &quot;田间&quot;,
        &quot;qqnumber&quot;: &quot;&quot;,
        &quot;card&quot;: &quot;&quot;
    },
    &quot;preamble&quot;: &quot;qq(田间): &quot;,
    &quot;message&quot;:
    {
        &quot;text&quot;: &quot;我们这暂时没运维   &quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发消息示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST http://localhost:6176/message -d &#39;{&quot;protocol&quot;:&quot;qq&quot;,&quot;channel&quot;:&quot;315428175&quot;,&quot;message&quot;:{&quot;text&quot;:&quot;Hi, my name is logstashbot, this message came from curl command!&quot;}}&#39;
&lt;/code&gt;&lt;/pre&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Wed, 04 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-04-record-webqq-logs-by-avbot-294743f45.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-04-record-webqq-logs-by-avbot-294743f45.html</guid>
        
        
      </item>
    
      <item>
        <title>直接从 elasticsearch 获取数据进入 skyline 异常检测</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;这几天搭建 elasticsearch 集群做日志分析，终于有机会可以实际跑一下 skyline 的效果。不过比较麻烦的事情是，skyline 是一个比较完备的系统而不是插件，要求我们把数据通过 msgpack 发过去存到 redis 里。这是个很没有道理的做法，早在去年刚看到这个项目的时候我就在博客里写下了愿景是应该用 elasticsearch 替换掉 redis。等了这么久没等到，干脆就自己动手实现。修改后，skyline 其余的程序完全可以直接扔掉，只留下这一个脚本定时运行就够了：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/chenryn/309bed093f6a7084c855.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;其实改动的地方很少~这让我愈发不理解 etsy 原来那样做的理由了。&lt;/p&gt;

&lt;p&gt;这里面主要就是拼了一下 elasticsearch 的 &lt;code&gt;date_histogram&lt;/code&gt; 类型的 facet 请求，获取最近 1 个小时的每 5 分钟统计值构成的时间序列数据。然后发给前面那些检验算法。&lt;/p&gt;

&lt;p&gt;之前用过 js 和 perl 的 elasticsearch 客户端，对象封装的都蛮细的，而 python 的这个客户端写起来就非常像 curl 命令了。&lt;/p&gt;

&lt;p&gt;如果要推广用，把里面这个 &lt;code&gt;code.504&lt;/code&gt; 提出来做一个可配置项就行了。&lt;/p&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Wed, 04 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-06-04-elasticsearch-direct-to-skyline-f6d51c10e.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-06-04-elasticsearch-direct-to-skyline-f6d51c10e.html</guid>
        
        
      </item>
    
      <item>
        <title>巧用 Puppet 的 stdlib 库</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;这几天上线机器给 Elasticsearch 集群扩容，开始撰写 Puppet 的 elasticsearch 类来规范化管理。这里碰到一个小问题，相信在很多大容量集群的机器上都会有。那就是每台机器上都挂载有十几二十块磁盘，怎么用 Puppet 给快速方便的创建各磁盘上的工作目录呢？&lt;/p&gt;

&lt;p&gt;一个一个写 File 资源申明肯定不可取；File 资源申明支持接受数组，但是二十多个元素写一个大数组也没方便到哪里去。有没有比较简单的办法来生成这个大数组，而不是手写呢？&lt;/p&gt;

&lt;p&gt;有，就是使用 Puppet 官方出的这个 stdlib 库 &lt;a href=&quot;http://forge.puppetlabs.com/puppetlabs/stdlib&quot;&gt;http://forge.puppetlabs.com/puppetlabs/stdlib&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;安装方法很简单，在 Puppet Master 上运行命令 &lt;code&gt;puppet module install puppetlabs-stdlib&lt;/code&gt; 即可。&lt;/p&gt;

&lt;p&gt;因为 puppet 默认会分发所有 module 的 lib/ 目录，所以即便你没有在自己的类里 &lt;code&gt;import stdlib&lt;/code&gt;，也是可以直接使用它提供的各种函数的。&lt;/p&gt;

&lt;p&gt;下面就是我的 elsticsearch 类配置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;vg&quot;&gt;$esdatadir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:datadircount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/elasticsearch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;java-1.7.0-openjdk&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;elasticsearch&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;present&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;repos&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$esdatadir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;directory&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;elasticsearch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/etc/elasticsearch/elasticsearch.yml&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;elasticsearch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;elasticsearch/elasticsearch.yml.erb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;elasticsearch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enable&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code&gt;$::datadircount&lt;/code&gt; 是我自定义的 Facts 变量，插件代码见两年前的博客&lt;a href=&quot;http://chenlinux.com/2012/05/10/quick-start-for-puppet-facter-erb&quot;&gt;《puppet安装／Facter插件和puppet模板编写》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;然后 &lt;code&gt;elasticsearch.yml.erb&lt;/code&gt; 里的数据目录配置定义如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% scope.lookupvar(&quot;elasticsearch::esdatadir&quot;).each &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  - &amp;lt;%= dir %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;puppetlibs-stdlib&lt;/code&gt; 实现了很多对基础类型的扩展函数，比如本例中用到了 &lt;code&gt;range&lt;/code&gt;、&lt;code&gt;prefix&lt;/code&gt; 和 &lt;code&gt;suffix&lt;/code&gt; 三个。依次生成了 1 到 N 的数组，给数组每个元素加上 &lt;code&gt;/data&lt;/code&gt; 前缀字符串，再给每个元素加上 &lt;code&gt;/elasticsearch&lt;/code&gt; 后缀字符串，最后变成了 &lt;code&gt;/dataN/elasticsearch&lt;/code&gt; 这种格式的元素构成的数组。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;puppetlibs-stdlib&lt;/code&gt; 实现的非常漂亮的地方是，很多函数都根据常见用途提供了不同场景下的不同行为。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;比如 &lt;code&gt;range&lt;/code&gt; 即可以 1 到 N，也可以 01 到 NN，甚至可以先加上 prefix 后再 ‘/data1’ 到 ‘/dataN’ 都支持。&lt;/li&gt;
  &lt;li&gt;比如 &lt;code&gt;unique&lt;/code&gt; 既可以针对字符串去重，也可以针对数组元素去重。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多函数说明，见源码仓库 &lt;a href=&quot;https://github.com/puppetlabs/puppetlabs-stdlib/blob/master/README.markdown&quot;&gt;README&lt;/a&gt; 文档。&lt;/p&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Wed, 28 May 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-05-28-stdlib-of-puppet-e6d35f10b.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-05-28-stdlib-of-puppet-e6d35f10b.html</guid>
        
        
      </item>
    
      <item>
        <title>XS 初体验</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;今天翻 ganglia 源代码发现两年前加上了 &lt;code&gt;perl_module&lt;/code&gt; 的&lt;a href=&quot;http://t.cn/Rvwav9T&quot;&gt;支持&lt;/a&gt;，不过跟 &lt;code&gt;python_module&lt;/code&gt; 相比，&lt;code&gt;descriptors&lt;/code&gt; 里的 &lt;code&gt;call_back&lt;/code&gt; 不是真的写作回调函数而是写作和实际函数同名的字符串，这点让我觉得很别扭和奇怪，于是想到去看看 gmond 里内嵌的 perl 解释程序是怎么做这步的。顺带就第一次动手写了一点 XS 代码，这里一并发上来，留作存档。&lt;/p&gt;

&lt;p&gt;示例代码框架源自上周 Dancer 作者 SawyerX 发布的 &lt;a href=&quot;https://github.com/xsawyerx/xs-fun&quot;&gt;XS-Fun 项目&lt;/a&gt;。所以这里如何使用 &lt;code&gt;h2xs&lt;/code&gt; 命令创建 XS 模块文件就不讲解了。&lt;/p&gt;

&lt;p&gt;主要分作五个小示例，由最简单到很简单依次如下：&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;返回一个字符串&lt;/h1&gt;

&lt;p&gt;编辑 XSFun.xs 内容如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;EXTERN.h&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;perl.h&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;XSUB.h&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;ppport.h&quot;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* C functions */&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MODULE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSFun&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;PACKAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSFun&lt;/span&gt;		

&lt;span class=&quot;cp&quot;&gt;# XS code&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STRLEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testsub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSVpv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个其实就相当于 &lt;code&gt;sub runcb { return &quot;testsub&quot; }&lt;/code&gt; 。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;返回一个哈希的指定键的值&lt;/h1&gt;

&lt;p&gt;因为起因是 gmond 里的代码，所以这里就开始主要研究如何解析 descriptor 哈希的键值对了。下面是 &lt;code&gt;runcb()&lt;/code&gt; 的代码片段：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SvRV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;call_back&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hv_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里两个要点，一个是传递进来的哈希引用如何解引用(perl程序里任何时候都不应该直接传递哈希或者数组，而应该传递引用，所以这里直接就研究这步了)；一个是 &lt;code&gt;hv_fetch&lt;/code&gt; 的返回值是 &lt;code&gt;SV**&lt;/code&gt; 而不是 &lt;code&gt;SV*&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;发现 XS 语法里比较有意思的一点，就是变量类型转换的时候，大小写的意义。像 &lt;code&gt;SvRV&lt;/code&gt; 就是从 SV 变成 RV，而 &lt;code&gt;SViv&lt;/code&gt; 就是从 IV 变成 SV，基本是谁大写就是转变成谁。&lt;/p&gt;

&lt;h1 id=&quot;perl-&quot;&gt;调用 Perl 函数并获取其返回值&lt;/h1&gt;

&lt;p&gt;刚才说到了 descriptor 里的 “call_back” 键的值其实是函数名，所以这一步就试图运行这个 Perl 函数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SvRV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;call_back&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hv_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_SCALAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POPs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里的要点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;call_sv&lt;/code&gt; 函数(传递的是函数引用)。在 gmond 源码里用的是 &lt;code&gt;call_pv&lt;/code&gt; 函数(传递的是函数名字符串)。可见原来在代码层这里写起来几乎是一样的，看来定义成写字符串纯粹是作者个人偏好了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这里要给被调用的函数设定上下文，我这里要求返回字符串，就是 &lt;code&gt;G_SCALAR&lt;/code&gt;，还有 &lt;code&gt;G_VOID&lt;/code&gt; 等等，详见 &lt;a href=&quot;perldoc.perl.org/perlcall.html&quot;&gt;perlcall文档&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;POPs 操作。&lt;code&gt;call_sv&lt;/code&gt; 函数返回值只代表&lt;strong&gt;被&lt;/strong&gt;调用的函数的返回值个数，&lt;strong&gt;被&lt;/strong&gt;调用函数的返回值本身，需要另外&lt;em&gt;逐一&lt;/em&gt;获取，这个获取就是通过 POPs( 这个是取SV，类似的还有 POPi 等)来完成。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;perl--1&quot;&gt;给被调用的 Perl 函数传参&lt;/h1&gt;

&lt;p&gt;在上面我们可以看到 &lt;code&gt;call_sv&lt;/code&gt; 函数也没有传递参数的地方。那么怎么传递参数给被调用的 Perl 函数呢？&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SvRV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;callback&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hv_fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STRLEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PUSHMARK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;XPUSHs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sv_2mortal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PUTBACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_SCALAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SPAGAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;croak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POPs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Here: %d %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SvPV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PUTBACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;比较复杂啦~~&lt;/p&gt;

&lt;p&gt;这里需要有一系列处理 Perl 堆栈的命令来完成传参处理，命令以 &lt;code&gt;dSP&lt;/code&gt; 开头，不过如果编写的是 XS 函数，这步会自动处理可以省略，所以我们这里只需要从 &lt;code&gt;PUSHMARK&lt;/code&gt; 开始。&lt;/p&gt;

&lt;p&gt;以 &lt;code&gt;PUSHMARK&lt;/code&gt; 标示开始推入参数到临时区域，然后具体的推入命令是 &lt;code&gt;XPUSHs&lt;/code&gt;(多个就重复推)，最后以 &lt;code&gt;PUTBACK&lt;/code&gt; 标示参数推入完成。这时候 Perl 解释器就明白，给下面的 sub 准备的 &lt;code&gt;@_&lt;/code&gt; 已经完毕了，具体大小就是这么多不会再多了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SPAGAIN&lt;/code&gt; 的作用是清理临时区域，因为说不准被调用函数里对临时区域做了什么操作。&lt;/p&gt;

&lt;p&gt;同样是 POPs 取出，这里如果直接在 C 代码里 printf 的话，要注意把 SV 转换成 PV，否则是看不对的。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;遍历哈希和返回数组&lt;/h1&gt;

&lt;p&gt;前面都是单个变量操作，最后我们来试试哈希遍历，然后返回数组变量。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;AV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SvRV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;I32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newAV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;hv_iterinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sv_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hv_iternextsv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;av_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETVAL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里几个要点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;code&gt;runcb()&lt;/code&gt; 函数的返回类型要改成 &lt;code&gt;AV*&lt;/code&gt; 了。&lt;/li&gt;
  &lt;li&gt;
&lt;code&gt;RETVAL&lt;/code&gt; 需要单独声明赋值才行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;写到这里我顺带想到，虽然 Perl5 一直都不对函数传参做什么验证，但是其实 XS 是 C 的自定义语言，所以写 XS 的时候，传参是会自动验证的。Perl5 二十年轮回，今年终于把传参验证给加上了，只能说一代人有一代人的想法啊。。。&lt;/p&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Tue, 20 May 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-05-20-my-first-experience-of-perlxs-f76729254.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-05-20-my-first-experience-of-perlxs-f76729254.html</guid>
        
        
      </item>
    
      <item>
        <title>给 Kibana 实现百分比统计图表</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;kibana 图表类型中有个 stats 类型，返回对应请求的某指定数值字段的数学统计值，包括最大值、最小值、平均值、方差和标准差(当前通过 logstash-1.4.1 分发的 kibana 版本还只支持单列显示，前天，即 5 月 15 日刚&lt;a href=&quot;http://www.elasticsearch.org/blog/kibana-3-1/&quot;&gt;更新了 Kibana 3.1 版&lt;/a&gt;，支持多列同时显示)。这个 stats 图表是利用 Elasticsearch 的 facets 功能来实现的。而在 Elasticsearch 1.0 版本以后，新出现了一个更细致的功能叫 aggregation，按照官方文档所说，会慢慢的彻底替代掉 facets。具体到 1.1 版本的时候， aggregation 里多了一项 percentile，可以具体返回某指定数值字段的区间分布情况。这对日志分析可是大有帮助。对这项功能，Elasticsearch 官方也很得意的专门在博客上写了一篇报道：&lt;a href=&quot;http://www.elasticsearch.org/blog/averages-can-dangerous-use-percentile/&quot;&gt;Averages can be misleading: try a percentile&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;周五晚上下班前，我突然决定试试给 Kibana 加上 percentile 图表类型。因为群里正好携程的同学说到他们仿造 trend 类型做了 stat_trend 图表，我想 percentile 从数据结构到展示方法跟 stats 都很像，应该难度不大，正好作为学习 angularjs 的入手点好了。&lt;/p&gt;

&lt;p&gt;花了半天多的时间，基本搞定这件事情，中间几度碰到难题，这里记录一下：&lt;/p&gt;

&lt;h1 id=&quot;kibana-31--elasticjs-&quot;&gt;kibana 3.1 中的 elasticjs 版本&lt;/h1&gt;

&lt;p&gt;这是一个非常非常坑爹的地方，kibana/src/vendor/elasticjs/elastic.js 文件开头写着版本号是 &lt;code&gt;v1.1.1&lt;/code&gt;，但是其实它是大半年前(2013-08-14)的。而实际它加上 aggregation 支持的时间是今年的 3 月 16 号，最近版本是 3 月 21 号发布的 ——但是版本号依然是 &lt;code&gt;v1.1.1&lt;/code&gt;！！&lt;/p&gt;

&lt;p&gt;我在昨天晚上花了一个多小时慢慢看完了 elasticjs 官网上 v1.1.1 的&lt;a href=&quot;http://docs.fullscale.co/elasticjs/ejs.FilterAggregation.html&quot;&gt;接口说明&lt;/a&gt;，结果其实在 kibana3.1 自带的 elasticjs 上完全不可用。&lt;/p&gt;

&lt;h1 id=&quot;elasticjs-&quot;&gt;elasticjs 新版用法&lt;/h1&gt;

&lt;p&gt;随后我替换成了最新的 elasticjs 文件，结果依然不可用，仔细看过文档后发现，新的 elasticjs 只专心处理请求的 DSL，把客户端初始化、配置、收发等事情都交给了 Elasticsearch 官方发布的 elasticsearch.js 来完成。原先版本自带的 elastic-angular-client.js 压根就没用了。&lt;/p&gt;

&lt;p&gt;变动大成这样了，居然还不改版本号！？！？&lt;/p&gt;

&lt;h1 id=&quot;elasticsearchjs-&quot;&gt;elasticsearch.js 的多层目录&lt;/h1&gt;

&lt;p&gt;下载了 elasticsearch.js 源码后，发现目录里有一个 elasticsearch.angular.client.js 文件，于是我很开心的想，官方考虑的还是很周全的嘛！然后花了一阵功夫在 kibana/src/app/app.js、kibana/src/app/components/require.config.js 等各处添加上了这个 elasticsearch 模块。结果依然不可用。&lt;/p&gt;

&lt;p&gt;原来整个 elasticsearch.js 把功能模块化拆分到了很多个不同的多层次的目录里，然后相互之间广泛采用类似 &lt;code&gt;require(&#39;../lib/util/&#39;)&lt;/code&gt; 这样的语句进行加载。&lt;/p&gt;

&lt;p&gt;但是：Kibana 采用的是 requirejs 和 angularjs 合作的模式，整个 js 库的加载过程完全在 kibana/src/app/components/require.config.js 一个文件里定义，你可以看到这个文件里就写了很多 jquery 的子项目文件，但是这些文件都是平铺在 kibana/src/vendor/jquery/ 这个目录里的。&lt;/p&gt;

&lt;p&gt;所以，即便在 require.config.js 里写了 elasticsearh 也没用，文件里的 require 语句依然是报错的。而且再往下的压根没法继续添加到 require.config.js 里了，因为太复杂了，肯定得修改 elasticsearch.js 源码的各个文件。&lt;/p&gt;

&lt;p&gt;总的来说，就是 elasticsearch.js 不适合跟 requirejs 一起工作。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;至此，简单更新 js 库然后调用现成接口的计划完全破产。&lt;/p&gt;

&lt;p&gt;感谢 Elasticsearch 本身就是一个 RESTful 接口，所以还剩下一个不太漂亮但是确实好用的办法，那就是自己组装请求数据，直接通过 angularjs 内置的 &lt;code&gt;$http&lt;/code&gt; 收发。&lt;/p&gt;

&lt;h1 id=&quot;aggregationname-&quot;&gt;aggregation_name 的限制&lt;/h1&gt;

&lt;p&gt;angularjs 的 &lt;code&gt;$http.post&lt;/code&gt; 使用跟 jquery 的 &lt;code&gt;$.post&lt;/code&gt; 非常类似，所以写起来难度不大，确定这个思路之后唯一碰到的问题却是 Elasticsearch 本身的新限制。&lt;/p&gt;

&lt;p&gt;目前 Kibana 里都是以 alias 形式来区分每一个子请求的，具体内容是 &lt;code&gt;var alias = q.alias || q.query;&lt;/code&gt;，即在页面上搜索框里写的查询语句或者是搜索框左侧色彩设置菜单里的 &lt;code&gt;Legend value&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;比如我的场景下，&lt;code&gt;q.query&lt;/code&gt; 是 “xff:10.5.16.*“，&lt;code&gt;q.alias&lt;/code&gt; 是”教育网访问”。那么最后发送的请求里这条过滤项的 &lt;code&gt;facets_name&lt;/code&gt; 就叫 “stats_教育网访问”。&lt;/p&gt;

&lt;p&gt;同样的写法迁移到 aggregation 上就完全不可解析了。&lt;strong&gt;服务器会返回一条报错说：&lt;code&gt;aggregation_name&lt;/code&gt; 只能是字母、数字、&lt;code&gt;_&lt;/code&gt; 或者 &lt;code&gt;-&lt;/code&gt; 四种。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(这里比较怪的是抓包看到 facets 其实也报错说请求内容解析失败，但是居然同时也返回了结果，只能猜测目前是处在一种兼容状态？)&lt;/p&gt;

&lt;p&gt;于是这里稍微修改了一下逻辑，把 &lt;code&gt;queries&lt;/code&gt; 数组的 &lt;code&gt;_.each&lt;/code&gt; 改用 &lt;code&gt;$.each&lt;/code&gt; 来做，这样回调函数里不单返回数组元素，还返回数组下标，下标是一定为数字的，就可以以数组下标作为 &lt;code&gt;aggregation_name&lt;/code&gt; 了。后面处理结果的 &lt;code&gt;queries.map&lt;/code&gt; 同样以下标来获取即可。&lt;/p&gt;

&lt;p&gt;目前效果图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uploads/kibana-percentile.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;我的改动已经上传到 &lt;a href=&quot;https://github.com/chenryn/kibana/commit/c27b44996bff575886041e0f4f800fda04fbdbde&quot;&gt;github&lt;/a&gt; 上，欢迎大家一起改进。&lt;/p&gt;

&lt;p&gt;目前的问题有两个：图表里的列排序功能不可用，还没找到原因；percents 值还没在 editor.html 里提供自定义办法。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;2014.05.26 更新： percents 值已经可以自定义&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;2014.06.06 更新： 排序功能可用。原因是 elasticsearch 不管你提交的 percents 带不带小数点，返回值里都会保留小数点后一位，而在 &lt;code&gt;sortBy&lt;/code&gt; 里头，这个小数点就会被理解成 javascript 里获取数据结构键值的意思。所以收到响应后，用 &lt;code&gt;parseInt&lt;/code&gt; 函数干掉小数点就可以了。&lt;/p&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Sat, 17 May 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-05-17-implement-percentiles-aggregation-on-kibana-56567329d.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-05-17-implement-percentiles-aggregation-on-kibana-56567329d.html</guid>
        
        
      </item>
    
      <item>
        <title>使用软件包神器fpm将Python包转为RPM包</title>
        <description>

  &lt;p&gt;在&lt;a href=&quot;http://mib.cc/blog/2012/2012-05-21-package-management-with-fpm.html&quot;&gt;之前的一篇文章&lt;/a&gt;中介绍过使用fpm制作rpm包，相信实践过的同学已经见识过fpm的威力。&lt;/p&gt;

&lt;p&gt;作为软件包管理工具，fpm还可以实现不同软件包类型之间的相互转换。本文将简单演示一下软件包转换的功能。&lt;/p&gt;

&lt;p&gt;文中用例来自于日常工作中的实际需求，需要在系统中安装Scrapy工具。写本文时scrapy的最新版本为0.22。不过业务指定的版本为0.16。&lt;/p&gt;

&lt;p&gt;下面我们看一下软件包准备的过程。&lt;/p&gt;

&lt;h2 id=&quot;python&quot;&gt;转换第一个python包&lt;/h2&gt;

&lt;p&gt;首先制作python-scrapy包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fpm -s python -t rpm scrapy==0.16.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：这里我们用到了-s参数，指定源格式。指定为python包时，fpm将使用easy_install的python源获取源文件。通过“==”来指定scrapy版本号，这与easy_install的写法完全一致。&lt;/p&gt;

&lt;p&gt;命令执行完毕，可以看到当前目录生成文件&lt;code&gt;python-scrapy-0.16.5-1.noarch.rpm&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;解决依赖&lt;/h2&gt;

&lt;p&gt;使用yum命令测试安装。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum localinstall python-scrapy-0.16.5-1.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从输出看出缺少依赖的&lt;code&gt;python-w3lib&lt;/code&gt;包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: Package: python-scrapy-0.16.5-1.noarch (/python-scrapy-0.16.5-1.noarch)
       Requires: python-w3lib &amp;gt;= 1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用同样的方式创建这个包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fpm -s python -t rpm w3lib==1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;“影子”包&lt;/h2&gt;

&lt;p&gt;继续使用yum命令测试安装，发现另一个依赖（&lt;code&gt;python-pyopenssl&lt;/code&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum localinstall python-scrapy-0.16.5-1.noarch.rpm python-w3lib-1.2-1.noarch.rpm

Error: Package: python-scrapy-0.16.5-1.noarch (/python-scrapy-0.16.5-1.noarch)
       Requires: python-pyopenssl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在yum仓库base中，可以搜索到&lt;code&gt;pyOpenSSL.x86_64&lt;/code&gt;这个包，因此可以利用已有的包，避免重复创建以及可能的文件冲突。这里创建一个叫做&lt;code&gt;python-pyopenssl&lt;/code&gt;的“影子”包，通过依赖包的方式引入pyOpenSSL。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fpm -s empty -t rpm -n python-pyopenssl -v 0.10 -d &#39;pyOpenSSL &amp;gt;= 0.10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建的方式与上面的有些差异。最主要的一项，将源格式指定为&lt;code&gt;empty&lt;/code&gt;，意味着这个不包含文件。通过&lt;code&gt;-d&lt;/code&gt;参数指定将引入的依赖包名及版本。这个rpm仅仅表示一个依赖关系。&lt;/p&gt;

&lt;p&gt;现在重新测试一下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum localinstall python-scrapy-0.16.5-1.noarch.rpm python-w3lib-1.2-1.noarch.rpm python-pyopenssl-0.10-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从输出可以看到已经能完成依赖检查，引入了pyOpenSSL包，可以进行安装。
将生成的3个rpm包放入yum仓库，方便部署系统使用。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文以python包转换为rpm的例子，简要演示了fpm进行package格式转换的功能。同时兼顾利用“影子”包的方式来解决仓库中已有软件包但是不同名的问题。&lt;/p&gt;

  

</description>
        <pubDate>Thu, 08 May 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-05-08-2014-05-08-convert-python-packages-to-rpm-with-fpm.html-a29b3455d.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-05-08-2014-05-08-convert-python-packages-to-rpm-with-fpm.html-a29b3455d.html</guid>
        
        
      </item>
    
      <item>
        <title>在 Perl6 脚本中并发执行 ssh 命令</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;前几天翻 Perl6 模块清单，发现没有用作 SSH 的。虽说 Perl6 里可以很方便的用 NativeCall 包装 C/C++ 库，但是 libssh2 本身就不支持我的 kerberos5 认证环境，所以还是只能通过调用系统命令的方式来完成。&lt;/p&gt;

&lt;h1 id=&quot;thread-&quot;&gt;Thread 示例&lt;/h1&gt;

&lt;p&gt;说起来 Perl6 近年一直在宣传 Promise 啊，Supply 啊并发编程，但是 API 变化太快，2013 年中期 jnthn 演讲里演示的 &lt;code&gt;async&lt;/code&gt; 用法，现在就直接报这个函数不存在了，似乎改成 &lt;code&gt;start&lt;/code&gt; 了？天知道什么时候又变。所以还是用底层的 Thread 和 Channel 来写。话说其实这还是我第一次写 Thread 呢。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpenSSH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ssh&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ssh -oStrictHostKeyChecking=no -l{$!user} -p{$!port} &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qqx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$shell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chomp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed: $!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;@t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpenSSH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;10.4.1.21&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;uptime&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;10.4.1.21&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xx&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;sleep 3;echo $$&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;很简陋的代码。首先一个是要确认 ssh 不用密码登陆，因为没有写 Expect；其次是没用 ThreadPool，所以并发操作不能太猛，会扭着腰的。&lt;/p&gt;

&lt;p&gt;这里演示了几个地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;class 的定义和 attr 的定义和&lt;a href=&quot;http://doc.perl6.org/language/classtut&quot;&gt;用法&lt;/a&gt;
&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;try-catch 的用法&lt;/p&gt;

    &lt;p&gt;也可以不写 try，直接 &lt;code&gt;CATCH {}&lt;/code&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;qqx{} 的用法&lt;/p&gt;

    &lt;p&gt;这是变动比较大的地方，&lt;code&gt;qqx&lt;/code&gt; 后面只能用 &lt;code&gt;{}&lt;/code&gt; 不能用其他字符对了。Perl6 提供另外的 &lt;code&gt;shell()&lt;/code&gt; 指令，返回 &lt;code&gt;Proc::Status&lt;/code&gt; 对象。
  不过这个对象其实也就是个状态码，不包括标准输出、错误输出什么的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;字符串连接符 ~ 的用法&lt;/li&gt;
  &lt;li&gt;multi method 的定义和用法&lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;http://doc.perl6.org/type/Method#signature&quot;&gt;函数 signature&lt;/a&gt; 的定义和用法，可选参数和命名参数的定义和用法见下一小节。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 操作符的用法&lt;/p&gt;

    &lt;p&gt;这里其实相当于是 &lt;code&gt;.finish for @t&lt;/code&gt;。这个怪怪的操作符据说可以在可能的时候自动线程化数组操作，所以返回顺序不会跟&lt;code&gt;.map&lt;/code&gt;一样。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;xx 操作符的用法&lt;/p&gt;

    &lt;p&gt;Perl5 里有 &lt;code&gt;x&lt;/code&gt; 操作符，Perl6 里又增加了 &lt;code&gt;xx&lt;/code&gt;、 &lt;code&gt;X&lt;/code&gt; 和 &lt;code&gt;Z&lt;/code&gt; 等操作符。
  分别是&lt;a href=&quot;http://doc.perl6.org/language/operators#infix_xx&quot;&gt;字符扩展成数组&lt;/a&gt;、&lt;a href=&quot;http://doc.perl6.org/language/operators#infix_X&quot;&gt;数组扩展成多维数组&lt;/a&gt;和&lt;a href=&quot;http://doc.perl6.org/language/operators#infix_Z&quot;&gt;多数组压缩单个数组&lt;/a&gt;(也就是zip操作)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Channel 和 Thread 对象的用法&lt;/p&gt;

    &lt;p&gt;在 roast 测试集里，只有 thread 和 lock 的&lt;a href=&quot;https://github.com/perl6/roast/blob/master/S17-lowlevel/lock.t&quot;&gt;测试用例&lt;/a&gt;。
  semaphore 其实也支持(因为 MoarVM 是基于 libuv 的嘛，libuv 支持它当然也支持)，但是连测试用例都没写……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认的并发编程会采用 &lt;code&gt;ThreadPoolScheduler&lt;/code&gt; 类，稍微看了一下，默认设置的线程数是 16。考虑下一步是仿照该类完善我的小脚本呢，还是重新学习一下 &lt;code&gt;Supply&lt;/code&gt; 或者 &lt;code&gt;Promise&lt;/code&gt; 看看到底怎么用。&lt;/p&gt;

&lt;p&gt;有兴趣用 libssh2 的童鞋，可以学习一下 &lt;a href=&quot;https://github.com/jnthn/zavolaj&quot;&gt;NativeCall&lt;/a&gt; 的用法。&lt;/p&gt;

&lt;h1 id=&quot;threadpoolscheduler-&quot;&gt;ThreadPoolScheduler 示例&lt;/h1&gt;

&lt;p&gt;根据 &lt;a href=&quot;https://github.com/perl6/specs/blob/master/S17-concurrency.pod&quot;&gt;S17-concurrency 文档&lt;/a&gt; 的内容，改写了几行脚本，实现了 ThreadPool 的效果：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$parallel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadPoolScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里把默认并发值改成了 16，跟 Rakudo 保持一致。如果不需要可调的话，这里其实可以直接写成 &lt;code&gt;$*SCHEDULER.cue({})&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后调用方法也对应修改一下，考虑到辨识度，把并发值改成了命名参数。调用方法如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;iplist.txt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;sleep 3;echo $$&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行可以看到，虽然 iplist.txt 里放了 40 个ip，但是并发的 ssh 只有 5 个。&lt;/p&gt;

&lt;h1 id=&quot;promise-&quot;&gt;Promise 示例&lt;/h1&gt;

&lt;p&gt;继续，S17 内容下一节是 Promise，之前博客里已经提过几次 Perl5 的 &lt;a href=&quot;https://metacpan.org/pod/Promises&quot;&gt;Promises 模块&lt;/a&gt; 或者类似的东西(比如 &lt;a href=&quot;/2014/01/22/explain-mojo-ioloop-delay-testing&quot;&gt;Mojo::IOLoop::Delay&lt;/a&gt; )，包括 JavaScript 等也有一样的名字。&lt;/p&gt;

&lt;p&gt;不过 Perl5 的 Promises 思路参照的是 Scala，语法则偏向 nodejs 和 golang(都用一个叫 &lt;code&gt;defer&lt;/code&gt; 的指令来创建 Promises 对象)，写起来跟 Perl6 的原生 Promise 差距较大。&lt;/p&gt;

&lt;p&gt;考虑 ssh 这个场景可能不太用的上 Promise 的 &lt;code&gt;.in&lt;/code&gt;、&lt;code&gt;.then&lt;/code&gt;、&lt;code&gt;.anyof&lt;/code&gt; 之类的流程控制(尤其 &lt;code&gt;.in&lt;/code&gt; 这个还不一定能用，因为 Promise 底层也是用的 &lt;code&gt;$*SCHEDULER.cue()&lt;/code&gt;，而这个在 MoarVM 上目前还不支持 :in/:at/:every 等参数)，就直接展示最简单的并发了：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$parallel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCHEDULER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadPoolScheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;简单来说，就是每个 &lt;code&gt;start {&amp;amp;c}&lt;/code&gt; 创建一个 Promise 对象，根据 &amp;amp;c 的返回值自动作 &lt;code&gt;$p.keep($result)&lt;/code&gt; 或  &lt;code&gt;$p.break(Exception)&lt;/code&gt;。然后 &lt;code&gt;await(*@p)&lt;/code&gt; 回收全部 Promise 的结果。&lt;/p&gt;

&lt;p&gt;这里直接修改了 &lt;code&gt;$*SCHEDULER&lt;/code&gt; ，这是一个全局变量，即当前进程的调度方式。Promise 类默认就采用这个变量。如果想跟上一小节一样使用 &lt;code&gt;$s&lt;/code&gt;，那这里就不能用 &lt;code&gt;start {}&lt;/code&gt; 而是要用 &lt;code&gt;Promise.start({}, $s)&lt;/code&gt;。显然写起来不怎么漂亮。&lt;/p&gt;

&lt;h1 id=&quot;supply-&quot;&gt;Supply 示例&lt;/h1&gt;

&lt;p&gt;Supply 是响应式编程，类似 Java 里的 Reactive 概念。应该适合的是一件事情多个进程重复做。场景不太对，二来目前 S17 也不全，就不写了。&lt;/p&gt;


    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Sun, 04 May 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-05-04-openssh-perl6-94df9f44f.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-05-04-openssh-perl6-94df9f44f.html</guid>
        
        
      </item>
    
      <item>
        <title>5分钟开发iOS应用-使用RubyMotion</title>
        <description>

  &lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;这是本人在iOS/RubyMotion开发方面的第一篇文档，作为对相关工具链的经验记录。&lt;/p&gt;

&lt;p&gt;我对各种新奇技术一直保持一定的兴趣，而不仅局限于工作相关的领域。移动领域在很大程度上影响了人们生活的习惯，从2012开始关注iOS开发，并且玩票做过一个简单的&lt;a href=&quot;https://itunes.apple.com/us/app/bei-shi-da-ren-zheng-wang-guan/id591059829?ls=1&amp;amp;mt=8&quot;&gt;工具应用&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;2013年发现了RubyMotion这个神器并持续关注，看到RM的工具链逐渐走向成熟的过程，社区也逐步壮大，目前基本进入了一个完善且稳定发展的状态。&lt;/p&gt;

&lt;h2 id=&quot;rubymotionrm&quot;&gt;关于RubyMotion（RM）&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;优势&lt;/h3&gt;

&lt;p&gt;RubyMotion是一个能帮助你使用Ruby语言来替代Objective-C来开发iOS平台及OSX平台应用的工具。Ruby语言相对与Objective-C的优势是较少的代码量键入，以及动态类型系统。
如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UILabel *label = [[UILabel alloc] init];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完全等价于&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;label = UILabel.alloc.init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过RubyMotion改进后，可以使用与Ruby常用方式相同的写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;label = UILabel.new
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;底层实现&lt;/h3&gt;

&lt;p&gt;这个工具在语言层面与MacRuby一脉相承，通过将Ruby代码编译为与Objective-C相同的LLVM底层代码，实现了与Objective-C/Cocoa框架的交互与统一。Cocoa的类与Ruby的类实现了对应，代码中消息传递的目标仍然是Objective-C的对象，Apple官方文档的实例代码可以经过简单的变换即可直接使用。&lt;/p&gt;

&lt;p&gt;采用这种方式的另一个好处是不需要维护庞大的基础代码，可以支持Apple SDK的升级。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;开发环境准备&lt;/h2&gt;

&lt;p&gt;开发iOS App的传统工具基本都包含在Xcode套件中，包含编译器，代码编辑工具，界面工具，iOS模拟器，发布工具等。理论上使用RubyMotion只需要有编译器和模拟器即可进行开发阶段的工作。考虑到采用Xcode中优秀的工具如Interface Builder，更好的选择是仍然安装完整Xcode套件。&lt;/p&gt;

&lt;p&gt;Ruby运行环境。RubyMotion用到了rake等工具，推荐使用rvm来安装ruby环境，建议安装ruby-2.0.0之后的版本。（如果你用过cocoapods，可能已经安装过了）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\curl -sSL https://get.rvm.io | bash -s stable
source /etc/profile

rvm install ruby-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在RubyMotion官网购买后，你会收到证书和安装文件的下载链接。按提示安装后，可以在Shell中使用motion命令。&lt;/p&gt;

&lt;p&gt;之后大部分操作都在shell中使用motion命令及rake命令。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;开始代码相关&lt;/h2&gt;

&lt;h3 id=&quot;motion&quot;&gt;初识motion命令&lt;/h3&gt;

&lt;p&gt;执行一条命令即可创建一个工程的代码框架。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ motion create HelloWorld
Create HelloWorld
Create HelloWorld/.gitignore
Create HelloWorld/app/app_delegate.rb
Create HelloWorld/Gemfile
Create HelloWorld/Rakefile
Create HelloWorld/resources/Default-568h@2x.png
Create HelloWorld/spec/main_spec.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建的文件能够在输出结果看到。&lt;/p&gt;

&lt;p&gt;进入代码目录，初始化ruby工具：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~ $  cd HelloWorld
➜  HelloWorld $  bundle
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using rake (10.3.1) 
Using bundler (1.3.5) 
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行这个项目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  HelloWorld  rake
     Build ./build/iPhoneSimulator-7.1-Development
   Compile ./app/app_delegate.rb
    Create ./build/iPhoneSimulator-7.1-Development/HelloWorld.app
      Link ./build/iPhoneSimulator-7.1-Development/HelloWorld.app/HelloWorld
    Create ./build/iPhoneSimulator-7.1-Development/HelloWorld.app/PkgInfo
    Create ./build/iPhoneSimulator-7.1-Development/HelloWorld.app/Info.plist
      Copy ./resources/Default-568h@2x.png
    Create ./build/iPhoneSimulator-7.1-Development/HelloWorld.dSYM
  Simulate ./build/iPhoneSimulator-7.1-Development/HelloWorld.app
(main)&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次运行会编译项目的代码，需要等待一段时间。之后能看到iOS模拟器启动。&lt;/p&gt;

&lt;p&gt;这时候的应用只是一个黑色的屏幕，没有任何文字说明和页面提示。Shell此时进入&lt;a href=&quot;http://www.rubymotion.com/developer-center/articles/debugging/&quot;&gt;交互模式&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;怎么样，这种感觉，有没有想到初恋的Rails？&lt;/p&gt;

&lt;h3 id=&quot;say-hello-world&quot;&gt;Say “Hello World!”&lt;/h3&gt;

&lt;p&gt;注：本节参考&lt;a href=&quot;http://rubymotion-tutorial.com/1-hello-motion/&quot;&gt;RubyMotion Tutorial的例子&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;./app/app_delegate.rb&lt;/code&gt;，修改后的相关内容如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    alert = UIAlertView.new
    alert.message = &quot;Hello World!&quot;
    alert.show

    puts &quot;Hello World, Again!&quot;

    true
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App初始化时创建一个UIAlertView对象，之后显示出来。&lt;/p&gt;

&lt;p&gt;重新执行&lt;code&gt;rake&lt;/code&gt;命令，这次可以看到界面中间的提示消息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014/rubymotion-hello-world-1-alert.png&quot; alt=&quot;RubyMotion Hello World&quot;&gt;&lt;/p&gt;

&lt;p&gt;从交互窗口可以看到输出的消息&lt;code&gt;Hello World, Again!&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  HelloWorld  rake
     Build ./build/iPhoneSimulator-7.1-Development
    Create ./build/iPhoneSimulator-7.1-Development/HelloWorld.app/Info.plist
  Simulate ./build/iPhoneSimulator-7.1-Development/HelloWorld.app
(main)&amp;gt; Hello World, Again!
(main)&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子使用了Cocoa的功能（UIAlertView），实现了基本的文字展示，并且还有控制台的文本输出——使用puts进行基本的辅助调试。&lt;/p&gt;

&lt;p&gt;既然是Hello World，细节就不解释太多了。以后的文章会关注更多方面。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;RubyMotion已经形成一个基本的生态圈，进行App开发的上手速度也远远超过了传统工具；配合Xcode工具链使用，大大提高开发速度，能改善代码可维护性。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
&lt;a href=&quot;http://www.rubymotion.com&quot;&gt;RubyMotion Official&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://rubymotion-tutorial.com&quot;&gt;RubyMotion Tutorial&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.quora.com/RubyMotion&quot;&gt;RubyMotion on Quora&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  

</description>
        <pubDate>Fri, 25 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-04-25-2014-04-25-rubymotion-hello-world-app.html-08b74a115.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-04-25-2014-04-25-rubymotion-hello-world-app.html-08b74a115.html</guid>
        
        
      </item>
    
      <item>
        <title>Perl6 的 YAML::Dumper 模块</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;这两天决定试一把 Perl6，因为&lt;a href=&quot;http://www.php-oa.com&quot;&gt;扶凯&lt;/a&gt;兄已经把还没有正式发行 Rakudo Star 包的 MoarVM 编译打包好了，所以可以跳过这步直接进入模块安装。当然，源码编译本身也没有太大难度，只不过从 github 下源码本身耗时间比较久而已。&lt;/p&gt;

&lt;p&gt;既然木有 Star 包，那么安装好 MoarVM 上的 Rakudo 后我们就有必要先自己把 panda 之类的工具编译出来。这一步需要注意一下你的 &lt;code&gt;@*INC&lt;/code&gt; 路径和实际的 &lt;code&gt;$PERL6LIB&lt;/code&gt; 路径，已经编译之后的 panda 存在的 &lt;code&gt;$PATH&lt;/code&gt; 是不是都正确，如果不对的修改一下 &lt;code&gt;~/.bashrc&lt;/code&gt; 就好了。&lt;/p&gt;

&lt;p&gt;我的尝试迁移对象是一个很简单的 Puppet 的 ENC 脚本，只涉及 SQLite 的读取，以及 YAML 格式的输出。通过 &lt;code&gt;panda install DBIish&lt;/code&gt; 命令即可安装好 DBIish 模块。&lt;/p&gt;

&lt;p&gt;脚本本身修改起来难度不大，结果如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl6&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBIish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$base_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/etc/puppet/webui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 函数在 Perl6 中依然使用 sub 关键字定义，不过有个超酷的特性是 multi sub&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 脚本中没有用到，但是在 YAML::Dumper 中遍地都是，这里也提一句。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# MAIN 函数在 Perl6 里可以直接用 :$opt 命令参数起 getopt 的作用&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 不过 ENC 脚本就是直接传一个主机名，用不上这个超酷的特性&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;($node) {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# connect 方法接收参数选项是 |%opts，所以可以把哈希直接平铺写&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 这个 | 的用法一个月前在《Using Perl6》里看到过&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBIish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;SQLite&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{$base_dir}/node_info.db&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select * from node_info where node_fqdn = ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$sth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchrow_hashref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Perl5 的 qw() 在 Perl6 里直接写成 &amp;lt;&amp;gt; 。也不用再通过 [] 来指明是引用&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puppetd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;testing&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;environment&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;role&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 这个 for 的用法，在 Perl5 的 Text::Xslate 模板里就用过&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;classes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;nginx&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 这个 &amp;lt;== 符号指明数据流方向，完全可以把数组倒过来，然后用 ==&amp;gt; 写这行&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 如果不习惯这种流向操作符的，可以用,号，反正不能跟 Perl5 那样啥都不写&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 这里比较怪的一点是我试图把这么长的一句分成多行写，包括每行后面加\，我看到 YAML 代码里就用\分行了，但是我这就会报错&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Perl6 的正则变化较大，这里 /^#/ 要写成 /^&#39;#&#39;/ 或者 /^\x23/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 正则 // 前面不加 m// 不会立刻开始匹配&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 原先的 s///g 可以写作 s:g///，也可以写作对象式的 .subst(m//, &#39;&#39;, :g)，. 前面为空就是默认的 $_&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 捕获的数据存在 @() 数组里，也可以用 $/[i] 的形式获取&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 字符串内插时，不再写作 ${*}，而是 {$*} 的形式&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 命名捕获这里没用上，写个示例：&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     $str ~~ /^(\w+?)$&amp;lt;laststr&amp;gt;=(\w ** 4)\w$/;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     $/&amp;lt;laststr&amp;gt;.chomp.say;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 注意里面的 \w{4} 变成了 \w ** 4&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@needs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;m/^(.+)\:(\d+)$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{$/[0]} max_fails=30 weight={$/[1]}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;m/^\x23/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;extstr&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;classes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;nginx&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;iplist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@needs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Perl5 的 undef 不再使用，可以使用 Nil 或者 Any 对象&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;classes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 这个 dump 就是 YAML 模块导出的函数&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Perl6 的模块要导出函数不再需要 Exporter 那样，直接用 our sub dump($obj) {} 就可以了&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是麻烦的是 YAML 模块本身，这个模块是 ingydotnet 在好几年前草就，后来就没管了，实际现在压根跑不起来。花了半天时间，一边学习一边修改，总算修改正常了。主要涉及了 &lt;code&gt;Attribute&lt;/code&gt; 对象，&lt;code&gt;Nil&lt;/code&gt; 对象，&lt;code&gt;twigls&lt;/code&gt; 前缀符，&lt;code&gt;:exists&lt;/code&gt; 定义几个概念，以及 YAML 格式本身的处理逻辑。&lt;/p&gt;

&lt;p&gt;YAML 模块修改对比如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/lib/YAML/Dumper.pm b/lib/YAML/Dumper.pm
index d7a7981..ec47341 100644
--- a/lib/YAML/Dumper.pm
+++ b/lib/YAML/Dumper.pm
@@ -2,16 +2,16 @@ use v6;
 class YAML::Dumper;
 
 has $.out = [];
-has $.seen is rw = {};
+has $.seen = {};
 has $.tags = {};
 has $.anchors = {};
 has $.level is rw = 0;
-has $.id is rw = 1;
+has $.id = 1;
 has $.info = [];
 
 method dump($object) {
     $.prewalk($object);
-    $.seen = {};
+    $!seen = {};
     $.dump_document($object);
     return $.out.join(&#39;&#39;);
 }
@@ -45,11 +45,11 @@ method dump_collection($node, $kind, $function) {
 
 method check_special($node) {
     my $first = 1;
-    if $.anchors.exists($node.WHICH) {
-    if $.anchors.exists($node.WHICH) {
+    if $.anchors{$node.WHICH}:exists {
         push $.out, &#39; &#39;, &#39;&amp;amp;&#39; ~ $.anchors{$node.WHICH};
         $first = 0;
     }
-    if $.tags.exists($node.WHICH) {
+    if $.tags{$node.WHICH}:exists {
         push $.out, &#39; &#39;, &#39;!&#39; ~ $.tags{$node.WHICH};
         $first = 0;
     }
@@ -64,7 +64,7 @@ method indent($first) {
             return;
         }
         if $.info[*-1]&amp;lt;kind&amp;gt; eq &#39;seq&#39; &amp;amp;&amp;amp; $.info[*-2]&amp;lt;kind&amp;gt; eq &#39;map&#39; {
-            $seq_in_map = 1;
+            $seq_in_map = 0;
         }
     }
     push $.out, &quot;\n&quot;;
@@ -155,7 +155,8 @@ method dump_object($node, $type) {
     $.tags{$repr.WHICH} = $type;
     for $node.^attributes -&amp;gt; $a {
         my $name = $a.name.substr(2);
-        my $value = pir::getattribute__PPs($node, $a.name);     #RAKUDO
+        #my $value = pir::getattribute__PPs($node, $a.name);     #RAKUDO
+        my $value = $a.get_value($node);                         #for non-parrot
         $repr{$name} = $value;
     }
     $.dump_node($repr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code&gt;$.seen&lt;/code&gt; 和 &lt;code&gt;$!seen&lt;/code&gt; 是不是晕掉了？其实 &lt;code&gt;$.seen&lt;/code&gt; 就相当于先声明了 &lt;code&gt;$!seen&lt;/code&gt; 后再自动创建一个 &lt;code&gt;method seen() { return $!seen }&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;另一处是 &lt;code&gt;pir::getattribute__PPs()&lt;/code&gt; 函数，pir 是 parrot 上的语言，而 MoarVM 和 JVM 上都是先实现了一个 nqp 再用 nqp 写 Perl6，不巧的是这个 pir 里的 &lt;code&gt;getattribute__PPs()&lt;/code&gt; 刚好至今还没有对应的 nqp 方法。(在 pir2nqp.todo 文件里可见)&lt;/p&gt;

&lt;p&gt;所以只能用高级的 Perl6 语言来做了。&lt;/p&gt;

&lt;p&gt;总的来说，这个 yaml-pm6 代码里很多地方都是试来试去，同样的效果不同的写法，又比如 &lt;code&gt;.WHICH&lt;/code&gt; 和 &lt;code&gt;.WHAT.perl&lt;/code&gt; 也是混用。
而且我随手测试了一下，即使在 parrot 上，用 &lt;code&gt;pir::getattribute__PPs&lt;/code&gt; 的速度也比 &lt;code&gt;Attribute.get_value&lt;/code&gt; 还差点点。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;最后提一句，目前 ENC 脚本在 perl5、perl6-m、perl6-p、perl6-j 上的运行时间大概分别是 0.13、1.5、2.8、12s。MoarVM 还差 Perl5 十倍，领先 parrot 一倍。不过 JVM 本身启动时间很长，这里不好因为一个短时间脚本说它太慢。&lt;/p&gt;

&lt;p&gt;另外还试了一下如果把我修改过的 YAML::Dumper 类直接写在脚本里运行，也就是不编译成 moarvm 模块，时间大概是 2.5s，比 parrot 模块还快点点。&lt;/p&gt;

&lt;p&gt;不过如何把 perl6 脚本本身编译成 moarvm 的 bytecode 格式运行还没有研究出来，直接 &lt;code&gt;perl6-m --target=mbc --output=name.moarvm name.pl6&lt;/code&gt; 得到的文件运行 &lt;code&gt;moar name.moarvm&lt;/code&gt; 的结果运行会内存报错。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Thu, 24 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-04-24-yaml-dump-pm6-70ae5ebb1.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-04-24-yaml-dump-pm6-70ae5ebb1.html</guid>
        
        
      </item>
    
      <item>
        <title>腾讯云技术沙龙笔记</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;昨天去车库咖啡听了 InfoQ 办的腾讯云图技术沙龙，今天又听了 CSDN 办的开源技术大会上腾讯云的宣讲(没错，就是那个发明了”内部开源”概念的意思)，总的来说，幸亏去了昨天的！&lt;/p&gt;

&lt;p&gt;沙龙包括三个主题：&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;手机推送服务&lt;/h1&gt;

&lt;p&gt;手机推送其实是一个很难有亮点的服务，我之前试用过免费的 JPush 极光推送服务，应该说大家都差不多——引用SDK，通过 RESTful 接口或者网页后台发布通知。&lt;/p&gt;

&lt;p&gt;从业务上说，腾讯云提出一个精准投放的推送概念。
这其实跟后面的多维度数据是联系在一起的，腾讯因为本身(可怕)的数据收集能力，可以很容易的区分几个基础维度——年龄、性别、地域。
(今天午饭跟&lt;a href=&quot;http://weibo.com/turingbook&quot;&gt;@刘江总编&lt;/a&gt;在一起，他谈到CSDN如何跟技术社区、出版社一起做技术书籍时，提到类似问题，CSDN 上也有千万级的用户，但是怎么高质量的做推荐才不透支信誉或者徒劳无功呢？)&lt;/p&gt;

&lt;p&gt;不过在技术周边介绍中，还是聊到了腾讯的 L5 里的技术点，在这记录一下：&lt;/p&gt;

&lt;p&gt;起因是说到&lt;strong&gt;服务扩容，新服务器上线时会自动根据响应质量动态调整其在集群中的权重&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;这里我跟&lt;a href=&quot;http://weibo.com/liucy1983&quot;&gt;@liu点cy&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/opendoc&quot;&gt;@守住每一天&lt;/a&gt;先后猜测并推论了几种在 Nginx 的 upstream 上的实现方式及相关技术。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yzprofile/ngx_http_dyups_module&quot;&gt;ngx_dyups_module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/agentzh/lua-upstream-nginx-module&quot;&gt;ngx_lua_upstream_module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.centurylinklabs.com/auto-loadbalancing-with-fig-haproxy-and-serf/&quot;&gt;Serf + Shell + Haproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过这几种方案一般常见的用途都是上下线而不是权重调整(另一个需要注意的就是在线修改upstream不会同步到nginx.conf文本文件里)。&lt;/p&gt;

&lt;p&gt;那么就涉及到下一步问题：&lt;strong&gt;怎么评定响应质量&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;Nginx 里是有个 &lt;a href=&quot;https://github.com/cep21/healthcheck_nginx_upstreams&quot;&gt;HealthCheck&lt;/a&gt; 模块，不过还很基础。
于是联想到 LVS 项目中的调度算法，常见的RR、LC、LBLC和LBLCR，少见的还有NQ、SED。这都算是根据 RS 的情况智能调整流量导向。&lt;/p&gt;

&lt;p&gt;后来跟讲师交流，稍微了解到了 L5 内部的一点信息。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;流量到应用服务之前会经过两层调度(暂称为DNS agent和local agent)；&lt;/li&gt;
  &lt;li&gt;DNS agent 负责多个 local agent 之间的流量调度；&lt;/li&gt;
  &lt;li&gt;local agent 只负责本组(原话是本机)的应用服务的流量权重调整；&lt;/li&gt;
  &lt;li&gt;一个新服务器上线，首先要经过一次镜像流量的试运行，达到5个9后才正式上线；&lt;/li&gt;
  &lt;li&gt;local agent将收到的每秒10万个请求分配 1% 给新服务器，根据平均响应延时和成功率，判定是否合格，合格就继续加流量；&lt;/li&gt;
  &lt;li&gt;如果某个服务器被判定不合格了，比如低于5个9了，也并不是直接剔除，而是减流量；除非直接成功率只有85%这样，那就是直接踢。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从流程里”本机”还是”本组”的用词，很容易让我联想到类似 docker 或者说 PAAS 平台的做法。
我个人猜测确实有可能就是一组服务器，但是同时也是在一台真实主机上的多个容器。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这种做法应该适合业务运维尝试；CDN 方面，upstream 列表每次变动都会带来巨大的回源压力，反而是越少变动越好&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;多维度数据分析&lt;/h1&gt;

&lt;p&gt;前面提到了腾讯数据分析上最常用的几个维度就是年龄、性别和地域。但其实做数据挖掘维度是超级多的，讲师举了不少例子。&lt;/p&gt;

&lt;p&gt;从腾讯云的概念上来说，这个数据分析主要是几个层次。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基础的经过整理和运算得到的 TopView。这个应该就是 Hive 里的表，按照讲师所说，TopView 里有 30 个左右的维度。
从交流来看，这个 Hive 表内容应该就是以 QQ 号为中心的用户行为数据。每天从原始数据里花点时间更新这个表。&lt;/li&gt;
  &lt;li&gt;选取需要的维度信息做 RollUp。也就是从 TopView 的30个维度数据中选取几个维度做统计分析。这个就是排列组合问题，挨个硬算了。&lt;/li&gt;
  &lt;li&gt;合作用户如果有自定义维度，并且勾选这个维度做统计分析，就要先退回到计算 TopView 这步，把自定义维度按照 TopView 的处理方式来做。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为对 Hadoop 的 Map/Reduce 稍有了解，也用过 Hive，所以这里的东西不算太难理解。
其实整个重点是在如何用用户行为日志整理得到 TopView 这块，从讲师透露信息看，全腾讯的日志提前清洗过滤到一天只有几个 TB ，不到一百台的小集群几个小时就可以完成全部分析任务。但是这块属于纯 coding 问题，没什么太多可讲的。&lt;/p&gt;

&lt;p&gt;在边听演讲的时候我也边思考了一下如果这个问题用 Elasticsearch 做，会怎么样？&lt;/p&gt;

&lt;p&gt;由于ES不需要定义 schema，所以类似 TopView 整理这段应该更轻松一些；
RollUp 计算就是写 &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html&quot;&gt;bool query&lt;/a&gt;。
这个效率如何我不太了解。&lt;/p&gt;

&lt;p&gt;(今天的会场上有介绍腾讯大数据平台的，应该跟这个多维度分析不是一个平台，今天的讲师说到他们的平台除了Hadoop这套还用到了pgsql)&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;移动动态加速&lt;/h1&gt;

&lt;p&gt;这一部分是个人比较关心的部分。移动来源占比越来越大，移动网络质量却一如既往的复杂和烂。如何有效提高移动访问质量现在也是大家都关心的问题，本周网宿也刚发布了他们的私有协议加速产品。&lt;/p&gt;

&lt;p&gt;腾讯的做法是也提供了 SDK，但本质上没有做完全的私有协议优化而是尽量利用可靠的自建私有网络，软件的部分应该是今天宣布开源了，地址在：&lt;a href=&quot;https://code.csdn.net/Tencent/mna&quot;&gt;https://code.csdn.net/Tencent/mna&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;SDK 的主要工作流程如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;APP 初次运行，正常访问流程的同时，调用 SDK 开始运作；&lt;/li&gt;
  &lt;li&gt;SDK 内置有 3 个主要运营商一共 9 个默认 ANS(应该是 application name service 的意思吧)的 IP 地址，同时向这 9 个地址发送 HTTP 请求；
请求内容包括应用使用的域名、 SDK 获取到的本机 IP 和接入运营商(后二者如果获取不到，其实 ANS 通过 HTTP 本身也没问题)；&lt;/li&gt;
  &lt;li&gt;ANS 根据请求，返回尽量近的 OC、RS 和 TEST 三个 IP 地址信息；&lt;/li&gt;
  &lt;li&gt;SDK 根据最快返回的那个 ANS 的响应结果，开始并发测试本机到 OC 和 TEST 地址的链路情况；
其中，OC 应该是跟 SDK 地址在同省同运营商，并且是负载最低的；TEST 应该是跟 RS 在同机房，作为 RS 的替身来参加链路测试工作；&lt;/li&gt;
  &lt;li&gt;如果 TEST 测试结果占优，那 APP 继续直连 RS，走正常访问流程就可以了；
如果 OC 测试结果占优，那么 APP 之后的请求，将改为发往 OC 的地址，由 OC 转发给 RS；&lt;/li&gt;
  &lt;li&gt;在 APP 运行过程中，链路测试是定时每十分钟做一次；当然类似推送这样的长连接服务，不会因为链路测试结果切换而被主动断开。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OC 方面的主要工作包括：&lt;/p&gt;

&lt;h3 id=&quot;tcp-&quot;&gt;TCP 代理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TCP 代理就是 sock5 代理。不过针对移动环境做了一些优化，去除了sock5里的一些验证算法；&lt;/li&gt;
  &lt;li&gt;在 TCP 方面，去掉了 nagle 算法，也就是打开了 TCP_NODELAY 参数。
nagle 算法本身是做小包合大包，提高传输效率的；不过在移动环境下，某个包的丢失或者延迟是个很常态的情况，而 nagle 算法中一个包延迟，所有包都要等在后面的情况就会被放大了，所以打开 TCP_NODELAY 应该可以避免这个情况(个人尚未测试验证过，或许可以相信腾讯)。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-&quot;&gt;HTTP 代理&lt;/h3&gt;

&lt;p&gt;没细说，应该就是 squid 或者 nginx 之类的。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;集群层面&lt;/h3&gt;

&lt;p&gt;每个机房都做了集群，通过 VIP 统一发布。这方面跟&lt;a href=&quot;http://weibo.com/opendoc&quot;&gt;@守住每一天&lt;/a&gt;浅聊了一下通过 MPLS 协议实现 Anycast 来在多机房间维护统一的 VIP。不过看起来大家系统运维跟精通 BGP 的网络专家联系都比较远，这方面还处于有所耳闻的状态。&lt;/p&gt;

&lt;p&gt;最后还有一个小问题，就是上面我们看到过好几处，提到”并发”、”同时”这样的字眼，于是当时产生一个疑问：&lt;em&gt;“三个演讲中，都反复强调为了手机省电我们做了这做了那的，为什么为了优化级别的测试工作，却这么频繁和高密度的做并发请求呢？比如 ANS 请求，我只给本运营商的2个ip发请求也可以接受啊？”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这个问题正好被旁边围观的另一位听众解答了：手机内的 3G 通信模块，一次大批量的数据发送跟几次小批量的数据发送相比其实更省电。&lt;/p&gt;

&lt;p&gt;讲师则从实际效果角度证明，目前的频率和策略，从使用上看，确实看不出来对电量的影响。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Sun, 30 Mar 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-03-30-qcloud-tech-36eeb87df.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-03-30-qcloud-tech-36eeb87df.html</guid>
        
        
      </item>
    
      <item>
        <title>ansible来了</title>
        <description>                &lt;div&gt;
&lt;h2&gt;番一、OP酱的自白&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;     自从入了贵圈，每天需要强大的内心来维护混乱的线上，每天都是用浆糊一样的shell /python在糊墙补窟窿啊，感觉每天都是在和if else打交道啊，每次花牛鼻子劲写的脚本，下次来点新需求，能重用的部分居然少到不想再重用，很绝望啊，有木有？批量运行工具还是在lhck lhcp，每次一长串命令，各种转义各种烦躁啊，有木有？转义也就罢了，还时不时被信任关系之类的bulabula，爷是root？这是啥root啊！&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/1.jpeg&quot; width=&quot;280&quot; height=&quot;251&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;番二、 ansible vs puppet vs saltstack&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;你一定不会屈服的，实际上很多人已经揭竿而起投笔从戎写出各种IT Automation Management Tool/System（ITAMS），甚至有人还遍尝百草，把经验写成了书（佩服！），我们要搞一个进来也是大势所趋，你真的不想扩容扩到睡着了。&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/2.png&quot; width=&quot;707&quot; height=&quot;212&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;你也一定听过很多ITAMS，那么你看好哪一个呢？所谓萝卜青菜各有所爱，呐，我来放一下我的选择理由：&lt;/div&gt;
&lt;div&gt;首先，没有一个工具是能满足大家所有需求的，所以开发是more or less的事了，在选择的时候，我们的标准是：&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;     1. 可作为批量执行工具&lt;/div&gt;
&lt;div&gt;     2. 可支持playbook，模块化&lt;/div&gt;
&lt;div&gt;     3. 容易上手，开发扩展容易&lt;/div&gt;
&lt;div&gt;     4. 在权限控制方面能很好的与目前的登陆授权管理系统结合&lt;/div&gt;
&lt;div&gt;     5. 社区活跃，有问题能查到解决办法&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;就playbook和模块化来说，puppet，saltstack和ansible半斤八两，就不细比了。&lt;/div&gt;
&lt;div&gt;puppet有产品线已经在用，优点是历史悠久，比较成熟，在可远程可本地，功能强劲，不过这厮批量执行功能没得，为了批量执行个命令写个配置文件，好像有点大刀砍蚊子腿的感觉了，而且有客户端在，和授权系统结合比较麻烦。&lt;/div&gt;
&lt;div&gt;saltstack和ansible都是python流的，而且就功能上来讲，两者也极为相似，不同之处是salt stack是有客户端的，并且execution模块还用0MQ实现了pub-sub，命令和执行结果因此可以高效并行传输，不过成也萧何败也萧何，第一个sub阶段（将querystring下发到所有机器，然后收集机器响应的阶段）太依赖与客户端返回了，如果客户端未能及时返回或未响应的话，playbook执行阶段可能会直接漏掉这部分机器而没有任何提示，这对于运维来说是不可接受的，要改造这个就得推掉saltstack的现有架构…算了吧。&lt;/div&gt;
&lt;div&gt;与前两者比起来，ansible在特性上似乎并不抢眼，配置管理方面（playbook）绝对比不过老大哥puppet，批量执行方面也只是多线程，不像saltstack那么高大上，不过ansible搜索热度高出saltstack三倍多，显然靠的不是吹牛，至少，ansible至少不会悄悄的丢机器，这给了我们一个定心丸，而且仅依赖ssh，与登录授权管理系统天然集成，简单即有效，没有比这更美妙的事情了。&lt;/div&gt;
&lt;div&gt;So， 让我们来尝尝Ansible吧！&lt;/div&gt;
&lt;p&gt;&lt;span id=&quot;more-1420&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;h2&gt;番三、Ansible的说明书&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;三番一话 ansible&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;ansible是一个python package，是个完全的unpack and play软件，对客户端唯一的要求是有ssh有python，并且装了python-simplejson包，部署上简单到发指。&lt;/div&gt;
&lt;div&gt;安装完成后，ansible套装里会有几个可执行命令，我们重点讲两个&lt;/div&gt;
&lt;div&gt;ansible 是一个批量执行工具，可以理解为一个已经插件化的lh工具。&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;     一个最简单的运行实例如下：&lt;/div&gt;
&lt;div&gt;     &lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/3.png&quot; width=&quot;768&quot; height=&quot;108&quot;&gt;
&lt;/div&gt;
&lt;div&gt;     ansible 从hosts.txt中读取机器列表，并匹配其中机器名符合正则xcache06的机器，在其上执行date命令&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;     再看一个：&lt;/div&gt;
&lt;div&gt;     &lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/4.png&quot; width=&quot;770&quot; height=&quot;128&quot;&gt;
&lt;/div&gt;
&lt;div&gt;     和上一个相比，有一些变化。&lt;/div&gt;
&lt;div&gt;     · 首先，这个例子中，机器列表是从系统配置里自动得到的；&lt;/div&gt;
&lt;div&gt;     · 然后还多了个-m，指明了我们是在调用yum模块，实际上第一个例子中，module也是有的，只不过是默认的shell，我们可以不写而已；&lt;/div&gt;
&lt;div&gt;     · 最后 -a参数也有些特别，需要理解这些参数不难，执行ansible-doc yum就可以获得帮助:&lt;/div&gt;
&lt;div&gt;     &lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/5.png&quot; width=&quot;762&quot; height=&quot;538&quot;&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;三番二话 host-pattern&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;     在上面的示例中，大家可能注意到了第一个参数，这个参数被称为host-pattern，主要用来从全量机器/分组列表中筛选出符合要求的机器列表。&lt;/div&gt;
&lt;div&gt;     之所以单独放出来讲，是因为在ansible命令中，host-pattern参数算是比较需要耗费记忆力的地方，并且我们也做了一点修改，大体介绍下：&lt;/div&gt;
&lt;div&gt;     ”plain-example”              机器名或组名等于plain-example的机器&lt;/div&gt;
&lt;div&gt;     ”~regex-excmple”           机器名或组名正则匹配regex-excmple的机器&lt;/div&gt;
&lt;div&gt;     ”~regex-array[1-3]”        机器名或组名正则匹配regex-array[1-3]的机器【与官方版本有差异，官方版本有bug，查看网络文档时请关注】&lt;/div&gt;
&lt;div&gt;     ”~regex-array[2]”           机器名或组名正则匹配regex-array的机器list中的第3个【为啥是[2]？程序员从零开始数….依赖hosts脚本返回，不要使用！！】&lt;/div&gt;
&lt;div&gt;     ”~regex-array[1:2]”        机器名或组名正则匹配regex-array的机器list中的第2个【为啥是第2个？左闭右开+程序员从0开始….依赖hosts脚本返回，不要使用！！】&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;     ”pdl.relation&lt;span style=&quot;color: #ff0000;&quot;&gt;;&lt;/span&gt;pdl.bmw”     获取pdl.relation和pdl.bmw的并集，逻辑”或“&lt;/div&gt;
&lt;div&gt;     ”pdl.relation&lt;span style=&quot;color: #ff0000;&quot;&gt;;&amp;amp;&lt;/span&gt;pdl.bmw”   获取pdl.relation和pdl.bmw的交集，逻辑”与“&lt;/div&gt;
&lt;div&gt;     ”pdl.relation&lt;span style=&quot;color: #ff0000;&quot;&gt;;!&lt;/span&gt;pdl.bmw”    获取属于pdl.relation但不属于pdl.bmw的机器集合，逻辑”非”&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;     逻辑”或与非“可以与普通或正则规则一起使用，比如：&lt;/div&gt;
&lt;div&gt;     &lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/6.png&quot; width=&quot;768&quot; height=&quot;181&quot;&gt;
&lt;/div&gt;
&lt;div&gt;     但是，需要注意的是，ansible的“逻辑操作”并不遵守典型的逻辑运算法则，处理的过程是：按分号切分 — 所有“非”组成排除集 — 所有“与”组成交集， — 所有“或”组成最终结果&lt;/div&gt;
&lt;div&gt;     官方程序支持从脚本获取机器和分组信息，我们利用此特性与公司内的运维管理系统进行了集成，小米的机器用一组tag来维护，对于每一个tag，我们都在cache中建立了对应的组，查询时请按照上述规则组装即可&lt;/div&gt;
&lt;div&gt;     比如，tagstr pdl.bmw_sbs.fe_srv.nginx 可以写成pdl.bmw&lt;span style=&quot;color: #ff0000;&quot;&gt;;&amp;amp;&lt;/span&gt;sbs.fe&lt;span style=&quot;color: #ff0000;&quot;&gt;;&amp;amp;&lt;/span&gt;srv.nginx ，关于这个脚本的书写方法和小米机器管理系统的相关介绍，可以参见“&lt;a title=&quot;ansible动手篇-如何书写自己的hosts脚本&quot; href=&quot;http://noops.me/?p=1446&quot; target=&quot;_blank&quot;&gt;如何写出自己的host脚本&lt;/a&gt;”一文。&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;     更多ansible相关命令，请查看ansible -h&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;三番三话  ansible-shell&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;每次敲ansible xxx ，敲得多了，是不是也有些烦躁了？来试试ansible-shell吧！这个shell来自github，我们对他做了一些修改完善，美化输出，增加了后台日志，机器数实时显示，step by等实用功能，所有更改目前已merge进主干，来看看吧：&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/7.png&quot; width=&quot;699&quot; height=&quot;648&quot;&gt;&lt;/div&gt;
&lt;div&gt;支持cd 确定操作集，支持内置模块命令和参数补全，是不是方便多了？&lt;/div&gt;
&lt;div&gt;CentOS 默认没有装pip，运行自然失败，装一个吧：&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/8.png&quot; width=&quot;700&quot; height=&quot;336&quot;&gt;&lt;/div&gt;
&lt;div&gt;等等，权限？没问题，加参数！&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/9.png&quot; width=&quot;696&quot; height=&quot;725&quot;&gt;&lt;/div&gt;
&lt;div&gt;下载失败这事吧。。，算了，下一个话题！&lt;/div&gt;
&lt;div&gt;呐，能不能切换到其它账号？&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/10.png&quot; width=&quot;704&quot; height=&quot;396&quot;&gt;&lt;/div&gt;
&lt;div&gt;这个没解决是不好意思给大家用的。&lt;/div&gt;
&lt;div&gt;作为一名SRE，手中自有千钧之力，一回车reboot一票机器，岂不是成千古恨？加个-p参数吧，每次run之前都确认下，是不是安全感多了好多？&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/11.png&quot; width=&quot;693&quot; height=&quot;830&quot;&gt;&lt;/div&gt;
&lt;div&gt;敢不看清楚就回车的，都是真勇士，大家在y前还是先确认下参数好一些。&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;有人就烦了，说你截图太多了，到现在我还没明白基础使用呢。先系统讲讲呗！&lt;/div&gt;
&lt;div&gt;行！&lt;/div&gt;
&lt;div&gt;ansible-shell内置的命令主要有四个：&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;cd :     切换到指定的组/表达式筛选的机器集合上&lt;/div&gt;
&lt;div&gt;list：    显示目前的机器集合，list groups 可以列出所有的组（对我们可能没啥用）&lt;/div&gt;
&lt;div&gt;serial：运行时的并发度，默认是20&lt;/div&gt;
&lt;div&gt;help：  顾名思义，他能生成简单的模块帮助信息，方便即时查询&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/12.png&quot; width=&quot;692&quot; height=&quot;382&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/13.png&quot; width=&quot;694&quot; height=&quot;27&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;不过上面大家显然看到了更多的命令，这些命令是怎么个用法呢，我打了一行参数进去，到底是谁去执行了 ?&lt;/div&gt;
&lt;div&gt;是这样的：ansible-shell在启动时将所有的内置命令/ansible模块和参数列表等都加入自动补全中，在你敲完每个命令回车后，它会拿第一个参数判断你输入的是不是一个内置命令(cd/list/serial)，是则执行；否则看他是不是一个ansible模块,是则运行ansible模块；否则，认为他是一个shell命令，举例来说，当你输入hostname -i的时候，你会发现他会报错，原因是有个ansible模块就叫hostname，如果你一定想运行shell的那个hostname，在前面加个!就可以了&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/13.1.png&quot; width=&quot;692&quot; height=&quot;187&quot;&gt;&lt;/div&gt;
&lt;div&gt;那，我就想运行shell怎么办？ 前面加个!就好&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/13.2.png&quot; width=&quot;691&quot; height=&quot;70&quot;&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;进可攻退可守啊，会用了没？&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/14.png&quot; width=&quot;225&quot; height=&quot;224&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;麻麻再也不用担心我的批量操作了&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/15.jpeg&quot; width=&quot;329&quot; height=&quot;374&quot;&gt;&lt;/div&gt;
&lt;div&gt;收队！下面我们迅速带过剩下的部分吧！&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h3&gt;三番末&lt;/h3&gt;
&lt;/div&gt;
&lt;div&gt;ansible套件中的其他工具：&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;ansible-doc                模块文档查看器，很有用，使用ansible -l 显示所有module列表，使用 ansible-doc  &amp;lt;module_x&amp;gt;来查看module_x的详细文档，这里不做太多介绍&lt;/div&gt;
&lt;div&gt;ansible-playbook    传说中的配置管理工具，如果你用过puppet或者saltstack，这个可以不用介绍了，如果你没用过，也没关系，花费20分钟看下&lt;a href=&quot;http://fast.wistia.net/embed/iframe/qrqfj371b6?popover=true&quot; target=&quot;_blank&quot;&gt;官方的Video&lt;/a&gt;。 掌握一件事情最好的办法就是使用它，你可以下载&lt;a href=&quot;https://github.com/ansible/ansible-examples&quot; target=&quot;_blank&quot;&gt;官方的example&lt;/a&gt;来学习&lt;/div&gt;
&lt;div&gt;ansible-galaxy         和三星没关系，你可以把他理解成ansible的pip，可以从galaxy.ansible.com下载官方收录的playbooks&lt;/div&gt;
&lt;div&gt;ansible-pull               支持直接从git下载playbook执行，需要遵循其规定的目录格式，用处不是特别大，可以不关注&lt;/div&gt;
&lt;div&gt;ansible-vault            如果你的配置文件中含有敏感信息，你可能并不希望他能被人看到，vault可以帮你加密/解密这个配置文件，高级用法，请参照&lt;a href=&quot;http://blog.ansibleworks.com/2014/02/19/ansible-vault/&quot; target=&quot;_blank&quot;&gt;http://blog.ansibleworks.com/2014/02/19/ansible-vault/&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;如果希望了解更多，请访问官方wiki主页和博客：&lt;/div&gt;
&lt;div&gt;官方文档： &lt;a href=&quot;http://docs.ansible.com/intro.html&quot; target=&quot;_blank&quot;&gt;http://docs.ansible.com/intro.html&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;官方博客：&lt;a href=&quot;http://blog.ansibleworks.com/?__hstc=5198188.c680ab6bd2f14d0f647d2369475a84cc.1390546220488.1394340984602.1394349827237.15&amp;amp;amp;__hssc=5198188.1.1394349827237&amp;amp;amp;__hsfp=616474799&quot; target=&quot;_blank&quot;&gt;http://blog.ansibleworks.com&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;我想开发！&lt;/h2&gt;
&lt;/div&gt;
&lt;div&gt;欢迎！&lt;/div&gt;
&lt;div&gt;本人github上的地址为htps://github.com/iambocai，欢迎您共享和交流&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;为了方便大家快速了解代码结构，我以执行流程作为切入点给大家讲下代码结构。&lt;/div&gt;
&lt;div&gt;ansible执行过程大体过程如下图，其中暖色调的代表已经模块化。&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/16.png&quot; width=&quot;554&quot; height=&quot;436&quot;&gt;&lt;/div&gt;
&lt;div&gt;代码结构就是这个样子，对哪一块不满意，一起来改造吧！&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot; src=&quot;http://noops.me/wp-content/uploads/2014/03/17.png&quot; width=&quot;414&quot; height=&quot;525&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
            
</description>
        <pubDate>Fri, 14 Mar 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-03-14--p=1420-978bbb76c.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-03-14--p=1420-978bbb76c.html</guid>
        
        
      </item>
    
      <item>
        <title>Perl5 的 Source Filter 功能</title>
        <description>  &lt;div style=&quot;background-color: #FFF;&quot;&gt;
    &lt;p&gt;去年在 &lt;a href=&quot;https://github.com/stevan/p5-mop-redux&quot;&gt;p5-mop-redux&lt;/a&gt; 项目里看到他们在 Perl5 里实现了 Perl6 的面向对象设计的很多想法，尤其下面这段示例让人印象深刻：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point3D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point3D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x: %d, y: %d, z: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这种 &lt;code&gt;$!x&lt;/code&gt; 的变量是怎么实现的？最近几天，又在 CPAN 上看到另一个模块叫 &lt;a href=&quot;https://metacpan.org/pod/Perl6::Attributes&quot;&gt;Perl6::Attributes&lt;/a&gt;，实现了类似的语法。于是点进去一看，实现原来如此简单！&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;nb&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Perl6::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.006001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0.04&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Filter::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Simple&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;s/([\$@%&amp;amp;])\.(\w+)/&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        $1 eq &#39;$&#39; ? &quot;\$self-&amp;gt;{&#39;$2&#39;}&quot; : &quot;$1\{\$self-&amp;gt;{&#39;$2&#39;}\}&quot;/ge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;s[\./(\w+)][\$self-&amp;gt;$1]g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;原来这里用到了 Perl5.7.1 以后提供的一个新特性，叫做 &lt;a href=&quot;https://metacpan.org/pod/distribution/Filter/perlfilter.pod&quot;&gt;Source Filters&lt;/a&gt; 。在解释器把 file 变成 parser 的时候加一层 filter。&lt;/p&gt;

    &lt;hr&gt;
    
    &lt;hr&gt;
    


  &lt;!-- UY BEGIN --&gt;


&lt;!-- UY END --&gt;






  &lt;/div&gt;
</description>
        <pubDate>Mon, 10 Mar 2014 00:00:00 +0800</pubDate>
        <link>http://iftti.com/posts/2014/2014-03-10-source-filter-in-perl5-da9bcaf25.html</link>
        <guid isPermaLink="true">http://iftti.com/posts/2014/2014-03-10-source-filter-in-perl5-da9bcaf25.html</guid>
        
        
      </item>
    
  </channel>
</rss>
